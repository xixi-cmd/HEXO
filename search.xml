<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>悖论</title>
      <link href="2021/01/31/%E6%82%96%E8%AE%BA/"/>
      <url>2021/01/31/%E6%82%96%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="悖论"><a href="#悖论" class="headerlink" title="悖论"></a>悖论</h1><h2 id="纪念碑谷"><a href="#纪念碑谷" class="headerlink" title="纪念碑谷"></a>纪念碑谷</h2><p>额，在这之前，问个问题，你玩过一款游戏吗？叫做《纪念碑谷》。《纪念碑谷》（英语：Monument Valley）是一款由Ustwo独立游戏工作室在2014年开发和发行的解谜游戏。在游戏中，玩家引导主人公“公主”艾达在错视和不可能的几何物体构成的迷宫中行走，达到每个关卡的目的地。基于公司游戏设计师王友健的所绘制出概念图，到整个游戏开发出来一共花了10个月左右的时间。《纪念碑谷》的视觉风格受极简主义、日本木版画、独立游戏：《超级兄弟：剑与魔剑使-EP》、《Windosill》和《菲斯》的影响，《纪念碑谷》也被评论家们拿来与莫里茨·科内利斯·埃舍尔的画作和游戏《无限回廊》作比较。游戏中设计的每一帧可以值得像艺术品一样公开展览。《纪念碑谷》在经过内部最后测试后，于2014年4月3日在iOS平台发行。之后移植到Android平台和Windows Phone平台。游戏普遍的受到玩家的好评。评论家称赞了游戏的艺术性和音乐，但认为游戏缺乏难度以及关卡较短。纪念碑谷曾获得2014年苹果设计奖，并获得苹果2014年最佳iPad游戏的提名。在2015年1月付费下载量超过两百万。2017年6月5日在iOS平台推出游戏独立续作《纪念碑谷2》，后在2017年11月6日上架Google Play Store。<br>在《纪念碑谷》中，玩家操纵主角艾达公主穿越各种由视错觉和不可能的几何物体所组成的迷宫。这些迷宫在游戏中被称为“神圣几何”，艾达为寻求某种宽恕而穿越它们。游戏以等轴测投影呈现，玩家需要与周围环境互动，来寻找通往地图终点的隐藏通道。游戏拥有十个不同中央机制的关卡。玩家与游戏之间的互动包括移动平台和图腾，以及创建桥梁。游戏通过颜色等设计元素间接地引导玩家，而阻碍艾达前进道路的乌鸦人则直接地引导玩家。评论员将游戏的视觉风格与的莫里茨·科内利斯·埃舍尔的画作和《无限回廊》进行比较。游戏包括摄像头模式，玩家可以在漫游关卡的途中进行屏幕截图，并可以使用与Instagram相似的滤镜功能<br>游戏开发者大会上，王友健提到，对游戏的命名是制作过程中较为困难的一部分。最开始王友建团队使用了《幻影之塔》（Tower of Illusion）之名，但在整合完游戏要素后，游戏则被正式命名为《纪念碑谷》（Monument Valley）。王友建表示原因或许是“游戏里所有的建筑都是一座座纪念碑”，而且认为是出于便于记忆的需要</p><h4 id="发展"><a href="#发展" class="headerlink" title="发展"></a>发展</h4><p>《纪念碑谷》由Ustwo下辖的UstwoGames工作室开发，Ustwo是一家诞生于2004年的数字产品、交互界面设计公司，自2004年以来就开始开发了iPhone应用软件。他们开发的游戏Whale Trail获得了上百万的下载量，他们其他的应用还有设计类的Granimator和图片分享类的Rando。《纪念碑谷》被设想为一款在平板电脑上的屏幕触控游戏。它自2013年起开始制作，花了10个月完成。《纪念碑谷》游戏的制作以埃舍尔风格的艺术概念画作开始，而且最终的设计不能与原始的有较大的偏差。Ustwo的管理部门并没有给设计团队提供任何预算和下明确的时间表，而是告诉他们专注于“制作出一个高质量的产品。”因为游戏的开发部门（UstwoGames）并不是Ustwo收入的主要来源，所以Ustwo才专注于它们的游戏开发部门是否能开发出“伟大的作品”，而不是关心应用能否带来巨额利润<br>游戏的艺术风格上，担任设计师和美工师的王友健表示他的目标是能让游戏的每一帧都值得像艺术作品一样公开展示。在真正决定成为一个设计项目时，首先以王友建绘制的设计稿为开始。《纪念碑谷》的视觉风格受到了日本木版画和在雕塑设计上的极简主义和独立游戏：《超级兄弟：剑与魔剑使-EP》、《Windosill》和《菲斯》的影响。同时关卡中的“纪念碑”的设计参照物包括了蛋糕、甜甜圈的纹路、八音盒、旋转木马和陀螺以及鞋柜和暖气散热片。游戏通过颜色来指明玩家能在何处互动，这与《镜之边缘》相似[5]。同时为了在iPad或iPhone上有限的屏幕上更好将游戏内容全面展现以及让玩家有更好的游戏体验，王于是将游戏的一个关卡内划分为两到三个部分，通过到指定的位置来开启下一个部分。王友健将玩家在游戏的经历比作在玩具商店里的新奇与《狮子·女巫·魔衣橱》世界的奇幻感二者的交织[3]，并且在游戏中的故事更像是一首具有象征意义的“歌”而非仅仅是一本叙事的书或一部电影。《纪念碑谷》被设计为需要由大多数玩家来完成，希望玩家们能参与进来，发挥想象力，王友建还提到游戏在设计上需要让玩家经过一番探索来找到游戏里的目标而不是受直接的提示引导，游戏中不同寻常的风格是为普通的大众们设计的。游戏也被预期为是一段“独特的经历”而非是一项困难的挑战。</p><p>游戏于2013年12月进行内部测试[，共有一千多人参与测试并得到游戏的平均完成时间为90分钟。游戏最初也被设计为一个在iPad上的独有游戏[5]。《纪念碑谷》在2014年4月3日在iOS上首次登场，在首次发行的第二周公司收回了他们开发游戏的成本。《纪念碑谷》后被移植到了Android平台，经过两次测试后[14]于2014年5月14日首次发行。截至2014年4月，更多的游戏关卡处于开发中。Ustwo说他们正以“艺术的原因”增加关卡，他们想去尝试照着这个想法做但可能会与原版游戏内容不相配。王声称如果玩家们期望能够游戏能其移植到其他平台上，他们是会为之考虑的。《纪念碑谷》的总监说游戏自使用Unity游戏引擎后“转移至另一系统并不困难”。但是游戏以肖像画作形式的（即竖向的）屏幕方向做成，使得开发者难以将游戏改变为适合风景画方向的（即横向的）屏幕，例如不能在YouTube上发表这种视频格式的预告片或移植到PlayStation Vita上。<br>《纪念碑谷》附加的篇章&lt;被遗忘的海岸&gt;（Forgotten Shores）于2014年11月12日在iOS平台上发布，同年11月20日登陆App Store，24日登陆Google Play Store。在原有的十个关卡下增加了八个关卡，在11月24日又推出了特别的篇章&lt;艾达的（红色）梦&gt;（Ida’s (RED) Dream），公司声称会把这个需要付费的独立关卡的收入全数捐赠给对抗艾滋病的慈善机构“Product Red”[18]，此举也是针对即将到来的2014年世界艾滋病日而发起的一个倡议。在2015年4月30日游戏被移植到Windows Phone上[20]。同年的6月25日游戏再次推出&lt;艾达的 （蓝色）梦&gt;章节（Ida’s (BLUE) Dream）。<br><img src="https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=3628496899,1699636620&fm=26&gp=0.jpg"></p><div class='tip info'><p>前面水了这么多，写写自己的,纪念碑谷的话，emmm，用了大量的空间悖论你不知道空间悖论？？？放图<p></div><p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=1391931512,1747796284&fm=26&gp=0.jpg"></p><h2 id="归根结底，什么是悖论？"><a href="#归根结底，什么是悖论？" class="headerlink" title="归根结底，什么是悖论？"></a>归根结底，什么是悖论？</h2><p>用Bilibili某位老师的话来讲的话，悖论分为真悖论和假悖论，假悖论呢，就是所谓的似是而非，看着是真的，但是是假的。比如说历史上著名的芝诺悖论，阿基琉斯追不上乌龟，为什么？这个悖论是个假悖论，为什么？这个故事讲的是一个人和乌龟赛跑，条件是先让乌龟跑100m，然后你去追，当你跑到100m的时候，乌龟可能向前爬行了5m，于是新的路程$S_1$出现了，你又向前跑$S_1$，乌龟向前爬行0.5m，你向前走0.5m，乌龟向前爬行0.3m，你接着向前走0.3m…..就这样一直套下去，看上去是无解的东西，我们把它放到作者的角度看看，我们猜想，芝诺可能认为，人从一个起点到一个终点，首先要经过路程的$\frac{1}{2}$，然后，接着走剩下$\frac{1}{2}$路程的$\frac{1}{2}$,然后接着走剩下$\frac{1}{4}$的$\frac{1}{2}$，再走$\frac{1}{8}$的 $\frac{1}{2}$ ，接着走剩下$\frac{1}{16}$的$\frac{1}{2}$路程，这样就出现了无数个路程$S$,我们很好奇，0.5+0.25+0.125+0.0625+0.0325+0.015625……以后，最终值是否是1？当然那是不可能的，因为在伟大的英国，有个人叫作马克思·普朗克（Max Planck）</p><h3 id="Max-Planck"><a href="#Max-Planck" class="headerlink" title="Max Planck"></a>Max Planck</h3><p>马克斯·卡尔·恩斯特·路德维希·普朗克（德语：Max Karl Ernst Ludwig Planck，1858年4月23日－1947年10月4日），德国物理学家，量子力学的创始人。以发现能量量子获得1918年度的诺贝尔物理学奖（1919年颁发）[1]。以之为名的普朗克常数于2019年被用于重新定义基本单位，此外还有以之为名的科学奖座、机构和学会。</p><p>普朗克出生在一个受到良好教育的传统家庭，他的曾祖父戈特利布·普朗克（Gottlieb Planck，1751年－1833年）和祖父海因里希·普朗克（Heinrich Planck，1785年－1831年）都是哥廷根的神学教授，他的父亲威廉·普朗克（Wilhelm Planck，1817年－1900年）是基尔和慕尼黑的法学教授，他的叔叔戈特利布·普朗克（Gottlieb Planck，1824年－1907年）也是哥廷根的法学家和德国民法典的重要创立者之一。</p><p>马克斯·普朗克10岁时的签名<br>马克斯·普朗克出生于1858年4月23日的基尔，是父亲的第二任妻子母亲埃玛·帕齐希（Emma Patzig，1821年－1914年）所生的，他受洗及赐名为卡尔·恩斯特·路德维希·马克斯·普朗克，其赐名的名称简称为马克斯，而马克斯也沿用此名直到他过世。而普朗克他还有另外六个兄弟姐妹，其中四个孩子赫尔曼（Hermann）、希尔德加德（Hildegard）、阿达尔贝特（Adalbert）和奥托（Otto）是父亲的第二任妻子所生的，而父亲的第一任妻子留下了两个孩子胡戈（Hugo）和埃玛（Emma）。</p><p>普朗克在基尔度过了他童年最初的几年时光，他最早的记忆便是1864年普丹战争期间，普鲁士奥地利联军进入基尔。1867年全家搬去了慕尼黑，普朗克在慕尼黑的马克西米利安文理中学（德语：Maximiliansgymnasium München）读书，在那里他受到数学家奥斯卡·冯·米勒（Oskar von Miller，后来成为了德意志博物馆的创始人）的启发，引起青年时期的马克斯发现自己对数理方面有兴趣。米勒也教他天文学、力学和数学，从米勒那普朗克也学到了生平第一个物理定律——能量守恒定律。之后普朗克在17岁时就完成了中学的学业，在这个学校学习的这段期间内，也是普朗克第一次接触物理学这个领域。</p><h3 id="回到正题"><a href="#回到正题" class="headerlink" title="回到正题"></a>回到正题</h3><p>普朗克在1900年发现了能量可以到达不可能再分割的单位，把这个单位叫做<code>量子</code>,我没有要水文章的意思，不必担心——也就是说，时间和空间不可能无限地细分下去，他们都有一个最小的单位，后世为了纪念他，把这最小的单位命名为普朗克长度，和普朗克时间<br>普朗克时间 = 普朗克长度/光速<br>普朗克时间 = $10^{-43}s$<br>前面无限求和也可以用数学里的微积分来计算，很明显，最后结果是不可能等于一的！$|im\sum\limits_{n = 1}^n \frac{1}{2^n}=|$ $n = +∞$</p><h1 id="常见的几个悖论"><a href="#常见的几个悖论" class="headerlink" title="常见的几个悖论"></a>常见的几个悖论</h1><h2 id="祖父悖论"><a href="#祖父悖论" class="headerlink" title="祖父悖论"></a>祖父悖论</h2><p>外祖母悖论，即祖父悖论，是有关时间旅行的悖论。由法国科幻小说作家赫内·巴赫札维勒（René Barjavel）在1943年小说《不小心的旅游者》（Le Voyageur Imprudent）中提出。<br>悖论情形如下：假如你回到过去，在自己父亲出生前把自己的祖父母杀死，但此举动会产生一矛盾的情况：你回到过去杀了你年轻的祖母，祖母死了就没有父亲，没有父亲也不会有你，那么是谁杀了祖母呢？ 或者看作：你的存在表示，祖母没有因你而死，那你何以杀死祖母？<br>这就是祖母悖论宽矛盾。<br>祖父悖论是一种时间旅行的悖论，科幻故事中常见的主题。最先由法国科幻小说作家赫内·巴赫札维勒（René Barjavel）在他1943年的小说《不小心的旅游者》（Le Voyageur Imprudent）中提出。情景如下：<br>假如你回到过去，在自己父亲出生前把自己的祖父母杀死，但此举动会产生一矛盾的情况：<br>你回到过去杀了你年轻的祖父，祖父死了就没有父亲，没有父亲也不会有你，那么是谁杀了祖父呢？ 或者看作：你的存在表示，祖父没有因你而死，那你何以杀死祖父？<br>这就是祖父悖论宽矛盾。</p><h3 id="平行宇宙"><a href="#平行宇宙" class="headerlink" title="平行宇宙"></a>平行宇宙</h3><p>物理学家认为，也许世界是由无数个平行宇宙组成的，而当某人回到过去杀你的祖父母时，此人杀的其实是另一个宇宙的人（或者你的这个举动也可以创造一个新的平行宇宙），而此人的“祖父”或“祖母”的死只会使那个平行宇宙的此人不再存在，而这个平行宇宙的此人则平安无事。</p><ul><li>在量子物理中，“多个世界（世界线理论）”理论可以如此理解：对于每一个似乎随机的事件来说，只要它的可能性不是零，它所有可能的情形都会在不同的平行世界中发生，造成历史的分支。物理学家大卫·多伊奇（David Deutsch）认为，当你回到过去去杀你的祖父母时，你其实进入了另一个世界，杀的是另一个世界的人。（那个世界与你的世界的差别仅在于你祖父母死了）</li><li>M理论，作为至今最有可能结合5种不同的弦论的理论，是如此解释平行宇宙的：多个三维的“膜”可以同时在一个四维的宇宙（不是爱因斯坦的三维空间加一维时间；见膜宇宙学）中存在；这些膜之间的撞击会在膜中产生大量的能量——这也可以解释大爆炸是如何起源的。可是，M理论并不能解释不同膜的历史之间的关系，也不能肯定，当你回到过去时，你会进到另一个膜里面。</li></ul><h3 id="M理论"><a href="#M理论" class="headerlink" title="M理论"></a>M理论</h3><p>M理论（英语：M-theory）是物理学中将各种相容形式的超弦理论统一起来的理论。此理论最早由爱德华·威滕于1995年春季在南加州大学举行的一次弦理论会议中提出。威滕的报告启动了一股研究弦理论的热潮，被称为第二次超弦革命。<br>弦理论学者在威滕的报告之前已经识别出五种不同的超弦理论。尽管这些理论看上去似乎非常不一样，但多位物理学家的研究指出这些理论有着微妙且有意义的关系。特别而言，物理学家们发现这些看起来相异的理论其实可以透过两种分别称为S对偶和T对偶的数学变换所统合。威滕的猜想有一部分是基于这些对偶的存在，另有一部分则是基于弦理论与11维超重力场论的关系。<br>尽管尚未发现M理论的完整表述，这种理论应该能够描述叫膜的二维及五维物体，而且也应该能描述低能量下的11维超引力。现今表述M理论的尝试一般都是基于矩阵理论或AdS/CFT对偶。威滕表示根据个人喜好M应该代表Magic（魔术理论）、Mystery（神秘理论）或Membrane（膜理论），但应该要等到理论更基础的表述出现后才能决定这个命名的真正意义。<br>有关M理论数学架构的研究已经在物理和数学领域产生了多个重要的理论成果。弦理论学界推测，M理论有可能为研发统合所有自然基本力的统一理论提供理论框架。当尝试把M理论与实验联系起来时，弦理论学者一般会专注于使用额外维度紧致化来建构人们所处的四维世界候选模型，但是到目前为止，物理学界还未能证实这些模型是否能产生出人们所能观测到（例如在大型强子对撞机中）的物理现象。</p><h2 id="缸中大脑"><a href="#缸中大脑" class="headerlink" title="缸中大脑"></a>缸中大脑</h2><p>缸中之脑（英语：Brain in a vat），又称桶中之脑（brain in a jar），是知识论中的一个思想实验，由哲学家希拉里·普特南在《理性、真理和历史》（Reason, Truth, and History）一书中提出。<br>实验的基础是人所体验到的一切最终都要在大脑中转化为神经讯号。假设一个疯子科学家、机器或其他任何意识将一个大脑从人体取出，放入一个装有营养液的桶里维持着它的生理活性，超级电脑通过神经末梢向大脑传递和原来一样的各种神经电讯号，并对于大脑发出的讯号给予和平时一样的讯号反馈，则大脑所体验到的世界其实是电脑制造的一种模拟现实[1]，则此大脑能否意识到自己生活在虚拟实境之中？<br>这个思想实验常被参照来论证一些哲学，如知识论、怀疑论、唯我论和主观唯心主义。一个简单的论证如下：因为桶中之脑和头颅中的大脑接收一模一样的讯号，而且这是他唯一和环境交流的方式，从大脑中角度来说，它完全无法确定自己是颅中之脑还是桶中之脑。如果是前者，那它的想法是正确的，他确实走在大街上或者在划船。如果是后者，那它就是错误的，它并没有在走路或划船，只是接收到了相同的电讯号而已。一个大脑无法知道自己是在颅中还是桶中，因此这世间的一切可能都是虚假的、虚妄的。那么什么是真实？<br>从生物学的角度讲，个体对于客观存在的认知或判别取决于他所接收的刺激，假设桶中脑生成一系列「测试用」反应用于检测自身的认知，同时「系统」又能及时给予相应的刺激作为回应，此时问题的症结就不在于桶中脑对于世界的认知，而在于「观察者」自身对于世界的认知。自身存在的客观性被质疑，在一个完全由「刺激」创造的「意识世界」中将形成一个悖论。<br>它有许多思想原型，如庄周梦蝶、印度教的摩耶、柏拉图的「地穴寓言」、笛卡尔的「恶魔」和「我思故我在」。<br>这一思想影响许多科幻小说和电影：<br>《黑客帝国》<br>《盗梦空间》<br>《源代码》<br>《飞出个未来》<br>《异世奇人》<br>《PSYCHO-PASS》</p><h2 id="芝诺悖论"><a href="#芝诺悖论" class="headerlink" title="芝诺悖论"></a>芝诺悖论</h2><p>这个之前讲了，在上面的: 归根结底，什么是悖论？</p><h2 id="空地上的奶牛"><a href="#空地上的奶牛" class="headerlink" title="空地上的奶牛"></a>空地上的奶牛</h2><p>它描述的是，一个农民担心自己的获奖的奶牛走丢了。这时送奶工到了农场，他告诉农民不要担心，因为他看到那头奶牛在附近的一块空地上。虽然农民很相信送奶工，但他还是亲自看了看，他看到了熟悉的黑白相间的形状并感到很满意。过了一会，送奶工到那块空地上再次确认。那头奶牛确实在那，但它躲在树林里，而且空地上还有一大张黑白相间的纸缠在树上，很明显，农民把这张纸错当成自己的奶牛了。于是问题出现了，虽然奶牛一直都在空地上，但农民说自己知道奶牛在空地上时是否正确？<br>空地上的奶牛（The Cow in the field）最初是被Edmund Gettier用来批判主流上作为知识的定义的JTB（justified true belief）理论，即当人们相信一件事时，它就成为了知识；这件事在事实上是真的，并且人们有可以验证的理由相信它。在这个实验中，农民相信奶牛在空地上，且被送奶工的证词和他自己对于空地上的黑白相间物的观察所证实。而且经过送奶工后来的证实，这件事也是真实的。尽管如此，农民并没有真正的知道奶牛在那儿，因为他认为奶牛在那儿的推导是建立在错误的前提上的。Gettier利用这个实验和其他一些例子，解释了将知识定义为JTB的理论需要修正。</p><h2 id="理发师悖论"><a href="#理发师悖论" class="headerlink" title="理发师悖论"></a>理发师悖论</h2><p>理发师悖论（Barber paradox）是罗素用来比喻罗素悖论的一个通俗说法，是由伯特兰·罗素在1901年提出的。罗素悖论的出现<br>是由于朴素集合论对于集合的不加限制的定义。由于当时集合论已成为数学理论的基础，这一悖论的出现直接导致了一场数学危机，也引发了众多的数学家对这一问题的补救，最终形成了现在的公理化集合论。同时，罗素悖论的出现促使数学家认识到将数学基础公理化的必要性。<br>小城里的理发师放出豪言：他要为城里人刮胡子，而且一定只要为城里所有“不为自己刮胡子的人”刮胡子。</p><p>但问题是：理发师该为自己刮胡子吗？如果他为自己刮胡子，那么按照他的豪言“只为城里所有不为自己刮胡子的人刮胡子”他不<br>应该为自己刮胡子；但如果他不为自己刮胡子，同样按照他的豪言“一定要为城里所有不为自己刮胡子的人刮胡子”他又应该为自己刮胡子。</p><p>用集合论的语言来描述理发师悖论是这样的：小城里的人构成集合${\displaystyle A={a|a\ lives\ in\ the\ town}}A={a|a\ lives\ in\ the\ town}$，对于每个小城里的人${\displaystyle a}$a可以构造一个${\displaystyle A}$A的子集${\displaystyle S_{a}={x|a\ shaves\ x}}$$S_{a}={x|a\ shaves\ x}$，即${\displaystyle a}$ a给属于 ${\displaystyle S_{a}}S_{a}$的人刮胡子。那么，如果城里人${\displaystyle a}$a给自己刮胡子，则${\displaystyle a\in S_{a}}a\in S_{a}$，如果${\displaystyle a}$a不给自己刮胡子，则${\displaystyle a\not \in S_{a}}a\not \in S_{a}$，如果${\displaystyle a}$a不给任何人刮胡子，则${\displaystyle S_{a}}S_{a}$ 为空，即${\displaystyle S_{a}={}}S_{a}={}$。设理发师为${\displaystyle s}$s，则理发师的豪言就是：${\displaystyle S_{s}={a|a\not \in S_{a}}}S_{s}={a|a\not \in S_{a}}$。问题是：如果${\displaystyle s\in S_{s}}s\in S_{s}$，这将与${\displaystyle S_{s}}S_{s}$的定义矛盾，但如果${\displaystyle s\not \in S_{s}}s\not \in S_{s}$，根据${\displaystyle S_{s}}S_{s}$的定义，又应该有${\displaystyle s\in S_{s}}s\in S_{s}$。理发师悖论是个逻辑悖论。用集合论语言来描述并不是必需的，只是为了将来更容易说明它与罗素悖论不是一回事。<br>德国数理逻辑大师戈特洛布·弗雷格（Frege）曾研究用集合论去描述数理逻辑，为此他还写了一本书。他在给罗素的信中提到他的工作时说他为此构造了一个特殊的集合（${\displaystyle A}$A），这个集合由所有不包含自己的集合构成。也就是说，集合{\displaystyle A}A的元素{\displaystyle X}X是一个集合，${\displaystyle X}$X自己不是自己的元素，即${\displaystyle X\not \in X}X\not \in X$。罗素在回信中讲述了前面的理发师的故事。聪明的弗雷格看出了这实际上是指出了他所构造的集合${\displaystyle A}$A的问题：如果${\displaystyle A\not \in A}A\not \in A$，那么根据定义${\displaystyle A}$A应该包含${\displaystyle A}A$，即${\displaystyle A\in A}A\in A$；但是如果${\displaystyle A\in A}A\in A$，那么同样根据定义${\displaystyle A}$A又不应该包含${\displaystyle A}A$，即${\displaystyle A\not \in A}A\not \in A$。可此时弗雷格的书已经付印，修改已经是不可能的了，弗雷格只能在书中加一个后记并写到：在工作结束之后而发现那大厦的基础已经动摇，对于一个科学工作者来说，没有比这更为不幸的了。<br>虽然罗素没有直接点出那个弗雷格所构造的集合的悖论，但人们还是将那个集合的悖论称作罗素悖论。罗素悖论可以简单描述为：构造一个由所有不包含自己的集合构成的集合A，即${\displaystyle A={X|X\not \in X}}A={X|X\not \in X}$，但我们无法断定A是否应该包含A，无论包含或者不包含都会导出矛盾。由于罗素悖论只涉及集合的定义和从属关系的判断这些集合论最基础的问题，而集合论又已成为数学理论的基础，因此罗素悖论导致了第三次数学危机。<br>这一历史故事应该只是一个“故事”，而不完全是历史事实。从看到的一些罗素和弗雷格的通信来看，他们的交流是很学术的。但罗素悖论指出了弗雷格著作中的一个错误，使得他来不及修改他的著作而只能追加一段后记这是一个事实。<br>尽管人们经常把理发师悖论说成是罗素悖论，或认为它们是等价的，但理发师悖论和罗素悖论并没有等价的关系，它只是一个比喻。<br>理发师悖论中的“不给自己刮胡子”即${\displaystyle a\not \in S_{a}}a\not \in S_{a}$和罗素悖论里的${\displaystyle X\not \in X}X\not \in X$是不一样的。集合以自己为元素（${\displaystyle X\in X}X\in X$）是一个很抽象的概念，通常需要像“所有集合的集合”这样的表达方式才能做到，一般很难用一个构造的例子来说明。但也见过一个十分有趣的例子：如果定义集合${\displaystyle N={x|x\ {\text{is set discussed in this article}}}}{\displaystyle N={x|x\ {\text{is set discussed in this article}}}}$。则集合${\displaystyle N}N$是一个包含自己的集合的例子。<br>一种新的集合论的观点认为，罗素悖论也不是一个悖论，它也是一个和上述说法类似的逻辑错误，这用到了一个新的经改进的概括公理（comprehension axiom）。但这还有待学术界的认可。</p><div class='tip info'><p>我无能为力了，上面那条杠当分割线好了。那么，再见了~亲爱的朋友。<p></div><p><img src="https://cdn.jsdelivr.net/gh/blogimg/picbed@master/2020/04/11/e7ed08fbe6852480074466ed6637b1a7.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 物理学 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于butterfly标签页头部透明</title>
      <link href="2021/01/30/%E5%9F%BA%E4%BA%8Ebutterfly%E6%A0%87%E7%AD%BE%E9%A1%B5%E5%A4%B4%E9%83%A8%E9%80%8F%E6%98%8E/"/>
      <url>2021/01/30/%E5%9F%BA%E4%BA%8Ebutterfly%E6%A0%87%E7%AD%BE%E9%A1%B5%E5%A4%B4%E9%83%A8%E9%80%8F%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这玩意只是适用于butterfly，具体效果看本文头图，没错没了。为什么我要写这玩意呢？因为群里某个叫天的人一直在那bb说要改Butterfly的头图，他一个劲的问，我一个劲的回答，然后我发现，朽木不可雕也！废话不多说，直接进入教程。</p><h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><p>首先，在博客根目录找到_config.butterfly.yml，打开，然后在里面搜索配置</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Yaml"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Image (圖片設置)</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The banner image of home page</span></span><br><span class="line"><span class="attr">index_img:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If the banner of page not setting, it will show the top_img</span></span><br><span class="line"><span class="attr">default_top_img:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The banner image of archive page</span></span><br><span class="line"><span class="attr">archive_img:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If the banner of tag page not setting, it will show the top_img</span></span><br><span class="line"><span class="comment"># <span class="doctag">note:</span> tag page, not tags page (子標籤頁面的 top_img)</span></span><br><span class="line"><span class="attr">tag_img:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The banner image of tag page</span></span><br><span class="line"><span class="comment"># format:</span></span><br><span class="line"><span class="comment">#  - tag name: xxxxx</span></span><br><span class="line"><span class="attr">tag_per_img:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If the banner of category page not setting, it will show the top_img</span></span><br><span class="line"><span class="comment"># <span class="doctag">note:</span> category page, not categories page (子分類頁面的 top_img)</span></span><br><span class="line"><span class="attr">category_img:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The banner image of category page</span></span><br><span class="line"><span class="comment"># format:</span></span><br><span class="line"><span class="comment">#  - category name: xxxxx</span></span><br><span class="line"><span class="attr">category_per_img:</span></span><br></pre></td></tr></table></figure></div><p>把图片配置里面的以上项，改为空（全删了），然后在<code>:root/themes/butterfly/source/css</code> 里面新建一个style.css(你自己的魔改css也可以)，然后，在_config.butterfly.yml里的</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Yaml"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">href=&quot;/css/style.css&quot;&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="comment"># - &lt;script type=&quot;text/javascript&quot; src=&quot;/js/style.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></div><p>在你的CSS文件里面加入如下代码</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Css"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#page-header</span> &#123;</span><br><span class="line">     <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#page-header</span><span class="selector-class">.post-bg</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">     <span class="attribute">position</span>: absolute;</span><br><span class="line">     <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">     <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">     <span class="attribute">display</span>: block;</span><br><span class="line">     <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">     <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">     <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>); <span class="comment">/*这个rgba可以自己改*/</span></span><br><span class="line">     <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> 主题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>turtle</title>
      <link href="2021/01/29/turtle/"/>
      <url>2021/01/29/turtle/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>其实我也不知道为什么我会写这个，本文涉及信号与传递，Python</p><h1 id="正题"><a href="#正题" class="headerlink" title="正题"></a>正题</h1><p>近期看到一个3年前的视频，1000个圆一笔画出一个Miku<br><img src="https://upimage.alexhchu.com/2021/01/29/8e684570c27ed.png"><br>在观看完源码了以后，我发现这是这调用的是基本的goto,用了傅里叶级函数（傅里叶级变化），那个视频中给出了分析，只要圆足够多，就可以画出任意的封闭曲线</p><p>$f(x)=\frac{a_{0}}{2}+\sum\limits_{n=1}^{\infty}\left(a_{n}\cos{nx}+b_{n}\sin{nx}\right)$<br>任意满足狄利克雷条件的函数，其本身的傅里叶级数都是收敛的。也就是说，函数可以表示成无限个正弦函数和余弦函数和的形式。<br>假如说我我能把我们需要绘制的二维图像表现在复平面上，把它的轨迹表现成有关时间t的复函数，那么，横坐标的移动和纵坐标的移动都可以看作是关于时间t的函数。<br>$f(x)=\frac{a_{0}}{2}+\sum\limits_{n=1}^{\infty}\left(a_{n}\cos{nx}+b_{n}\sin{nx}\right)$</p><p>$g(x)=\frac{c_{0}}{2}+\sum\limits_{n=1}^{\infty}\left(c_{n}\cos{nx}+d_{n}\sin{nx}\right)$</p><p>以上的两个函数都是实函数,都可以展开成傅里叶级数</p><p><img src="https://upimage.alexhchu.com/2021/01/29/adc081e42c3a6.png"><br>展开的公式太难写了，所以就截图了。<br>然后，我们对二维图像的轨迹<code>稍加处理</code>,发现这也是个傅里叶级展开式，只不过前面的系数变成了复数。这样子的解释不是证明，但是在傅里叶级变换的复数表示里，正弦函数都是可以通过余弦函数增加一个初始相位来表示，实函数的傅立叶变换才是傅立叶变换的特殊形式，这里不解释。</p><p>$c_n=\int_{0}^{1}{e^{-2i\pi nt}f(t)dt}$<br>我们求得这些级数了以后，只需要把系数代回这个公式得到一个坐标<br><img src="https://upimage.alexhchu.com/2021/01/29/3738b0bd8a89a.png"><br>这时，就可以用turtle的goto函数移动到指定的坐标，达到绘制图形的目的<br><img src="https://upimage.alexhchu.com/2021/01/29/b285a835e0615.png"></p><h2 id="值得思考的"><a href="#值得思考的" class="headerlink" title="值得思考的"></a>值得思考的</h2><p>同时函数的傅立叶变换相同，我们计算的级数越多，结果我们越接近我们原本绘制的轨迹，不联系的函数也可以进行傅里叶变换，配合turtle的penup和pendown函数，我们就可以得到断断续续线，绘制过程中的精度也不是越大越好，最佳精度和我们上面分析的级数有关系。</p><h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><p>在Adobe illustrator里面设计好自己的图案</p><div class='tip error'><p>图案要一笔带过，中间的线条可以重叠，可以急转弯，但是一定是一笔<p></div>然后保存为SVG。在SVG文件中<p><img src="https://upimage.alexhchu.com/2021/01/29/769f6cf2cd5f7.png"><br>把路径复制，</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Txt"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;path class=&quot;st0&quot; d=&#x27;............&#x27; /&gt;</span><br></pre></td></tr></table></figure></div><p>把省略号中的复制,就是那一大串数字和字母的组合。<br>保存到ra开头的txt文件中，源码在下面<br><a href="https://github.com/cereslibra/TurtleAndFourier">源码</a><br>接下来的，自己琢磨吧…</p><h1 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Python"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 画个绿色的长虫</span></span><br><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> t</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawSnake</span>(<span class="params">radius, angle, length</span>):</span></span><br><span class="line">     t.seth(-<span class="number">40</span>)</span><br><span class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">          t.circle(radius, angle)</span><br><span class="line">          t.circle(-radius, angle)</span><br><span class="line">     t.circle(radius, angle/<span class="number">2</span>)</span><br><span class="line">     t.fd(<span class="number">40</span>)</span><br><span class="line">     t.circle(<span class="number">16</span>, <span class="number">180</span>)</span><br><span class="line">     t.fd(<span class="number">40</span>*<span class="number">2</span>/<span class="number">3</span>)</span><br><span class="line">t.setup(<span class="number">650</span>, <span class="number">350</span>, <span class="number">200</span>, <span class="number">200</span>)</span><br><span class="line">t.penup()</span><br><span class="line">t.fd(-<span class="number">250</span>)</span><br><span class="line">t.pendown()</span><br><span class="line">t.pensize(<span class="number">25</span>)</span><br><span class="line">t.pencolor(<span class="string">&#x27;green&#x27;</span>)</span><br><span class="line">drawSnake(<span class="number">40</span>, <span class="number">80</span>, <span class="number">4</span>)</span><br><span class="line">t.down()</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> turtle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> turtle绘图 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫被403怎么办</title>
      <link href="2021/01/28/%E7%88%AC%E8%99%AB%E8%A2%AB403%E6%80%8E%E4%B9%88%E5%8A%9E/"/>
      <url>2021/01/28/%E7%88%AC%E8%99%AB%E8%A2%AB403%E6%80%8E%E4%B9%88%E5%8A%9E/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="403"><a href="#403" class="headerlink" title="403"></a>403</h1><p>先来给不知道的同学们科普一下错误码，错误码有很多啊，比如404（最常见的），那么为啥这会返还一个我们不知道是什么的码呢？<br>我们随便编辑一个Python爬虫程序</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Python"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://cn.chen-shang.top&#x27;</span> <span class="comment"># 举个栗子</span></span><br><span class="line">a = requests.get(url)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure></div><p>拿我的博客网址举个例子，我们发现终端的输出为</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Bash"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Response &lt;200&gt;</span><br></pre></td></tr></table></figure></div><p>看不懂？没关系，有一个规律，2打头的都是请求成功。200的看了，来看看404</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Python"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://ccknbc.cc/405&#x27;</span> <span class="comment"># 菜狗的网址</span></span><br><span class="line">a = requests.get(url)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure></div><p>输出结果是什么</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Response &lt;404&gt;</span><br></pre></td></tr></table></figure></div><p>也是一个道理，4打头都是请求失败，不搞5打头了，一个4打头找了我老半天。</p><h2 id="现在，重点分析403是个什么东西"><a href="#现在，重点分析403是个什么东西" class="headerlink" title="现在，重点分析403是个什么东西"></a>现在，重点分析403是个什么东西</h2><p>403这玩意4打头看得出来是报错了，为啥报错呢？权限不够，403错误是一种在网站访问过程中，常见的错误提示，表示资源不可用。服务器理解客户的请求，但拒绝处理它，通常由于服务器上文件或目录的权限设置导致的WEB访问错误。<br>现在很多网站的api接口返回httpcode返回码是403提示禁止访问。如果您也遇到这样的情况,请先不要急着去修改网站相关的参数<br>第一、先进api的网站。用浏览器访问，如果浏览器访问该api接口能成功。说明是设置了权限的问题。如果不能成功的话。很可以是该接口已修改或已失效，这时候就没办法访问了。<br>第二、如果浏览器能访问成功的话。那就好办了。调用该接口时，捕获异常中的responseBody，很有可能数据就在这里面，笔者就遇到的是这种问题。</p><p>也有可能是服务器看你不顺眼，把你挡在门外了，虽然我很喜欢用request，但是为了快，这次用 urllib3</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Python"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request <span class="keyword">as</span> request</span><br><span class="line">src=![<span class="string">&quot;https://www.ptt.cc/bbs/movie/index.html&quot;</span>]</span><br><span class="line"><span class="keyword">with</span> request.urlopen(src) <span class="keyword">as</span> response:</span><br><span class="line">    data=response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure></div><p>在这种情况下直接对网路进行连接，一般情况下会被服务器拒绝出现这样的报错<br>“”“urllib.error.HTTPError: HTTP Error 403: Forbidden”“”</p><p>这种情况是网站认为你不是普通用户操作，所以我们需要模拟普通用户。<br>一般用户使用会给网站发送一个这总系统和浏览器的信息，所以我们需要模拟。也要向网站发送一个这样的信息。<br>遇到这样子的，主要是爬虫被发现了，建议用Python的正则表达式，放出我之前写的一个残次品，虽然没什么用，但是我就哪一个写了正则表达式</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Python"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding = utf -8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># url</span></span><br><span class="line">url = <span class="string">&#x27;https://www.tukuppt.com/yinxiao/&#x27;</span></span><br><span class="line"><span class="comment"># The detection of IP</span></span><br><span class="line">headers = &#123;</span><br><span class="line">     <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36 FS&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># data</span></span><br><span class="line">a = requests.get(url)</span><br><span class="line">a = <span class="string">&quot;&quot;&quot;&lt;a class=&quot;title&quot; target=&quot;_blank&quot; href=“.*?”&gt;(.*?)&lt;/a&gt;&quot;&quot;&quot;</span></span><br><span class="line">b = <span class="string">&#x27;&lt;source src=&quot;(.*?)&quot; type=&quot;audio/mpeg&quot;&gt;&#x27;</span></span><br><span class="line">urls = re.findall(a, b.text)</span><br><span class="line">print(urls)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> url, name <span class="keyword">in</span> <span class="built_in">zip</span>(urls, name):</span><br><span class="line">     music = requests.get(<span class="string">&#x27;http&#x27;</span>+url,headers)</span><br><span class="line">     <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">          f.write(music.content)</span><br><span class="line">     print(<span class="string">&#x27;&lt;%s OK&gt;&#x27;</span> % name)</span><br></pre></td></tr></table></figure></div><p>上面那个是我爬熊猫办公的。其实还可以更简单，就是找到你浏览器的User-Agent，像我的就是</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Python"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36 FS&#x27;</span></span><br></pre></td></tr></table></figure></div><p>加入，如下是urllib3爬ptt的</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Python"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#抓取PTT电影版的网页原始码（HTML）</span></span><br><span class="line"><span class="keyword">import</span> urllib.request <span class="keyword">as</span> req</span><br><span class="line">url=<span class="string">&quot;https://www.ptt.cc/bbs/movie/index.html&quot;</span></span><br><span class="line"><span class="comment">#建立一个Request物件，附加Request Headers 的资讯  </span></span><br><span class="line">request=req.Request(url,headers=&#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">with</span> req.urlopen(request) <span class="keyword">as</span> response:</span><br><span class="line">    data=response.read().decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="comment">#资料解析</span></span><br><span class="line"><span class="keyword">import</span> bs4</span><br><span class="line">root=bs4.BeautifulSoup(data,<span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">titles=root.find_all(<span class="string">&quot;div&quot;</span>,class_=<span class="string">&quot;title&quot;</span>)</span><br><span class="line">print(titles)</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS逆向反调试和反反调试</title>
      <link href="2021/01/26/JS%E5%8F%8D%E8%B0%83%E8%AF%95/"/>
      <url>2021/01/26/JS%E5%8F%8D%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="写在最前面"><a href="#写在最前面" class="headerlink" title="写在最前面"></a>写在最前面</h1><p>本文转载于CSDN大佬: <a href="https://blog.csdn.net/weixin_44504978">@花爷</a><br>已获得其本人允许<br> 根据《中华人民共和国著作权法》规定</p><p>1、已在报刊上刊登或者网络上传播的作品，除著作权人声明或者上载该作品的网络服务提供者受著作权人的委托声明不得转载、摘编的以外，网站予以转载、摘编，并按有关规定支付报酬、注明出处的，不构成侵权。</p><p>2、为个人学习、研究或者欣赏，使用他人已经发表的作品而转载的不属于侵权，可以不经著作权人许可，不向其支付报酬，但应当指明作者姓名、作品名称，并且不得侵犯著作权人依照本法享有的其他权利。</p><h1 id="切入JS逆向反调试"><a href="#切入JS逆向反调试" class="headerlink" title="切入JS逆向反调试"></a>切入JS逆向反调试</h1><p><span style = "font-size: 20px;">现在调试JS各种反调，既然有反调，那我们就肯定有过这个反调试的方法。这里给大家推荐一个JS逆向练习平台。<span></p><p><a href="http://spider.wangluozhe.com/">JS逆向练习平台</a></p><p>1.我们这里讲的是第5题，它这里的反调试是不让你打开开发者人员工具。打开开发者人员工具，就自动返回主页面。<br><img src="https://img-blog.csdnimg.cn/2021012414190817.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDUwNDk3OA==,size_16,color_FFFFFF,t_70#pic_center"></p><p>2.思路：a：它不让我打开开发者人员工具，肯定是在打开开发者人员工具之后它检测了什么玩意<br><img src="https://img-blog.csdnimg.cn/20210124142517995.png#pic_center"></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Text"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b：.那他就是调用了浏览器内置的东西，我这个就解决方法是下页面事件监听断点，如图：</span><br></pre></td></tr></table></figure></div><p><img src="https://img-blog.csdnimg.cn/20210124144325107.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDUwNDk3OA==,size_16,color_FFFFFF,t_70#pic_center"></p><p>这里的意思：<br>事件侦听器断点 event listener breakpoints<br>事件突变 Dom mutation<br>下面还有一些我就不翻译了，有兴趣可以去看看，翻译一下，小弟英语不好。<br>下这个断点之后，跳转完页面，加载ok之后他就会断下来，如图，我们就可以得到这道题的答案了。<br><img src="https://img-blog.csdnimg.cn/20210124145214853.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDUwNDk3OA==,size_16,color_FFFFFF,t_70#pic_center"></p><p>答案大佬打了一下马赛克，这边大佬不公布答案，大家可以尝试一下。</p><h1 id="切入JS反反调试"><a href="#切入JS反反调试" class="headerlink" title="切入JS反反调试"></a>切入JS反反调试</h1><div class='tip'><p>你千万别跟任何人谈任何事情。你只要一谈起，就会想念起每一个人来，我只知道我很想念我所谈到的每一个人。——Ｊ·Ｄ·塞林格《麦田里的守望者》<p></div><h2 id="JS逆向-过无限debugger调试"><a href="#JS逆向-过无限debugger调试" class="headerlink" title="[JS逆向]过无限debugger调试"></a>[JS逆向]过无限debugger调试</h2><p><span style="font-size: 20px;">在JS逆向过程当中，获取用发F12抓取XHR的时候，常常会发现网页不让我们打开F12开发人员工具。如果这个时候我们开启工具中禁止断点之后，虽然我们可以抓取xhr，但是这样我们无法调试代码部分了，开启了禁止断点之后，我们自己也无法在代码当中下断点了</span></p><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>在采集某些网站时，目标网站为了防止别人分析调试前端代码，采取了反调试措施。其中一种做法是当你按F12进入浏览器控制台后，浏览器会自动命中debugger断点，并且无限循环，导致无法调试。以食品药品监督管理总局数据查询网站为例。如下图:<br><img src="https://img-blog.csdnimg.cn/20190810135056101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NzEyOTc3,size_16,color_FFFFFF,t_70"></p><p>按F12进入控制台</p><p><img src="https://img-blog.csdnimg.cn/20190810135323385.gif"></p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><h4 id="禁用浏览器断点"><a href="#禁用浏览器断点" class="headerlink" title="禁用浏览器断点"></a>禁用浏览器断点</h4><p><img src="https://img-blog.csdnimg.cn/20190810135629767.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NzEyOTc3,size_16,color_FFFFFF,t_70"><br>点击图中按钮，之后将不会再命中任何断点。这种方法虽然可以防止无限循环命中debugger断点，但是也存在很大的缺陷，因为对于其他代码，我们还是需要断点调试功能的。所以这个方法仅限于静态分析。</p><h4 id="利用中间人修改响应代码"><a href="#利用中间人修改响应代码" class="headerlink" title="利用中间人修改响应代码"></a>利用中间人修改响应代码</h4><p>用Fiddler删除响应代码中的debugger即可达到目的<br>实现的核心代码很简单:如下</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Python"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">FiddlerApplication.BeforeRequest += delegate(Fiddler,Session oS)</span><br><span class="line">&#123;</span><br><span class="line">     oS.bBufferResponse = true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FiddlerApplication.BeforeResponse += (oS) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">     oS.utilDecodeResponse();</span><br><span class="line">     oS.utilReplaceLnResponse(<span class="string">&quot;debugger&quot;</span>, String.Empty);</span><br><span class="line">     /*</span><br><span class="line">     *</span><br><span class="line">     Code 实在是找不到FiddlerCode的代码格式，只能用Python代替一下</span><br><span class="line">     *</span><br><span class="line">     */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>实际使用中发现,位于响应html页的debugger被删除了，但是仍然会弹出断点。分析页面得到，debugger断点位置一共有2处 第一处位于”<a href="http://qy1.sfda.gov.cn/datasearch/face3/dir.html&quot;debugger%E4%BB%A5%E6%98%8E%E6%96%87%E5%BD%A2%E5%BC%8F%E5%AD%98%E5%9C%A8,Fiddler%E5%88%A0%E9%99%A4%E7%9A%84%E5%B0%B1%E6%98%AF%E8%BF%99%E9%83%A8%E5%88%86%E3%80%82%E9%80%9A%E8%BF%87%E5%88%86%E6%9E%90%E5%8F%A6%E4%B8%80%E5%A4%84debugger%E4%BD%8D%E7%BD%AE%EF%BC%8C%E5%8F%91%E7%8E%B0debugger%E6%98%AF%E9%80%9A%E8%BF%87eval%E5%8E%BB%E5%AE%9E%E7%8E%B0%E7%9A%84%EF%BC%8C%E5%93%8D%E5%BA%94%E4%B8%AD%E5%B9%B6%E6%B2%A1%E6%9C%89%E7%9B%B4%E6%8E%A5%E5%87%BA%E7%8E%B0debugger%E5%AD%97%E6%AE%B5%EF%BC%8C%E6%89%80%E4%BB%A5%E6%B2%A1%E6%9C%89%E8%A2%AB%E6%9B%BF%E6%8D%A2%E6%8E%89%E3%80%82">http://qy1.sfda.gov.cn/datasearch/face3/dir.html&quot;debugger以明文形式存在,Fiddler删除的就是这部分。通过分析另一处debugger位置，发现debugger是通过eval去实现的，响应中并没有直接出现debugger字段，所以没有被替换掉。</a></p><p>在Console输入</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Js"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; _$uj()</span><br><span class="line">&lt;· <span class="string">&quot;eval&quot;</span></span><br><span class="line">&gt; _$dQ()</span><br><span class="line">&lt;· <span class="string">&quot;(function() &#123;var a = new Date(); debugger; return new Date() - a &gt; 100;&#125;())&quot;</span></span><br><span class="line">&gt; _</span><br></pre></td></tr></table></figure></div><p>代码经过强混淆，读者看到的函数名称是和我不一样的。</p><h4 id="利用浏览器插件修改响应代码"><a href="#利用浏览器插件修改响应代码" class="headerlink" title="利用浏览器插件修改响应代码"></a>利用浏览器插件修改响应代码</h4><p>具体原理和使用Fiddler是相同的，通过浏览器插件将请求重定向以达到修改代码的目的。也存在相同的问题</p><h4 id="手动替换代码"><a href="#手动替换代码" class="headerlink" title="手动替换代码"></a>手动替换代码</h4><p>既然修改响应结果无法满足需求，那只能从代码中寻找突破了。<br>以本文的网站为例，查看debugger断点处的调用栈堆，找到调用位置。其实在上文中间人方式结尾处已经发现了。是通过eval去实现断点的。我们先构造一个空方法</p><p><img src="https://img-blog.csdnimg.cn/20190810153307160.png"><br>将目标网站的方法偷梁换柱<br><img src="https://img-blog.csdnimg.cn/20190810153643439.png"><br>由于网站代码强混淆，所以函数名称会不一样。下面放个GIF图<br><img src="https://img-blog.csdnimg.cn/20190810154011549.gif"><br>完美解决 但是注意不要刷新，页面刷新后需要重新替换。</p><h4 id="傻瓜式技巧"><a href="#傻瓜式技巧" class="headerlink" title="傻瓜式技巧"></a>傻瓜式技巧</h4><p>上文的几种方法，要么是存在缺陷，要么是步骤较为繁琐，我这边还有个压箱底的神技，不需要写任何代码，鼠标点点点就能够满足需求，为了避免伸手党，所以不放了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><!-- tab --><p>1-DebugPort<br>2-KdDisableDebugger<br>3-IsDebuggerPresent和CheckRemoteDebuggerPresent<br>4-hook</p><p><a href="http://www.moguizuofang.com/bbs/thread-3235-1-1.html">http://www.moguizuofang.com/bbs/thread-3235-1-1.html</a></p><p><a href="http://bbs.pediy.com/showthread.php?t=126802">http://bbs.pediy.com/showthread.php?t=126802</a></p><p><a href="http://bbs.pediy.com/showthread.php?t=129810">http://bbs.pediy.com/showthread.php?t=129810</a></p><p>DebugPort是进程EPROCESS结构里的一个成员，指向了一个用于进程调试的对象，如果一个进程不在被调试的时候那么就是NULL，否则他是一个指针。该对象负责在调试器与被调进程之间进行调试事件传递，因此被称为调试端口。被调试程序的事件由这个端口发送到调试器进程的。</p><p>HOOK系统中一些与调试相关的函数，也可以防止被各种调试器调试。比如某款程序在内核中就HOOK了下面这些函数：<br>NtOpenThread（）：防止调试器在程序内部创建线程<br>NtOpenProcess（）：防止OD（OllyDbg）等调试工具在进程列表中看到<br>KiAttachProcess（）：防止被附加上<br>NtReadVirtualMemory（）：防止被读内存<br>NtWriteVirtualMemory（）：防止内存被写<br>KdReceivePacket（）：KDCOME.dll 中Com串口接收数据函数<br>KdSendPacket（）：KDCOME.dll 中Com串口发送数据函数，可以HOOK这2个函数用来防止双机调试。</p><p>反反调试的思路也就出来了。针对清零DebugPort来防止调试的方法，可以通过对DebugPort内存地址下内存断点：<br>ba w4 debugport_addr<br>这样一旦有程序代码在修改DebugPort，就会被断下，从而找到对应的清零DebugPort的反调试代码，然后对这部分代码进行patch（用机器码0×90(nop)或者0xC3(ret)取代），从而让它失去作用，当然有的程序会对代码进行校验，一旦发现代码被篡改，就会采取保护措施，比如抛出异常或者退出程序。<br>针对调用系统函数如KdDisableDebugger（）来检测调试器存在从而禁止被调试的方法，可以在对应的这些函数的地址下断点，然后对相关的代码进行patch，然后使该函数判断失效。比如：<br>bp KdDisableDebugger、eb xxx<br>针对通过HOOK系统函数来防止进程被调试的方法，可以直接将这些系统函数的钩子直接恢复，可以通过内核驱动程序或者借助一些ARK工具（比如Pchunter）就可以直接检测和恢复这些函数钩子。</p><!-- endtab --><h1 id="总结-2"><a href="#总结-2" class="headerlink" title="总结 -2"></a>总结 -2</h1><!-- tab --><p>在调试一些病毒程序的时候，可能会碰到一些反调试技术，也就是说，被调试的程序可以检测到自己是否被调试器附加了，如果探知自己正在被调试，肯定是有人试图反汇编啦之类的方法破解自己。为了了解如何破解反调试技术，首先我们来看看反调试技术。</p><p>一、Windows API方法</p><p>Win32提供了两个API, IsDebuggerPresent和CheckRemoteDebuggerPresent可以用来检测当前进程是否正在被调试，以IsDebuggerPresent函数为例，例子如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BOOL ret = IsDebuggerPresent();</span><br><span class="line">printf(&quot;ret = %d\n&quot;, ret);</span><br></pre></td></tr></table></figure></div><p>破解方法很简单，就是在系统里将这两个函数hook掉，让这两个函数一直返回false就可以了，网上有很多做hook API工作的工具，也有很多工具源代码是开放的，所以这里就不细谈了。</p><p>二、查询进程PEB的BeingDebugged标志位</p><p>当进程被调试器所附加的时候，操作系统会自动设置这个标志位，因此在程序里定期查询这个标志位就可以了，例子如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">PebIsDebuggedApproach</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="keyword">char</span> result = <span class="number">0</span>;</span><br><span class="line">       __asm</span><br><span class="line">       &#123;</span><br><span class="line"><span class="comment">// 进程的PEB地址放在fs这个寄存器位置上</span></span><br><span class="line">              mov eax, fs:[<span class="number">30</span>h]</span><br><span class="line"><span class="comment">// 查询BeingDebugged标志位</span></span><br><span class="line">              mov al, BYTE PTR [eax + <span class="number">2</span>]</span><br><span class="line">              mov result, al</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> result != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三、查询进程PEB的NtGlobal标志位</p><p>跟第二个方法一样，当进程被调试的时候，操作系统除了修改BeingDebugged这个标志位以外，还会修改其他几个地方，其中NtDll中一些控制堆（Heap）操作的函数的标志位就会被修改，因此也可以查询这个标志位，例子如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">bool PebNtGlobalFlagsApproach()</span><br><span class="line">&#123;</span><br><span class="line">       int result &#x3D; 0;</span><br><span class="line"></span><br><span class="line">       __asm</span><br><span class="line">       &#123;</span><br><span class="line">  &#x2F;&#x2F; 进程的PEB</span><br><span class="line">              mov eax, fs:[30h]</span><br><span class="line">  &#x2F;&#x2F; 控制堆操作函数的工作方式的标志位</span><br><span class="line">              mov eax, [eax + 68h]</span><br><span class="line">  &#x2F;&#x2F; 操作系统会加上这些标志位FLG_HEAP_ENABLE_TAIL_CHECK,</span><br><span class="line">  &#x2F;&#x2F; FLG_HEAP_ENABLE_FREE_CHECK and FLG_HEAP_VALIDATE_PARAMETERS，</span><br><span class="line">  &#x2F;&#x2F; 它们的并集就是x70</span><br><span class="line">  &#x2F;&#x2F;</span><br><span class="line">  &#x2F;&#x2F; 下面的代码相当于C&#x2F;C++的</span><br><span class="line">  &#x2F;&#x2F;     eax &#x3D; eax &amp; 0x70</span><br><span class="line">              and eax, 0x70</span><br><span class="line">              mov result, eax</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       return result !&#x3D; 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>四、查询进程堆的一些标志位</p><p>这个方法是第三个方法的变种，只要进程被调试，进程在堆上分配的内存，在分配的堆的头信息里，ForceFlags这个标志位会被修改，因此可以通过判断这个标志位的方式来反调试。因为进程可以有很多的堆，因此只要检查任意一个堆的头信息就可以了，所以这个方法貌似很强大，例子如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="C"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">HeapFlagsApproach</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">       __asm</span><br><span class="line">       &#123;</span><br><span class="line">      <span class="comment">// 进程的PEB</span></span><br><span class="line">              mov eax, fs:[<span class="number">30</span>h]</span><br><span class="line">      <span class="comment">// 进程的堆，我们随便访问了一个堆，下面是默认的堆</span></span><br><span class="line">              mov eax, [eax + <span class="number">18</span>h]</span><br><span class="line">  <span class="comment">// 检查ForceFlag标志位，在没有被调试的情况下应该是</span></span><br><span class="line">              mov eax, [eax + <span class="number">10</span>h]</span><br><span class="line">              mov result, eax</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> result != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>五、使用NtQueryInformationProcess函数</p><p>NtQueryInformationProcess函数是一个未公开的API，它的第二个参数可以用来查询进程的调试端口。如果进程被调试，那么返回的端口值会是-1，否则就是其他的值。由于这个函数是一个未公开的函数，因此需要使用LoadLibrary和GetProceAddress的方法获取调用地址，示例代码如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="C"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个函数指针。</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">NTSTATUS</span> <span class="params">(WINAPI *NtQueryInformationProcessPtr)</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">       HANDLE processHandle,</span></span></span><br><span class="line"><span class="function"><span class="params">       PROCESSINFOCLASS processInformationClass,</span></span></span><br><span class="line"><span class="function"><span class="params">       PVOID processInformation,</span></span></span><br><span class="line"><span class="function"><span class="params">       ULONG processInformationLength,</span></span></span><br><span class="line"><span class="function"><span class="params">       PULONG returnLength)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">NtQueryInformationProcessApproach</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="keyword">int</span> debugPort = <span class="number">0</span>;</span><br><span class="line">       HMODULE hModule = LoadLibrary(TEXT(<span class="string">&quot;Ntdll.dll &quot;</span>));</span><br><span class="line">       NtQueryInformationProcessPtr NtQueryInformationProcess = (NtQueryInformationProcessPtr)GetProcAddress(hModule, <span class="string">&quot;NtQueryInformationProcess&quot;</span>);</span><br><span class="line">       <span class="keyword">if</span> ( NtQueryInformationProcess(GetCurrentProcess(), (PROCESSINFOCLASS)<span class="number">7</span>, &amp;debugPort, <span class="keyword">sizeof</span>(debugPort), <span class="literal">NULL</span>) )</span><br><span class="line">              <span class="built_in">printf</span>(<span class="string">&quot;[ERROR NtQueryInformationProcessApproach] NtQueryInformationProcess failed\n&quot;</span>);</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">              <span class="keyword">return</span> debugPort == <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>六、NtSetInformationThread方法</p><p>这个也是使用Windows的一个未公开函数的方法，你可以在当前线程里调用NtSetInformationThread，调用这个函数时，如果在第二个参数里指定0x11这个值（意思是ThreadHideFromDebugger），等于告诉操作系统，将所有附加的调试器统统取消掉。示例代码:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="C"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个函数指针。</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">NTSTATUS</span> <span class="params">(*NtSetInformationThreadPtr)</span><span class="params">(HANDLE threadHandle,</span></span></span><br><span class="line"><span class="function"><span class="params">       THREADINFOCLASS threadInformationClass,</span></span></span><br><span class="line"><span class="function"><span class="params">       PVOID threadInformation,</span></span></span><br><span class="line"><span class="function"><span class="params">       ULONG threadInformationLength)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NtSetInformationThreadApproach</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">      HMODULE hModule = LoadLibrary(TEXT(<span class="string">&quot;ntdll.dll&quot;</span>));</span><br><span class="line">      NtSetInformationThreadPtr NtSetInformationThread = (NtSetInformationThreadPtr)GetProcAddress(hModule, <span class="string">&quot;NtSetInformationThread&quot;</span>);</span><br><span class="line"></span><br><span class="line">      NtSetInformationThread(GetCurrentThread(), (THREADINFOCLASS)<span class="number">0x11</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>七、触发异常的方法</p><p>这个技术的原理是，首先，进程使用SetUnhandledExceptionFilter函数注册一个未处理异常处理函数A，如果进程没有被调试的话，那么触发一个未处理异常，会导致操作系统将控制权交给先前注册的函数A；而如果进程被调试的话，那么这个未处理异常会被调试器捕捉，这样我们的函数A就没有机会运行了。</p><p>这里有一个技巧，就是触发未处理异常的时候，如果跳转回原来代码继续执行，而不是让操作系统关闭进程。方案是在函数A里修改eip的值，因为在函数A的参数_EXCEPTION_POINTERS里，会保存当时触发异常的指令地址，所以在函数A里根据这个指令地址修改寄存器eip的值就可以了，示例代码如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="C"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 进程要注册的未处理异常处理程序A</span></span><br><span class="line"><span class="function">LONG WINAPI <span class="title">MyUnhandledExceptionFilter</span><span class="params">(struct _EXCEPTION_POINTERS *pei)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       SetUnhandledExceptionFilter((LPTOP_LEVEL_EXCEPTION_FILTER)</span><br><span class="line">              pei-&gt;ContextRecord-&gt;Eax);</span><br><span class="line">       <span class="comment">// 修改寄存器eip的值</span></span><br><span class="line">       pei-&gt;ContextRecord-&gt;Eip += <span class="number">2</span>;</span><br><span class="line">       <span class="comment">// 告诉操作系统，继续执行进程剩余的指令（指令保存在eip里），而不是关闭进程</span></span><br><span class="line">       <span class="keyword">return</span> EXCEPTION_CONTINUE_EXECUTION;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">UnhandledExceptionFilterApproach</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       SetUnhandledExceptionFilter(MyUnhandledExceptionFilter);</span><br><span class="line">       __asm</span><br><span class="line">       &#123;</span><br><span class="line">              <span class="comment">// 将eax清零</span></span><br><span class="line">              <span class="keyword">xor</span> eax, eax</span><br><span class="line">              <span class="comment">// 触发一个除零异常</span></span><br><span class="line">              div eax</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>八、调用DeleteFiber函数</p><p>如果给DeleteFiber函数传递一个无效的参数的话，DeleteFiber函数除了会抛出一个异常以外，还是将进程的LastError值设置为具体出错原因的代号。然而，如果进程正在被调试的话，这个LastError值会被修改，因此如果调试器绕过了第七步里讲的反调试技术的话，我们还可以通过验证LastError值是不是被修改过来检测调试器的存在，示例代码：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="C"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeleteFiberApproach</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="keyword">char</span> fib[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">       <span class="comment">// 会抛出一个异常并被调试器捕获</span></span><br><span class="line">       DeleteFiber(fib);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 0x57的意思是ERROR_INVALID_PARAMETER</span></span><br><span class="line">       <span class="keyword">return</span> (GetLastError() != <span class="number">0x57</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
          <category> JS </category>
          
          <category> JS逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零维到十维，你真的懂吗？[待更.....]</title>
      <link href="2021/01/17/%E4%BB%8E%E9%9B%B6%E7%BB%B4%E5%88%B0%E5%8D%81%E7%BB%B4%EF%BC%8C%E4%BD%A0%E7%9C%9F%E7%9A%84%E6%87%82%E5%90%97%EF%BC%9F/"/>
      <url>2021/01/17/%E4%BB%8E%E9%9B%B6%E7%BB%B4%E5%88%B0%E5%8D%81%E7%BB%B4%EF%BC%8C%E4%BD%A0%E7%9C%9F%E7%9A%84%E6%87%82%E5%90%97%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我这个人不多说废话，说多了你们也不听，直接切入正题</p><h1 id="零维"><a href="#零维" class="headerlink" title="零维"></a>零维</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>说简单点，零维就是个奇点，也就是没有维度的，没有发散和方向的维度。它没有空间，没有物质，一切皆无。也可以说它是全部，是所有，是存在。用于解释为什么有宇宙，宇宙的物质从哪里来的，时间的不间断和前进态是零维的表达。</p><h2 id="零维的定义"><a href="#零维的定义" class="headerlink" title="零维的定义"></a>零维的定义</h2><p>零维并不能被称为零维空间，因为零维既不是空间也不是时空，零维只是一个概念，就是没有任何维度。可以说，没有任何物质，在这里，没有任何感觉，一切东西都好像静止了。无论是几维空间，在零维下都将不复存在。<br>最开始，宇宙中的所有物质能量、时间空间的概念都集中于一个体积无限小，密度无限大的点，也就是零维。后来这个点发生了大爆炸，由零维诞生出了11个维度，构成了现今的十一维空间，使时间开始流逝（时间不是一个维度，时间只是用来描述空间运动的一个物理量，因此认为四维空间是三维空间加一维时间的想法都是错的），进而形成了我们所认识的这个宇宙。<br>零维犹如我们的思想，甚至可能我们的思想就存在于零维。<br>它没有大小、没有维度。它只是被想象出来的、作为标志一个位置的点。它什么也没有，空间、时间通通不存在，这就是零维度。</p><p>在零维里，不像我们生存在的三维世界，这里你感受不到一切，碰不到一切，不像我们三维世界，你看得到那棵树，你摸得到你家的猫，你可以呼吸……甚至可以说，你是不存在的。</p><p>但千万别以为错了，我们的思想并不属于三维，我们只是能触碰到三维而已，具体是几维人，有待考证。这是一个富有哲理的科学问题。</p><p>关于零的东西就这么少，再多也找不到了，搞张图凑个数</p><p><img src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=2904586410,199086725&fm=26&gp=0.jpg"></p><h1 id="一维"><a href="#一维" class="headerlink" title="一维"></a>一维</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>一维空间是指只由一条线内的点所组成的空间，它只有长度，没有宽度和高度，只能向两边无限延展。一维实际是指的是一条线，在理解上即为左－右一个方向（如：时间）。也可理解为点动成线，指没有面积与体积的物体。<br>在空间维系内，一维空间是最简单的空间，它只由一条线组成。实际上一条线就是一个一维空间，一条曲线如果没有建立坐标系，那么它也是一维的。简而言之，没有建立坐标系的线就是一个一维空间。<br>如果你在一维空间中，你只能看见前面和后面。<br>一维空间是指仅由一个要素构成的空间。就如一张纸上有两个点把这两个点连成一条直线，这一条直线没有高度和深度，只有长度。数线是其中一个一维空间的例子，借由数线上的单位长度来表示每个点的位置。</p><h2 id="几何"><a href="#几何" class="headerlink" title="几何"></a>几何</h2><h3 id="多胞形"><a href="#多胞形" class="headerlink" title="多胞形"></a>多胞形</h3><p>在一维的多胞形是一条线段，它的施莱夫利符号是：{}</p><h3 id="超球体"><a href="#超球体" class="headerlink" title="超球体"></a>超球体</h3><p>在一维中的超球体是一对点，因为它的表面为零维度，所以有时叫作<strong>0球</strong>。它的长度是：L=2r，r是它的半径。</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>一维实际是指的是一条线，在理解上即为左－右一个方向（如：时间）。也可理解为点动成线，指没有面积与体积的物体。他没有长，没有宽。</p><p><img src="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=835978978,3163216416&fm=26&gp=0.jpg"></p><h1 id="二维"><a href="#二维" class="headerlink" title="二维"></a>二维</h1><h1 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h1><p>二维空间或译二度空间（Second Dimension）是指仅由宽度→水平线和高度→垂直线（在几何学中为X轴和Y轴）两个要素所组成的平面空间，只在平面延伸扩展，同时也是美术上的一个术语，例如绘画便是要将三维空间的事物，用二维空间来展现。<br>二维空间是指仅由长度和宽度（在几何学中为X轴和Y轴）两个要素所组成的平面空间，只向所在平面延伸扩展。<br>二维空间同时也是美术上的一个术语，例如绘画便是要将三维空间（三度空间）的事物，用二度空间来展现。</p><h2 id="几何-1"><a href="#几何-1" class="headerlink" title="几何"></a>几何</h2><p>在几何中，二维空间仅指的是一个平面，上面的每一个点都可以用由两个数构成的坐标（x,y）来表示。如图《二维空间是平面》所示，坐标将平面分成了4个象限。<br>形象例证有一位专家曾打过一个比方：让我们先假设一些生活在二维空间的扁片人，他们只有平面概念。假如要将一个二维扁片人关起来，只需要用线在他四周画一个圈即可，这样一来，在二维空间的范围内，他无论如何也走不出这个圈。</p><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p>三维的物体在二维里可以由一处消失，在另一处出现。</p><h2 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h2><p>线性代数中也有另一种探讨二维空间的的方式，其中彼此独立性的想法至关重要。平面有二个维度，因为长方形的长和宽的长度是彼此独立的。以线性代数的方式来说，平面是二维空间，因为平面上的任何一点都可以用二个独立向量的线性组合来表示。<br>数量积、角度及长度<br>二个向量A= [A1,A2]和B= [B1,B2]的数量积定义为：<br><img src="https://bkimg.cdn.bcebos.com/formula/9cfc45667aba8ac1ea8af57269b6fb2c.svg"></p><p>向量可以画成一个箭头，量值为箭头的长度即其，向量的方向就是箭头指向的方向。向量A的长度为。以此观点来看，两个欧几里得向量A和B的数量积定义为 [2] </p><p>其中θ为A和B的角度<br>向量A和自己的数量积为</p><p>因此</p><p>这也是向量欧几里得距离的公式。<br><img src="https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2487852100,930414557&fm=26&gp=0.jpg"></p><p>待更…..</p>]]></content>
      
      
      
        <tags>
            
            <tag> 物理学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows terminal 的安装和美化</title>
      <link href="2021/01/01/wintm/"/>
      <url>2021/01/01/wintm/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这段时间呢，我一直是用cmder或者windows ISE的，但是这两货的优点很多，缺点也不少，比如说：启动慢（ISE一个启动都要2s，我打命令都打完了他还没启动完），颜值低（ISE不支持更改外观，cmder可以更改的地方很少。）于是，我到一些群里面去问：“有没有大佬，求一个windows下的Shell客户端”，回答的答案很多：“cmder,Xshell,WSL(Windows子Linux),Windows terminal”，当我看到windows terminal的时候，我脑中浮现出一个奇怪的问题：“可以魔改吗？”，于是我发出了这个问题，得到的结果是：“可以”，我那颗折腾的心变得Exciting了起来!</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><h3 id="怎么下载呢？"><a href="#怎么下载呢？" class="headerlink" title="怎么下载呢？"></a>怎么下载呢？</h3><p>你可以在这个<a href="https://github.com/microsoft/terminal">链接</a>下载,或者直接到Windows Store里面搜索”windows terminal”下载<br><img src="https://docs.microsoft.com/zh-cn/windows/terminal/images/overview.png" alt="terminal"></p><h4 id="阐述"><a href="#阐述" class="headerlink" title="阐述"></a>阐述</h4><p>Windows 终端是一个面向命令行工具和 shell（如命令提示符、PowerShell 和适用于 Linux 的 Windows 子系统 (WSL)）用户的新式终端应用程序。 它的主要功能包括多个选项卡、窗格、Unicode 和 UTF-8 字符支持、GPU 加速文本呈现引擎，你还可用它来创建你自己的主题并自定义文本、颜色、背景和快捷方式。</p><h5 id="支持多种命令行应用程序的多个配置文件"><a href="#支持多种命令行应用程序的多个配置文件" class="headerlink" title="支持多种命令行应用程序的多个配置文件"></a>支持多种命令行应用程序的多个配置文件</h5><p>任何具有命令行接口的应用程序都可以在 Windows 终端中运行。 这包括从 PowerShell 和命令提示符到 Azure Cloud Shell 和任何 WSL 分发（如 Ubuntu 或 Oh-My-Zsh）的所有应用程序。</p><h5 id="自定义方案和配置"><a href="#自定义方案和配置" class="headerlink" title="自定义方案和配置"></a>自定义方案和配置</h5><p>可以将 Windows 终端配置为具有多种配色方案和设置。 若要了解如何创建自己的配色方案，请访问配色方案页面。 还可以在自定义终端库中查找自定义终端配置。</p><h5 id="自定义操作"><a href="#自定义操作" class="headerlink" title="自定义操作"></a>自定义操作</h5><p>可在 Windows 终端中使用多种自定义命令，获得更加自然的体验。 如果不喜欢特定的键盘快捷方式，可以将其更改为你喜欢的方式。<br>例如，若要复制命令行中的文本，默认的快捷方式为 <code>ctrl+shift+c</code>。 你可以将其更改为 <code>ctrl+1</code> 或你喜欢的其他方式。 要打开新的选项卡，默认快捷方式是 <code>ctrl+t</code>，但你可能想要将其更改为 <code>ctrl+2</code>。 用于在打开的选项卡之间进行切换的默认快捷方式是 <code>ctrl+tab</code>，可以将这个快捷方式更改为 <code>ctrl+- </code>并改为用于创建新选项卡。<br>可在操作页面上了解如何自定义快捷方式。</p><h5 id="Unicode-和-UTF-8-字符支持"><a href="#Unicode-和-UTF-8-字符支持" class="headerlink" title="Unicode 和 UTF-8 字符支持"></a>Unicode 和 UTF-8 字符支持</h5><p>Windows 终端可以显示 Unicode 和 UTF-8 字符，如各种语言的表情符号和字符。</p><h5 id="GPU-加速文本呈现"><a href="#GPU-加速文本呈现" class="headerlink" title="GPU 加速文本呈现"></a>GPU 加速文本呈现</h5><p>Windows 终端使用 GPU 来呈现其文本，从而提供比默认 Windows 命令行体验更好的性能。</p><h5 id="背景图像支持"><a href="#背景图像支持" class="headerlink" title="背景图像支持"></a>背景图像支持</h5><p>可以在 Windows 终端窗口中显示背景图像和 gif。 有关如何向配置文件添加背景图像的信息，请参阅配置文件设置页。</p><h5 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h5><p>可以使用命令行参数将 Windows 终端设置为在特定配置中启动。 可以指定要在新选项卡中打开哪个配置文件、应选择哪个文件夹目录，指定使用拆分窗口窗格打开终端，并指定选择应专注于哪个选项卡。<br>例如，若要使用三个窗格从 PowerShell 打开 Windows 终端（左窗格运行命令提示符配置文件，右窗格拆分为两个，一个用于 PowerShell，另一个用于运行 WSL 的默认配置文件），请输入：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wt -p &quot;Command Prompt&quot; `; split-pane -p &quot;Windows PowerShell&quot; `; split-pane -H wsl.exe</span><br></pre></td></tr></table></figure></div><h5 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h5><p><img src="https://pic1.zhimg.com/80/v2-07c470e08b138bbd6ba21efeac9acc54_720w.jpg" alt="terminal"><br>微软宣布从 2020 年 7 月开始，Windows Terminal 每月都会获得一次更新。<br>这是一个开源项目，微软欢迎全球开发者社区参与。如要参与，请访问：GitHub | Windows Terminal<br>此外，微软宣布正式启动预览项目 Windows Terminal Preview，开发者还可以从微软官方文档页面获取相关支持：Windows Terminal | Microsoft Docs</p><h2 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h2><h3 id="powershell美化"><a href="#powershell美化" class="headerlink" title="powershell美化"></a>powershell美化</h3><p>在美化windows terminal之前，我们先来美化powershell这个傻大蓝。</p><p>在命令行依次输入</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装 PSReadline 包，让命令行更好用</span></span><br><span class="line">Install-Module -Nane PSReadLine -AllowPrerelease -Force</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装 posh-git 包,优化Git(bash)</span></span><br><span class="line">Install-Module posh-git -Scope CurrentUser</span><br><span class="line"><span class="meta">#</span><span class="bash"> 划重点！安装 oh-my-posh 包，美化傻大蓝(poweshell)</span></span><br><span class="line">Install-Module oh-my-posh -Scope CurrentUser</span><br><span class="line"><span class="meta">#</span><span class="bash"> 允许脚本本地运行 &amp; 安装 Scope 包管理器</span></span><br><span class="line">set-executionpolicy remotesigned -scope currentuser</span><br><span class="line">iex (new-object net.webclient).downloadstring(&#x27;https://get.scoop.sh&#x27;)</span><br></pre></td></tr></table></figure></div><p>没网络的时候~</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">⚡ ChenShang ~ ❯❯❯ if (!(Test-Path -Path $PROFILE )) &#123; New-Item -Type File -Path $PROFILE -Force &#125; # 检验是否有 $PROFILE，没有就创建一个</span><br><span class="line">⚡ ChenShang ~ ❯❯❯ notepad $PROFILE # 记事本打开 $PROFILE</span><br><span class="line">⚡ ChenShang ~ ❯❯❯ code $PROFILE # 记事本打开 $PROFILE</span><br><span class="line">⚡ ChenShang ~ ❯❯❯ code $PROFILE # 记事本打开 $PROFILE</span><br><span class="line">⚡ ChenShang ~ ❯❯❯ code $PROFILE # 记事本打开 $PROFILE</span><br><span class="line">⚡ ChenShang ~ ❯❯❯ # 安装 PSReadline 包，让命令行更好用</span><br><span class="line">⚡ ChenShang ~ ❯❯❯ Install-Module -Nane PSReadLine -AllowPrerelease -Force</span><br><span class="line">Install-Module : 找不到与参数名称“Nane”匹配的参数。</span><br><span class="line">所在位置 行:1 字符: 16</span><br><span class="line">+ Install-Module -Nane PSReadLine -AllowPrerelease -Force</span><br><span class="line">+                ~~~~~</span><br><span class="line">    + CategoryInfo          : InvalidArgument: (:) [Install-Module]，ParameterBindingException</span><br><span class="line">    + FullyQualifiedErrorId : NamedParameterNotFound,Install-Module</span><br><span class="line"></span><br><span class="line">⨯ ⚡ ChenShang ~ ❯❯❯ # 安装 posh-git 包,优化Git(bash)</span><br><span class="line">⚡ ChenShang ~ ❯❯❯ Install-Module posh-git -Scope CurrentUser</span><br><span class="line">警告: Unable to resolve package source &#x27;https://www.powershellgallery.com/api/v2&#x27;.</span><br><span class="line">PackageManagement\Install-Package : 找不到与指定的搜索条件和程序包名称“posh-git”匹配的项目。请尝试使用 Get-PSRepository 查看所有可用的注册程序包源。</span><br><span class="line">所在位置 C:\Program Files\WindowsPowerShell\Modules\PowerShellGet\1.0.0.1\PSModule.psm1:1809 字符: 21</span><br><span class="line">+ ...          $null = PackageManagement\Install-Package @PSBoundParameters</span><br><span class="line">+                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">    + CategoryInfo          : ObjectNotFound: (Microsoft.Power....InstallPackage:InstallPackage) [Install-Package], Exception</span><br><span class="line">    + FullyQualifiedErrorId : NoMatchFoundForCriteria,Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage</span><br><span class="line"></span><br><span class="line">⨯ ⚡ ChenShang ~ ❯❯❯ # 划重点！安装 oh-my-posh 包，美化傻大蓝(poweshell)</span><br><span class="line">⚡ ChenShang ~ ❯❯❯ Install-Module oh-my-posh -Scope CurrentUser</span><br><span class="line">警告: Unable to resolve package source &#x27;https://www.powershellgallery.com/api/v2&#x27;.</span><br><span class="line">PackageManagement\Install-Package : 找不到与指定的搜索条件和程序包名称“oh-my-posh”匹配的项目。请尝试使用 Get-PSRepository 查看所有可用的注册程序包源。</span><br><span class="line">所在位置 C:\Program Files\WindowsPowerShell\Modules\PowerShellGet\1.0.0.1\PSModule.psm1:1809 字符: 21</span><br><span class="line">+ ...          $null = PackageManagement\Install-Package @PSBoundParameters</span><br><span class="line">+                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">    + CategoryInfo          : ObjectNotFound: (Microsoft.Power....InstallPackage:InstallPackage) [Install-Package], Exception</span><br><span class="line">    + FullyQualifiedErrorId : NoMatchFoundForCriteria,Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage</span><br><span class="line"></span><br><span class="line">⨯ ⚡ ChenShang ~ ❯❯❯ # 允许脚本本地运行 &amp; 安装 Scope 包管理器</span><br><span class="line">⚡ ChenShang ~ ❯❯❯ set-executionpolicy remotesigned -scope currentuser</span><br><span class="line">⚡ ChenShang ~ ❯❯❯ iex (new-object net.webclient).downloadstring(&#x27;https://get.scoop.sh&#x27;)^C</span><br><span class="line">⚡ ChenShang ~ ❯❯❯</span><br></pre></td></tr></table></figure></div><h4 id="安装完oh-my-posh后"><a href="#安装完oh-my-posh后" class="headerlink" title="安装完oh-my-posh后"></a>安装完oh-my-posh后</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (!(Test-Path -Path $PROFILE )) &#123; New-Item -Type File -Path $PROFILE -Force &#125; # 检验是否有 $PROFILE，没有就创建一个</span><br><span class="line">notepad $PROFILE # 记事本打开 $PROFILE</span><br></pre></td></tr></table></figure></div><p>在记事本里面输入以下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Ps"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Import-Module</span> posh<span class="literal">-git</span> <span class="comment"># 导入posh-git的模块</span></span><br><span class="line"><span class="built_in">Import-Module</span> <span class="built_in">oh</span><span class="literal">-my</span><span class="literal">-posh</span> <span class="comment"># 导入oh-my-posh的模块</span></span><br><span class="line"><span class="built_in">Set-Theme</span> Sorin <span class="comment"># 将样式设定为Sorin</span></span><br></pre></td></tr></table></figure></div><h3 id="美化Windows-terminal"><a href="#美化Windows-terminal" class="headerlink" title="美化Windows terminal"></a>美化Windows terminal</h3><p>所要用到的代码如下</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Js"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;backgroundImage&quot;</span>: <span class="string">&quot;https://upimage.alexhchu.com/2021/01/01/378b347c10053.jpg&quot;</span>, <span class="comment">// bg url</span></span><br><span class="line"><span class="string">&quot;backgroundImageOpacity&quot;</span>: <span class="number">0.5</span>,</span><br><span class="line"><span class="string">&quot;closeOnExit&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;color&quot;</span>: <span class="string">&quot;#FFFFFF&quot;</span>,</span><br><span class="line"><span class="string">&quot;cursorShape&quot;</span>: <span class="string">&quot;bar&quot;</span>,</span><br><span class="line"><span class="string">&quot;icon&quot;</span>: <span class="string">&quot;E://shell//PS.png&quot;</span>,</span><br><span class="line"><span class="string">&quot;padding&quot;</span>: <span class="string">&quot;0, 0, 0, 0&quot;</span>,</span><br><span class="line"><span class="string">&quot;snapOnInput&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;startingDirectory&quot;</span>: <span class="string">&quot;%USERPROFILE%&quot;</span>,</span><br><span class="line"><span class="string">&quot;tabTitle&quot;</span>: <span class="string">&quot;Windows-10-Shell&quot;</span>,</span><br><span class="line"><span class="string">&quot;useAcrylic&quot;</span>: <span class="literal">true</span>,</span><br></pre></td></tr></table></figure></div><ul><li>加在什么地方？<br>加在这里</li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Js"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;profiles&quot;</span>:</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;defaults&quot;</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;fontFace&quot;</span> : <span class="string">&quot;JetBrains Mono&quot;</span>,</span><br><span class="line">        <span class="string">&quot;cursorColor&quot;</span>: <span class="string">&quot;#9e9e9e&quot;</span>,</span><br><span class="line">        <span class="string">&quot;fontSize&quot;</span> : <span class="number">13</span>  <span class="comment">// 字体大小,</span></span><br><span class="line">        <span class="comment">// Put settings here that you want to apply to all profiles.</span></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></div><div class='tip error faa-spin animated'><p>加在这里的话只需要写一次代码，然后所有的全部都一个样（除了标题）<p></div><p>或者放这：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Js"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;list&quot;</span>:</span><br><span class="line">        [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Make changes here to the powershell.exe profile.</span></span><br><span class="line">                <span class="comment">// powershell </span></span><br><span class="line">                <span class="string">&quot;guid&quot;</span>: <span class="string">&quot;&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Windows PowerShell&quot;</span>,</span><br><span class="line">                <span class="string">&quot;commandline&quot;</span>: <span class="string">&quot;powershell.exe&quot;</span>,</span><br><span class="line">                <span class="string">&quot;backgroundImage&quot;</span>: <span class="string">&quot;https://upimage.alexhchu.com/2021/01/01/378b347c10053.jpg&quot;</span>, <span class="comment">// bg url</span></span><br><span class="line">                <span class="string">&quot;backgroundImageOpacity&quot;</span>: <span class="number">0.5</span>,</span><br><span class="line">                <span class="string">&quot;closeOnExit&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#FFFFFF&quot;</span>,</span><br><span class="line">                <span class="string">&quot;cursorShape&quot;</span>: <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">                <span class="string">&quot;icon&quot;</span>: <span class="string">&quot;E://shell//PS.png&quot;</span>,</span><br><span class="line">                <span class="string">&quot;padding&quot;</span>: <span class="string">&quot;0, 0, 0, 0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;snapOnInput&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;startingDirectory&quot;</span>: <span class="string">&quot;%USERPROFILE%&quot;</span>,</span><br><span class="line">                <span class="string">&quot;tabTitle&quot;</span>: <span class="string">&quot;Windows-10-Shell&quot;</span>,</span><br><span class="line">                <span class="string">&quot;useAcrylic&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">                <span class="string">&quot;hidden&quot;</span>: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br></pre></td></tr></table></figure></div><blockquote><p>但是放在这里的话就要每一个list都写一次刚才的代码了。很麻烦….但是很有效</p></blockquote><h3 id="我的个人主题配置文件"><a href="#我的个人主题配置文件" class="headerlink" title="我的个人主题配置文件"></a>我的个人主题配置文件</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Js"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This file was initially generated by Windows Terminal 1.4.3243.0</span></span><br><span class="line"><span class="comment">// It should still be usable in newer versions, but newer versions might have additional</span></span><br><span class="line"><span class="comment">// settings, help text, or changes that you will not see unless you clear this file</span></span><br><span class="line"><span class="comment">// and let us generate a new one for you.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// To view the default settings, hold &quot;alt&quot; while clicking on the &quot;Settings&quot; button.</span></span><br><span class="line"><span class="comment">// For documentation on these settings, see: https://aka.ms/terminal-documentation</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;$schema&quot;</span>: <span class="string">&quot;https://aka.ms/terminal-profiles-schema&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;defaultProfile&quot;</span>: <span class="string">&quot;&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// You can add more global application settings here.</span></span><br><span class="line">    <span class="comment">// To learn more about global settings, visit https://aka.ms/terminal-global-settings</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// If enabled, selections are automatically copied to your clipboard.</span></span><br><span class="line">    <span class="string">&quot;copyOnSelect&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If enabled, formatted data is also copied to your clipboard</span></span><br><span class="line">    <span class="string">&quot;copyFormatting&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// A profile specifies a command to execute paired with information about how it should look and feel.</span></span><br><span class="line">    <span class="comment">// Each one of them will appear in the &#x27;New Tab&#x27; dropdown,</span></span><br><span class="line">    <span class="comment">//   and can be invoked from the commandline with `wt.exe -p xxx`</span></span><br><span class="line">    <span class="comment">// To learn more about profiles, visit https://aka.ms/terminal-profile-settings</span></span><br><span class="line">    <span class="string">&quot;profiles&quot;</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;defaults&quot;</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;fontFace&quot;</span> : <span class="string">&quot;JetBrains Mono&quot;</span>,</span><br><span class="line">            <span class="string">&quot;cursorColor&quot;</span>: <span class="string">&quot;#9e9e9e&quot;</span>,</span><br><span class="line">            <span class="string">&quot;fontSize&quot;</span> : <span class="number">13</span>  <span class="comment">// 字体大小,</span></span><br><span class="line">            <span class="comment">// Put settings here that you want to apply to all profiles.</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;list&quot;</span>:</span><br><span class="line">        [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Make changes here to the powershell.exe profile.</span></span><br><span class="line">                <span class="comment">// powershell </span></span><br><span class="line">                <span class="string">&quot;guid&quot;</span>: <span class="string">&quot;&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Windows PowerShell&quot;</span>,</span><br><span class="line">                <span class="string">&quot;commandline&quot;</span>: <span class="string">&quot;powershell.exe&quot;</span>,</span><br><span class="line">                <span class="string">&quot;backgroundImage&quot;</span>: <span class="string">&quot;https://upimage.alexhchu.com/2021/01/01/378b347c10053.jpg&quot;</span>, <span class="comment">// bg url</span></span><br><span class="line">                <span class="string">&quot;backgroundImageOpacity&quot;</span>: <span class="number">0.5</span>,</span><br><span class="line">                <span class="string">&quot;closeOnExit&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#FFFFFF&quot;</span>,</span><br><span class="line">                <span class="string">&quot;cursorShape&quot;</span>: <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">                <span class="string">&quot;icon&quot;</span>: <span class="string">&quot;E://shell//PS.png&quot;</span>,</span><br><span class="line">                <span class="string">&quot;padding&quot;</span>: <span class="string">&quot;0, 0, 0, 0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;snapOnInput&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;startingDirectory&quot;</span>: <span class="string">&quot;%USERPROFILE%&quot;</span>,</span><br><span class="line">                <span class="string">&quot;tabTitle&quot;</span>: <span class="string">&quot;Windows-10-Shell&quot;</span>,</span><br><span class="line">                <span class="string">&quot;useAcrylic&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">                <span class="string">&quot;hidden&quot;</span>: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Make changes here to the powershell.exe profile.</span></span><br><span class="line">                <span class="comment">// powershell </span></span><br><span class="line">                <span class="string">&quot;guid&quot;</span>: <span class="string">&quot;&#123;1c4de342-38b7-51cf-b940-2309a097f584&#125;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Git-Bash&quot;</span>,</span><br><span class="line">                <span class="string">&quot;commandline&quot;</span>: <span class="string">&quot;E:\\Git\\bin\\bash.exe&quot;</span>,</span><br><span class="line">                <span class="string">&quot;backgroundImage&quot;</span>: <span class="string">&quot;https://www.cxyxiaowu.com/wp-content/uploads/2020/06/1591422723-a39d058bfb6e1cf.png&quot;</span>, <span class="comment">// bg url</span></span><br><span class="line">                <span class="string">&quot;backgroundImageOpacity&quot;</span>: <span class="number">0.9</span>,</span><br><span class="line">                <span class="string">&quot;closeOnExit&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#FFFFFF&quot;</span>,</span><br><span class="line">                <span class="string">&quot;cursorShape&quot;</span>: <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">                <span class="string">&quot;icon&quot;</span>: <span class="string">&quot;E://shell//git.png&quot;</span>,</span><br><span class="line">                <span class="string">&quot;padding&quot;</span>: <span class="string">&quot;10, 10, 10, 10&quot;</span>,</span><br><span class="line">                <span class="string">&quot;snapOnInput&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;startingDirectory&quot;</span>: <span class="string">&quot;%USERPROFILE%&quot;</span>,</span><br><span class="line">                <span class="string">&quot;tabTitle&quot;</span>: <span class="string">&quot;Git-Bash&quot;</span>,</span><br><span class="line">                <span class="string">&quot;useAcrylic&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;hidden&quot;</span>: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Make changes here to the cmd.exe profile.</span></span><br><span class="line">                <span class="comment">// cmd</span></span><br><span class="line">                <span class="string">&quot;guid&quot;</span>: <span class="string">&quot;&#123;0caa0dad-35be-5f56-a8ff-afceeeaa6101&#125;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Command Prompt&quot;</span>,</span><br><span class="line">                <span class="string">&quot;acrylicOpacity&quot;</span> : <span class="number">0.75</span>,</span><br><span class="line">                <span class="string">&quot;backgroundImage&quot;</span> : <span class="string">&quot;https://upimage.alexhchu.com/2021/01/01/f9ced42a624e7.jpg&quot;</span>, <span class="comment">// 图片地址</span></span><br><span class="line">                <span class="string">&quot;backgroundImageOpacity&quot;</span> : <span class="number">0.9</span>,</span><br><span class="line">                <span class="string">&quot;closeOnExit&quot;</span> : <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;cursorColor&quot;</span> : <span class="string">&quot;#FFFFFF&quot;</span>,</span><br><span class="line">                <span class="string">&quot;cursorShape&quot;</span> : <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">                <span class="string">&quot;icon&quot;</span> : <span class="string">&quot;E://shell//cmd.png&quot;</span>,</span><br><span class="line">                <span class="string">&quot;padding&quot;</span> : <span class="string">&quot;0, 0, 0, 0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;snapOnInput&quot;</span> : <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;startingDirectory&quot;</span> : <span class="string">&quot;%USERPROFILE%&quot;</span>,</span><br><span class="line">                <span class="string">&quot;tabTitle&quot;</span> : <span class="string">&quot;default&quot;</span>,</span><br><span class="line">                <span class="string">&quot;useAcrylic&quot;</span> : <span class="literal">true</span>,  <span class="comment">//毛玻璃 关掉</span></span><br><span class="line">                <span class="string">&quot;hidden&quot;</span>: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// -user cloud</span></span><br><span class="line">                <span class="string">&quot;guid&quot;</span>: <span class="string">&quot;&#123;b453ae62-4e3d-5e58-b989-0a998ec441b8&#125;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;hidden&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Azure Cloud Shell&quot;</span>,</span><br><span class="line">                <span class="string">&quot;source&quot;</span>: <span class="string">&quot;Windows.Terminal.Azure&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add custom color schemes to this array.</span></span><br><span class="line">    <span class="comment">// To learn more about color schemes, visit https://aka.ms/terminal-color-schemes</span></span><br><span class="line">    <span class="string">&quot;schemes&quot;</span>: [],</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add custom actions and keybindings to this array.</span></span><br><span class="line">    <span class="comment">// To unbind a key combination from your defaults.json, set the command to &quot;unbound&quot;.</span></span><br><span class="line">    <span class="comment">// To learn more about actions and keybindings, visit https://aka.ms/terminal-keybindings</span></span><br><span class="line">    <span class="string">&quot;actions&quot;</span>:</span><br><span class="line">    [</span><br><span class="line">        <span class="comment">// Copy and paste are bound to Ctrl+Shift+C and Ctrl+Shift+V in your defaults.json.</span></span><br><span class="line">        <span class="comment">// These two lines additionally bind them to Ctrl+C and Ctrl+V.</span></span><br><span class="line">        <span class="comment">// To learn more about selection, visit https://aka.ms/terminal-selection</span></span><br><span class="line">        &#123; <span class="string">&quot;command&quot;</span>: &#123;<span class="string">&quot;action&quot;</span>: <span class="string">&quot;copy&quot;</span>, <span class="string">&quot;singleLine&quot;</span>: <span class="literal">false</span> &#125;, <span class="string">&quot;keys&quot;</span>: <span class="string">&quot;ctrl+c&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;command&quot;</span>: <span class="string">&quot;paste&quot;</span>, <span class="string">&quot;keys&quot;</span>: <span class="string">&quot;ctrl+v&quot;</span> &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Press Ctrl+Shift+F to open the search box</span></span><br><span class="line">        &#123; <span class="string">&quot;command&quot;</span>: <span class="string">&quot;find&quot;</span>, <span class="string">&quot;keys&quot;</span>: <span class="string">&quot;ctrl+shift+f&quot;</span> &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Press Alt+Shift+D to open a new pane.</span></span><br><span class="line">        <span class="comment">// - &quot;split&quot;: &quot;auto&quot; makes this pane open in the direction that provides the most surface area.</span></span><br><span class="line">        <span class="comment">// - &quot;splitMode&quot;: &quot;duplicate&quot; makes the new pane use the focused pane&#x27;s profile.</span></span><br><span class="line">        <span class="comment">// To learn more about panes, visit https://aka.ms/terminal-panes</span></span><br><span class="line">        &#123; <span class="string">&quot;command&quot;</span>: &#123; <span class="string">&quot;action&quot;</span>: <span class="string">&quot;splitPane&quot;</span>, <span class="string">&quot;split&quot;</span>: <span class="string">&quot;auto&quot;</span>, <span class="string">&quot;splitMode&quot;</span>: <span class="string">&quot;duplicate&quot;</span> &#125;, <span class="string">&quot;keys&quot;</span>: <span class="string">&quot;alt+shift+d&quot;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>建议在我的基础上加以修正，不要直接拿我的。</p></blockquote><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>那个什么，这篇文章写的不怎么好，我没有什么文笔，写技术博客的时候很难下手，写这篇文章的原因是因为有人接的我的Windows terminal好…看…（怎么这么生疏）来简单讲讲流程和原理：</p><ol><li><p>先下载，那<a href="http://localhost:4000/posts/b9a9514u.html#%E6%80%8E%E4%B9%88%E4%B8%8B%E8%BD%BD%E5%91%A2%EF%BC%9F">怎么下载呢？</a></p></li><li><p>安装需要的模块</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装 PSReadline 包，让命令行更好用</span></span><br><span class="line">Install-Module -Nane PSReadLine -AllowPrerelease -Force</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装 posh-git 包,优化Git(bash)</span></span><br><span class="line">Install-Module posh-git -Scope CurrentUser</span><br><span class="line"><span class="meta">#</span><span class="bash"> 划重点！安装 oh-my-posh 包，美化傻大蓝(poweshell)</span></span><br><span class="line">Install-Module oh-my-posh -Scope CurrentUser</span><br><span class="line"><span class="meta">#</span><span class="bash"> 允许脚本本地运行 &amp; 安装 Scope 包管理器</span></span><br><span class="line">set-executionpolicy remotesigned -scope currentuser</span><br><span class="line">iex (new-object net.webclient).downloadstring(&#x27;https://get.scoop.sh&#x27;)</span><br></pre></td></tr></table></figure></div><p>建议在有网络的环境下下载</p></li><li><p>配置ho-my-posh到Poweshell<br>检验PS(powershell)的配置文件有没有呆在它应该呆在的地方，如果没有，那就给它造个兄弟，在他的兄弟的身体里面写下如下</p></li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Ps"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Import-Module</span> posh<span class="literal">-git</span> <span class="comment"># 导入posh-git的模块</span></span><br><span class="line"><span class="built_in">Import-Module</span> <span class="built_in">oh</span><span class="literal">-my</span><span class="literal">-posh</span> <span class="comment"># 导入oh-my-posh的模块</span></span><br><span class="line"><span class="built_in">Set-Theme</span> Sorin <span class="comment"># 将样式设定为Sorin</span></span><br></pre></td></tr></table></figure></div><ol start="4"><li>配Json，在标签旁边的“+”的设置，或者直接<code>Ctrl+,</code><br>我的setting.json:<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Js"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This file was initially generated by Windows Terminal 1.4.3243.0</span></span><br><span class="line"><span class="comment">// It should still be usable in newer versions, but newer versions might have additional</span></span><br><span class="line"><span class="comment">// settings, help text, or changes that you will not see unless you clear this file</span></span><br><span class="line"><span class="comment">// and let us generate a new one for you.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// To view the default settings, hold &quot;alt&quot; while clicking on the &quot;Settings&quot; button.</span></span><br><span class="line"><span class="comment">// For documentation on these settings, see: https://aka.ms/terminal-documentation</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;$schema&quot;</span>: <span class="string">&quot;https://aka.ms/terminal-profiles-schema&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;defaultProfile&quot;</span>: <span class="string">&quot;&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// You can add more global application settings here.</span></span><br><span class="line">    <span class="comment">// To learn more about global settings, visit https://aka.ms/terminal-global-settings</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// If enabled, selections are automatically copied to your clipboard.</span></span><br><span class="line">    <span class="string">&quot;copyOnSelect&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If enabled, formatted data is also copied to your clipboard</span></span><br><span class="line">    <span class="string">&quot;copyFormatting&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// A profile specifies a command to execute paired with information about how it should look and feel.</span></span><br><span class="line">    <span class="comment">// Each one of them will appear in the &#x27;New Tab&#x27; dropdown,</span></span><br><span class="line">    <span class="comment">//   and can be invoked from the commandline with `wt.exe -p xxx`</span></span><br><span class="line">    <span class="comment">// To learn more about profiles, visit https://aka.ms/terminal-profile-settings</span></span><br><span class="line">    <span class="string">&quot;profiles&quot;</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;defaults&quot;</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;fontFace&quot;</span> : <span class="string">&quot;JetBrains Mono&quot;</span>,</span><br><span class="line">            <span class="string">&quot;cursorColor&quot;</span>: <span class="string">&quot;#9e9e9e&quot;</span>,</span><br><span class="line">            <span class="string">&quot;fontSize&quot;</span> : <span class="number">13</span>  <span class="comment">// 字体大小,</span></span><br><span class="line">            <span class="comment">// Put settings here that you want to apply to all profiles.</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;list&quot;</span>:</span><br><span class="line">        [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Make changes here to the powershell.exe profile.</span></span><br><span class="line">                <span class="comment">// powershell </span></span><br><span class="line">                <span class="string">&quot;guid&quot;</span>: <span class="string">&quot;&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Windows PowerShell&quot;</span>,</span><br><span class="line">                <span class="string">&quot;commandline&quot;</span>: <span class="string">&quot;powershell.exe&quot;</span>,</span><br><span class="line">                <span class="string">&quot;backgroundImage&quot;</span>: <span class="string">&quot;https://upimage.alexhchu.com/2021/01/01/378b347c10053.jpg&quot;</span>, <span class="comment">// bg url</span></span><br><span class="line">                <span class="string">&quot;backgroundImageOpacity&quot;</span>: <span class="number">0.5</span>,</span><br><span class="line">                <span class="string">&quot;closeOnExit&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#FFFFFF&quot;</span>,</span><br><span class="line">                <span class="string">&quot;cursorShape&quot;</span>: <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">                <span class="string">&quot;icon&quot;</span>: <span class="string">&quot;E://shell//PS.png&quot;</span>,</span><br><span class="line">                <span class="string">&quot;padding&quot;</span>: <span class="string">&quot;0, 0, 0, 0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;snapOnInput&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;startingDirectory&quot;</span>: <span class="string">&quot;%USERPROFILE%&quot;</span>,</span><br><span class="line">                <span class="string">&quot;tabTitle&quot;</span>: <span class="string">&quot;Windows-10-Shell&quot;</span>,</span><br><span class="line">                <span class="string">&quot;useAcrylic&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">                <span class="string">&quot;hidden&quot;</span>: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Make changes here to the powershell.exe profile.</span></span><br><span class="line">                <span class="comment">// powershell </span></span><br><span class="line">                <span class="string">&quot;guid&quot;</span>: <span class="string">&quot;&#123;1c4de342-38b7-51cf-b940-2309a097f584&#125;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Git-Bash&quot;</span>,</span><br><span class="line">                <span class="string">&quot;commandline&quot;</span>: <span class="string">&quot;E:\\Git\\bin\\bash.exe&quot;</span>,</span><br><span class="line">                <span class="string">&quot;backgroundImage&quot;</span>: <span class="string">&quot;https://www.cxyxiaowu.com/wp-content/uploads/2020/06/1591422723-a39d058bfb6e1cf.png&quot;</span>, <span class="comment">// bg url</span></span><br><span class="line">                <span class="string">&quot;backgroundImageOpacity&quot;</span>: <span class="number">0.9</span>,</span><br><span class="line">                <span class="string">&quot;closeOnExit&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#FFFFFF&quot;</span>,</span><br><span class="line">                <span class="string">&quot;cursorShape&quot;</span>: <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">                <span class="string">&quot;icon&quot;</span>: <span class="string">&quot;E://shell//git.png&quot;</span>,</span><br><span class="line">                <span class="string">&quot;padding&quot;</span>: <span class="string">&quot;10, 10, 10, 10&quot;</span>,</span><br><span class="line">                <span class="string">&quot;snapOnInput&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;startingDirectory&quot;</span>: <span class="string">&quot;%USERPROFILE%&quot;</span>,</span><br><span class="line">                <span class="string">&quot;tabTitle&quot;</span>: <span class="string">&quot;Git-Bash&quot;</span>,</span><br><span class="line">                <span class="string">&quot;useAcrylic&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;hidden&quot;</span>: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Make changes here to the cmd.exe profile.</span></span><br><span class="line">                <span class="comment">// cmd</span></span><br><span class="line">                <span class="string">&quot;guid&quot;</span>: <span class="string">&quot;&#123;0caa0dad-35be-5f56-a8ff-afceeeaa6101&#125;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Command Prompt&quot;</span>,</span><br><span class="line">                <span class="string">&quot;acrylicOpacity&quot;</span> : <span class="number">0.75</span>,</span><br><span class="line">                <span class="string">&quot;backgroundImage&quot;</span> : <span class="string">&quot;https://upimage.alexhchu.com/2021/01/01/f9ced42a624e7.jpg&quot;</span>, <span class="comment">// 图片地址</span></span><br><span class="line">                <span class="string">&quot;backgroundImageOpacity&quot;</span> : <span class="number">0.9</span>,</span><br><span class="line">                <span class="string">&quot;closeOnExit&quot;</span> : <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;cursorColor&quot;</span> : <span class="string">&quot;#FFFFFF&quot;</span>,</span><br><span class="line">                <span class="string">&quot;cursorShape&quot;</span> : <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">                <span class="string">&quot;icon&quot;</span> : <span class="string">&quot;E://shell//cmd.png&quot;</span>,</span><br><span class="line">                <span class="string">&quot;padding&quot;</span> : <span class="string">&quot;0, 0, 0, 0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;snapOnInput&quot;</span> : <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;startingDirectory&quot;</span> : <span class="string">&quot;%USERPROFILE%&quot;</span>,</span><br><span class="line">                <span class="string">&quot;tabTitle&quot;</span> : <span class="string">&quot;default&quot;</span>,</span><br><span class="line">                <span class="string">&quot;useAcrylic&quot;</span> : <span class="literal">true</span>,  <span class="comment">//毛玻璃 关掉</span></span><br><span class="line">                <span class="string">&quot;hidden&quot;</span>: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// -user cloud</span></span><br><span class="line">                <span class="string">&quot;guid&quot;</span>: <span class="string">&quot;&#123;b453ae62-4e3d-5e58-b989-0a998ec441b8&#125;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;hidden&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Azure Cloud Shell&quot;</span>,</span><br><span class="line">                <span class="string">&quot;source&quot;</span>: <span class="string">&quot;Windows.Terminal.Azure&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add custom color schemes to this array.</span></span><br><span class="line">    <span class="comment">// To learn more about color schemes, visit https://aka.ms/terminal-color-schemes</span></span><br><span class="line">    <span class="string">&quot;schemes&quot;</span>: [],</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add custom actions and keybindings to this array.</span></span><br><span class="line">    <span class="comment">// To unbind a key combination from your defaults.json, set the command to &quot;unbound&quot;.</span></span><br><span class="line">    <span class="comment">// To learn more about actions and keybindings, visit https://aka.ms/terminal-keybindings</span></span><br><span class="line">    <span class="string">&quot;actions&quot;</span>:</span><br><span class="line">    [</span><br><span class="line">        <span class="comment">// Copy and paste are bound to Ctrl+Shift+C and Ctrl+Shift+V in your defaults.json.</span></span><br><span class="line">        <span class="comment">// These two lines additionally bind them to Ctrl+C and Ctrl+V.</span></span><br><span class="line">        <span class="comment">// To learn more about selection, visit https://aka.ms/terminal-selection</span></span><br><span class="line">        &#123; <span class="string">&quot;command&quot;</span>: &#123;<span class="string">&quot;action&quot;</span>: <span class="string">&quot;copy&quot;</span>, <span class="string">&quot;singleLine&quot;</span>: <span class="literal">false</span> &#125;, <span class="string">&quot;keys&quot;</span>: <span class="string">&quot;ctrl+c&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;command&quot;</span>: <span class="string">&quot;paste&quot;</span>, <span class="string">&quot;keys&quot;</span>: <span class="string">&quot;ctrl+v&quot;</span> &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Press Ctrl+Shift+F to open the search box</span></span><br><span class="line">        &#123; <span class="string">&quot;command&quot;</span>: <span class="string">&quot;find&quot;</span>, <span class="string">&quot;keys&quot;</span>: <span class="string">&quot;ctrl+shift+f&quot;</span> &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Press Alt+Shift+D to open a new pane.</span></span><br><span class="line">        <span class="comment">// - &quot;split&quot;: &quot;auto&quot; makes this pane open in the direction that provides the most surface area.</span></span><br><span class="line">        <span class="comment">// - &quot;splitMode&quot;: &quot;duplicate&quot; makes the new pane use the focused pane&#x27;s profile.</span></span><br><span class="line">        <span class="comment">// To learn more about panes, visit https://aka.ms/terminal-panes</span></span><br><span class="line">        &#123; <span class="string">&quot;command&quot;</span>: &#123; <span class="string">&quot;action&quot;</span>: <span class="string">&quot;splitPane&quot;</span>, <span class="string">&quot;split&quot;</span>: <span class="string">&quot;auto&quot;</span>, <span class="string">&quot;splitMode&quot;</span>: <span class="string">&quot;duplicate&quot;</span> &#125;, <span class="string">&quot;keys&quot;</span>: <span class="string">&quot;alt+shift+d&quot;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>本人用的是Sorin的主题，不知道各位喜欢什么，在<a href="https://baidu.com/">百度</a>上面都有的。</li></ol><p>也可以用</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Theme Theme-Name # 预览主题</span><br></pre></td></tr></table></figure></div><h3 id="后记-2"><a href="#后记-2" class="headerlink" title="后记-2"></a>后记-2</h3><h4 id="平台"><a href="#平台" class="headerlink" title="平台"></a>平台</h4><p>这个Windows Terminal是不跨平台的，只在Windows下才有。如果是MAC的，我推荐一个命令行，你或许认得它，它的名字是——Item2。</p><h4 id="WSL"><a href="#WSL" class="headerlink" title="WSL"></a>WSL</h4><p>WSL是指Windows Linux。Windows下的Linux子系统，Windows terminal也是可以兼容的。至于怎么配置，我下一篇再写…</p><h2 id="完成时间"><a href="#完成时间" class="headerlink" title="完成时间"></a>完成时间</h2><blockquote><p>2021/1/2/0：04：44</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> windows </tag>
            
            <tag> terminal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何反黑客后门程序</title>
      <link href="2020/12/26/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
      <url>2020/12/26/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>此文章本该在10月4日发布，博客挂了，所以搬运了。</p><p>&emsp;&emsp;那什么，额不是最近国庆吗？因为疫情的缘故，我们都在家中，但发生了这么一件事，看到标题你应该知道是什么了，我被黑了！！！咳咳咳，不能说是被黑了，只能说是我下载了一个后门软件，对后门软件，比如说灰鸽子，流光这种，那边的黑客远程控制了我，我知道，这是最基础的软件了。但是我还是中了，最后，我的账号，密码都被盗取。很难受对吧，所以我写个这个文章。</p><h3 id="如何防护这种后门，木马？"><a href="#如何防护这种后门，木马？" class="headerlink" title="如何防护这种后门，木马？"></a>如何防护这种后门，木马？</h3><p>&emsp;&emsp;很容易，不去下载就好了。哎，你这不是废话吗？咳咳，最好的方法，360。360？你在说什么？360不是毒瘤吗？360云大脑知道吗？虽然这个东西经常抽风，说这个是木马，那个是病毒。但是不去理就好了。不然你可试试不装360会怎么样，首先，我们要知道360的重要性，不然你可以换成卡巴斯基。咳咳，进入正题</p><ol><li>360只是第一种方法</li><li>第二种linux，比如说ubuntu，本文用CentOS系统演示</li><li>防火墙软件，比如说天网</li><li>还有最后一个方法，按我说的做</li></ol><h4 id="第一种方法-360，腾讯电脑管家，火绒，卡巴斯基等杀毒"><a href="#第一种方法-360，腾讯电脑管家，火绒，卡巴斯基等杀毒" class="headerlink" title="第一种方法:360，腾讯电脑管家，火绒，卡巴斯基等杀毒"></a>第一种方法:360，腾讯电脑管家，火绒，卡巴斯基等杀毒</h4><p>&emsp;&emsp;360你不会装吗？笨蛋，自己找教程。</p><h4 id="第二种方法：Linux下chkrootkit-RKHunter直接性防护"><a href="#第二种方法：Linux下chkrootkit-RKHunter直接性防护" class="headerlink" title="第二种方法：Linux下chkrootkit+RKHunter直接性防护"></a>第二种方法：Linux下chkrootkit+RKHunter直接性防护</h4><p>&emsp;&emsp;第二种方法开始。rootkit听说过吗？没有就<a href="https://www.baidu.com/">百度</a>去</p><h6 id="1-文件级别rootkit"><a href="#1-文件级别rootkit" class="headerlink" title="1. 文件级别rootkit"></a>1. 文件级别rootkit</h6><p>&emsp;&emsp;文件级别的rootkit一般是通过程序漏洞或者系统漏洞进入系统后，通过修改系统的重要文件来达到隐藏自己的目的。在系统遭受rootkit攻击后，合法的文件被木马程序替代，变成了外壳程序，而其内部是隐藏着的后门程序。通常容易被rootkit替换的系统程序有login、ls、ps、ifconfig、du、find、netstat等，其中login程序是最经常被替换的，因为当访问Linux时，无论是通过本地登录还是远程登录，/bin/login程序都会运行，系统将通过/bin/login来收集并核对用户的账号和密码，而rootkit就是利用这个程序的特点，使用一个带有根权限后门密码的/bin/login来替换系统的/bin/login，这样攻击者通过输入设定好的密码就能轻松进入系统。此时，即使系统管理员修改root密码或者清除root密码，攻击者还是一样能通过root用户登录系统。攻击者通常在进入Linux系统后，会进行一系列的攻击动作，最常见的是安装嗅探器收集本机或者网络中其他服务器的重要数据。在默认情况下，Linux中也有一些系统文件会监控这些工具动作，例如ifconfig命令，所以，攻击者为了避免被发现，会想方设法替换其他系统文件，常见的就是ls、ps、ifconfig、du、find、netstat等。如果这些文件都被替换，那么在系统层面就很难发现rootkit已经在系统中运行了。<br><br>这就是文件级别的rootkit，对系统维护很大，目前最有效的防御方法是定期对系统重要文件的完整性进行检查，如果发现文件被修改或者被替换，那么很可能系统已经遭受了rootkit入侵。检查件完整性的工具很多，常见的有Tripwire、 aide等，可以通过这些工具定期检查文件系统的完整性，以检测系统是否被rootkit入侵。</p><h6 id="2-内核级别的rootkit"><a href="#2-内核级别的rootkit" class="headerlink" title="2. 内核级别的rootkit"></a>2. 内核级别的rootkit</h6><p>&emsp;&emsp;内核级rootkit是比文件级rootkit更高级的一种入侵方式，它可以使攻击者获得对系统底层的完全控制权，此时攻击者可以修改系统内核，进而截获运行程序向内核提交的命令，并将其重定向到入侵者所选择的程序并运行此程序，也就是说，当用户要运行程序A时，被入侵者修改过的内核会假装执行A程序，而实际上却执行了程序B。</p><p>内核级rootkit主要依附在内核上，它并不对系统文件做任何修改，因此一般的检测工具很难检测到它的存在，这样一旦系统内核被植入rootkit，攻击者就可以对系统为所欲为而不被发现。目前对于内核级的rootkit还没有很好的防御工具，因此，做好系统安全防范就非常重要，将系统维持在最小权限内工作，只要攻击者不能获取root权限，就无法在内核中植入rootkit。</p><h6 id="3-主题"><a href="#3-主题" class="headerlink" title="3. 主题"></a>3. 主题</h6><h6 id="了解，安装，准备，使用chkrootkit"><a href="#了解，安装，准备，使用chkrootkit" class="headerlink" title="了解，安装，准备，使用chkrootkit"></a>了解，安装，准备，使用chkrootkit</h6><p>chkrootkit是一个Linux系统下查找并检测rootkit后门的工具，它的官方址: <a href="http://www.chkrootkit.org/%E3%80%82">http://www.chkrootkit.org/。</a> chkrootkit没有包含在官方的CentOS源中，因此要采取手动编译的方法来安装，不过这种安装方法也更加安全。下面简单介绍下chkrootkit的安装过程。</p><ol><li>准备gcc编译环境</li></ol><p>对于CentOS系统，需要安装gcc编译环境，执行下述三条命令：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc</span><br><span class="line">yum -y install gcc-c++</span><br><span class="line">yum -y install make</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装gcc,g++,CMake</span></span><br></pre></td></tr></table></figure></div><ol start="2"><li>安装chkrootkit</li></ol><p>为了安全起见，建议直接从官方网站下载chkrootkit源码，然后进行安装，操作如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Bash"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf chkrootkit.tar.gz</span><br><span class="line"><span class="built_in">cd</span> chkrootkit-*</span><br><span class="line">make sense</span><br><span class="line"><span class="comment"># 注意，上面的编译命令为make sense</span></span><br></pre></td></tr></table></figure></div><ol start="3"><li>使用chkrootkit</li></ol><p>安装完的chkrootkit程序位于/usr/local/chkrootkit目录下，执行如下命令即可显示chkrootkit的详细用法：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Bash"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/chkrootkit/chkrootkit  -h <span class="comment">#显示帮助信息</span></span><br></pre></td></tr></table></figure></div><p>chkrootkit各个参数的含义如下所示。</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>-h</td><td>显示帮助信息</td></tr><tr><td>-v</td><td>显示版本信息</td></tr><tr><td>-ddebug</td><td>ddebug模式，显示检测过程的相关指令程序</td></tr><tr><td>-q</td><td>安静模式，只显示有问题的内容</td></tr><tr><td>-x</td><td>高级模式，显示所有检测结果</td></tr><tr><td>-r</td><td>dir设置指定的目录为根目录</td></tr><tr><td>-p</td><td>dir1:dir2:dirN指定chkrootkit检测时使用系统命令的目录</td></tr><tr><td>-n</td><td>跳过NFS连接的目录</td></tr></tbody></table><p>chkrootkit的使用比较简单，直接执行chkrootkit命令即可自动开始检测系统。下面是某个系统的检测结果：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Bash"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@server chkrootkit] <span class="comment"># /usr/local/chkrootkit/chkrootkit</span></span><br><span class="line">Checking ` ifconfig <span class="string">&#x27;... INFECTED</span></span><br><span class="line"><span class="string">Checking ` ls &#x27;</span>... INFECTED</span><br><span class="line">Checking `login<span class="string">&#x27;... INFECTED</span></span><br><span class="line"><span class="string">Checking ` netstat &#x27;</span>... INFECTED</span><br><span class="line">Checking ` ps <span class="string">&#x27;... INFECTED</span></span><br><span class="line"><span class="string">Checking ` top &#x27;</span>... INFECTED</span><br><span class="line">Checking `sshd<span class="string">&#x27;... not infected</span></span><br><span class="line"><span class="string">Checking `syslogd&#x27;</span>... not tested</span><br><span class="line">Checking ` tar <span class="string">&#x27;... not infected</span></span><br><span class="line"><span class="string">Checking `tcpd&#x27;</span>... not infected</span><br><span class="line">Checking `tcpdump<span class="string">&#x27;... not infected</span></span><br><span class="line"><span class="string">Checking `telnetd&#x27;</span>... not found</span><br></pre></td></tr></table></figure></div><p>从输出可以看出，此系统的ifconfig、ls、login、netstat、ps和top命令已经被感染。针对被感染rootkit的系统，最安全而有效的方法就是备份数据重新安装系统<br>4. chkrootkit的缺点</p><p>chkrootkit在检查rootkit的过程中使用了部分系统命令，因此，如果服务器被黑客入侵，那么依赖的系统命令可能也已经被入侵者替换，此时chkrootkit的检测结果将变得完全不可信。为了避免chkrootkit的这个问题，可以在服务器对外开放前，事先将chkrootkit使用的系统命令进行备份，在需要的时候使用备份的原始系统命令让chkrootkit对rootkit进行检测。这个过程可以通过下面的操作实现：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Bash"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~] <span class="comment"># mkdir /usr/share/.commands</span></span><br><span class="line">[root@server ~] <span class="comment"># cp `which --skip-alias awk cut echo find egrep id head ls netstat ps strings sed uname` /usr/share/.commands</span></span><br><span class="line">[root@server ~] <span class="comment"># /usr/local/chkrootkit/chkrootkit -p /usr/share/.commands/</span></span><br><span class="line">[root@server share] <span class="comment"># cd /usr/share/</span></span><br><span class="line">[root@server share] <span class="comment"># tar zcvf commands.tar.gz .commands</span></span><br><span class="line">[root@server share] <span class="comment">#  rm -rf commands.tar.gz</span></span><br></pre></td></tr></table></figure></div><p>上面这段操作是在/usr/share/下建立了一个.commands隐藏文件，然后将chkrootkit使用的系统命令进行备份到这个目录下。为了安全起见，可以将.commands目录压缩打包，然后下载到一个安全的地方进行备份，以后如果服务器遭受入侵，就可以将这个备份上传到服务器任意路径下，然后通过chkrootkit命令的”-p”参数指定这个路径进行检测即可。</p><h6 id="rootkit后门检测工具RKHunter"><a href="#rootkit后门检测工具RKHunter" class="headerlink" title="rootkit后门检测工具RKHunter"></a>rootkit后门检测工具RKHunter</h6><p>RKHunter是一款专业的检测系统是否感染rootkit的工具，它通过执行一系列的脚本来确认服务器是否已经感染rootkit。在官方的资料中，RKHunter可以作的事情有：</p><ol><li>MD5校验测试，检测文件是否有改动</li><li>检测rootkit使用的二进制和系统工具文件</li><li>检测特洛伊木马程序的特征码</li><li>检测常用程序的文件属性是否异常</li><li>检测系统相关的测试</li><li>检测隐藏文件</li><li>检测可疑的核心模块LKM</li><li>检测系统已启动的监听端口</li><li>下面详细讲述下RKHunter的安装与使用。</li></ol><h6 id="下面详细讲述下RKHunter的安装与使用。"><a href="#下面详细讲述下RKHunter的安装与使用。" class="headerlink" title="下面详细讲述下RKHunter的安装与使用。"></a>下面详细讲述下RKHunter的安装与使用。</h6><ol><li>安装RKHunter</li></ol><p>RKHunter的官方网页地址为：<a href="http://www.rootkit.nl/projects/rootkit_hunter.html">http://www.rootkit.nl/projects/rootkit_hunter.html</a> 建议从这个网站下载RKHunter，这里下载的版本是rkhunter-1.4.0.tar.gz。RKHunter的安装非常简单，过程如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Bash"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~] <span class="comment"># ls</span></span><br><span class="line">rkhunter-1.4.0. tar .gz</span><br><span class="line">[root@server ~] <span class="comment"># pwd</span></span><br><span class="line">/root</span><br><span class="line">[root@server ~] <span class="comment"># tar -zxvf rkhunter-1.4.0.tar.gz </span></span><br><span class="line">[root@server ~] <span class="comment"># cd rkhunter-1.4.0</span></span><br><span class="line">[root@server rkhunter-1.4.0] <span class="comment"># ./installer.sh  --layout default --install</span></span><br></pre></td></tr></table></figure></div><p>这里采用RKHunter的默认安装方式，rkhunter命令被安装到了/usr/local/bin目录下。<br>使用rkhunter指令</p><p>rkhunter命令的参数较多，但是使用非常简单，直接运行rkhunter即可显示此命令的用法。下面简单介绍下rkhunter常用的几个参数选项。</p><p>[root@server ~]#/usr/local/bin/rkhunter–help</p><p>Rkhunter常用参数以及含义如下所示：</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>–c, –check</td><td>必选参数，表示检测当前系统</td></tr><tr><td>–configfile<file></td><td>使用特定的配置文件</td></tr><tr><td>–cronjob</td><td>作为cron任务定期运行</td></tr><tr><td>–sk, –skip-keypress</td><td>自动完成所有检测，跳过键盘输入</td></tr><tr><td>–summary</td><td>显示检测结果的统计信息</td></tr><tr><td>–update</td><td>检测更新内容</td></tr><tr><td>-v, –version</td><td>显示版本信息</td></tr><tr><td>–versioncheck</td><td>检测最新版本</td></tr></tbody></table><p>下面是通过rkhunter对某个系统的检测示例：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Bash"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">[root@server rkhunter-1.4.0] <span class="comment"># /usr/local/bin/rkhunter   -c </span></span><br><span class="line">[ Rootkit Hunter version 1.4.0 ]</span><br><span class="line"><span class="comment"># 下面是第一部分，先进行系统命令的检查，主要是检测系统的二进制文件，因为这些文件最容易被rootkit攻击。显示OK字样表示正常，显示Warning表示有异常，需要引起注意，而显示“Not found”字样，一般无需理会</span></span><br><span class="line">Checking system commands...</span><br><span class="line">   Performing  <span class="string">&#x27;strings&#x27;</span>  <span class="built_in">command</span>  checks</span><br><span class="line">     Checking  <span class="string">&#x27;strings&#x27;</span>  <span class="built_in">command</span>                            [ OK ]</span><br><span class="line">   Performing  <span class="string">&#x27;shared libraries&#x27;</span>  checks</span><br><span class="line">     Checking  <span class="keyword">for</span>  preloading variables                        [ None found ]</span><br><span class="line">     Checking  <span class="keyword">for</span>  preloaded libraries                         [ None found ]</span><br><span class="line">     Checking LD_LIBRARY_PATH variable                 [ Not found ]</span><br><span class="line">   Performing  file  properties checks</span><br><span class="line">     Checking  <span class="keyword">for</span>  prerequisites                              [ Warning ]</span><br><span class="line">     /usr/<span class="built_in">local</span>/bin/rkhunter   [ OK ]</span><br><span class="line">     /sbin/chkconfig                                        [ OK ]</span><br><span class="line">....(略)....</span><br><span class="line">[Press &lt;ENTER&gt; to  <span class="built_in">continue</span> ]</span><br><span class="line"><span class="comment"># 下面是第二部分，主要检测常见的rootkit程序，显示“Not found”表示系统未感染此rootkit</span></span><br><span class="line">Checking  <span class="keyword">for</span>  rootkits...</span><br><span class="line">   Performing check of known rootkit files and directories</span><br><span class="line">     55808 Trojan - Variant A                                 [ Not found ]</span><br><span class="line">     ADM Worm                                           [ Not found ]</span><br><span class="line">     AjaKit Rootkit                                         [ Not found ]</span><br><span class="line">     Adore Rootkit                                          [ Not found ]</span><br><span class="line">aPa Kit                                               [ Not found ]</span><br><span class="line">     Apache Worm                                          [ Not found ]</span><br><span class="line">     Ambient (ark) Rootkit                                    [ Not found ]</span><br><span class="line">     Balaur Rootkit           [ Not found ]</span><br><span class="line">     BeastKit Rootkit                                         [ Not found ]</span><br><span class="line">beX2 Rootkit                                             [ Not found ]</span><br><span class="line">     BOBKit Rootkit                    [ Not found ]</span><br><span class="line">....(略)....</span><br><span class="line">[Press &lt;ENTER&gt; to  <span class="built_in">continue</span> ]</span><br><span class="line"><span class="comment"># 下面是第三部分，主要是一些特殊或附加的检测，例如对rootkit文件或目录检测、对恶意软件检测以及对指定的内核模块检测</span></span><br><span class="line">   Performing additional rootkit checks</span><br><span class="line">     Suckit Rookit additional checks                          [ OK ]</span><br><span class="line">     Checking  <span class="keyword">for</span>  possible rootkit files and directories      [ None found ]</span><br><span class="line">     Checking  <span class="keyword">for</span>  possible rootkit strings                    [ None found ]</span><br><span class="line">   Performing malware checks</span><br><span class="line">     Checking running processes  <span class="keyword">for</span>  suspicious files          [ None found ]</span><br><span class="line">     Checking  <span class="keyword">for</span>  login backdoors                          [ None found ]</span><br><span class="line">     Checking  <span class="keyword">for</span>  suspicious directories                     [ None found ]</span><br><span class="line">     Checking  <span class="keyword">for</span>  sniffer <span class="built_in">log</span> files                          [ None found ]</span><br><span class="line">   Performing Linux specific checks</span><br><span class="line">     Checking loaded kernel modules                     [ OK ]</span><br><span class="line">     Checking kernel module names                     [ OK ]</span><br><span class="line">[Press &lt;ENTER&gt; to  <span class="built_in">continue</span> ]</span><br><span class="line"><span class="comment"># 下面是第四部分，主要对网络、系统端口、系统启动文件、系统用户和组配置、SSH配置、文件系统等进行检测</span></span><br><span class="line">Checking the network...</span><br><span class="line">   Performing checks on the network ports</span><br><span class="line">     Checking  <span class="keyword">for</span>  backdoor ports                         [ None found ]</span><br><span class="line">   Performing checks on the network interfaces</span><br><span class="line">     Checking  <span class="keyword">for</span>  promiscuous interfaces                      [ None found ]</span><br><span class="line">Checking the  <span class="built_in">local</span>  host...</span><br><span class="line">   Performing system boot checks</span><br><span class="line">     Checking  <span class="keyword">for</span>  <span class="built_in">local</span>  host name                         [ Found ]</span><br><span class="line">     Checking  <span class="keyword">for</span>  system startup files                        [ Found ]</span><br><span class="line">     Checking system startup files  <span class="keyword">for</span>  malware                [ None found ]</span><br><span class="line">   Performing group and account checks</span><br><span class="line">     Checking  <span class="keyword">for</span>  passwd  file  [ Found ]</span><br><span class="line">     Checking  <span class="keyword">for</span>  root equivalent (UID 0) accounts            [ None found ]</span><br><span class="line">     Checking  <span class="keyword">for</span>  passwordless accounts                   [ None found ]</span><br><span class="line">....(略)....</span><br><span class="line">[Press &lt;ENTER&gt; to  <span class="built_in">continue</span> ]</span><br><span class="line"><span class="comment"># 下面是第五部分，主要是对应用程序版本进行检测</span></span><br><span class="line">Checking application versions...</span><br><span class="line">     Checking version of GnuPG[ OK ]</span><br><span class="line">     Checking version of OpenSSL                        [ Warning ]</span><br><span class="line">     Checking version of OpenSSH                        [ OK ]</span><br><span class="line"><span class="comment"># 下面是最后一部分，这个部分其实是上面输出的一个总结，通过这个总结，可以大概了解服务器目录的安全状态。</span></span><br><span class="line">System checks summary</span><br><span class="line">=====================</span><br><span class="line">File properties checks...</span><br><span class="line">     Required commands check failed</span><br><span class="line">     Files checked: 137</span><br><span class="line">     Suspect files: 4</span><br><span class="line">Rootkit checks...</span><br><span class="line">     Rootkits checked : 311</span><br><span class="line">     Possible rootkits: 0</span><br><span class="line">Applications checks...</span><br><span class="line">     Applications checked: 3</span><br><span class="line">     Suspect applications: 1</span><br><span class="line">The system checks took: 6 minutes and 41 seconds</span><br></pre></td></tr></table></figure></div><p>在Linux终端使用rkhunter来检测，最大的好处在于每项的检测结果都有不同的颜色显示，如果是绿色的表示没有问题，如果是红色的，那就要引起关注了。另外，在上面执行检测的过程中，在每个部分检测完成后，需要以Enter键来继续。如果要让程序自动运行，可以执行如下命令：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Bash"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~]<span class="comment"># /usr/local/bin/rkhunter --check --skip-keypress </span></span><br></pre></td></tr></table></figure></div><p>同时，如果想让检测程序每天定时运行，那么可以在/etc/crontab中加入如下内容：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Bash"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">30 09 * * * root /usr/<span class="built_in">local</span>/bin/rkhunter --check --cronjob </span><br></pre></td></tr></table></figure></div><p>这样，rkhunter检测程序就会在每天的9:30分运行一次。</p><h4 id="第三种：防火墙软件"><a href="#第三种：防火墙软件" class="headerlink" title="第三种：防火墙软件"></a>第三种：防火墙软件</h4><h5 id="第一个-windows自带防火墙"><a href="#第一个-windows自带防火墙" class="headerlink" title="第一个,windows自带防火墙"></a>第一个,windows自带防火墙</h5><p>windows自带的防火墙<strong>windows Defender</strong>，在 <strong><em>控制面板\系统和安全\Windows <em>Defender 防火墙</em></em></strong> 中，开启即可。但是默认是开启的，反正检查一下看看有没有开启，有些软件可以关闭防火墙，检查一下就对了！</p><h5 id="第二个-360家庭防火墙"><a href="#第二个-360家庭防火墙" class="headerlink" title="第二个:360家庭防火墙"></a>第二个:360家庭防火墙</h5><p>没错，又是360，个人认为360的防火墙还可以，下载独立版的就好了，连接一下云大脑，简直是浪的飞起，虽然并没有什么卵用，定时检查一下端口就好了，我这种前端开发的，看的就是端口，wifi的近期使用情况，谁在用wifi，什么手机，电脑在用，看的就是这个，所以这个防火墙很好的解决了我的问题，自然我就推荐了。主要是我们这些开发者使用，推荐一下。</p><h5 id="第三个：GlassWire"><a href="#第三个：GlassWire" class="headerlink" title="第三个：GlassWire"></a>第三个：GlassWire</h5><p>&emsp;&emsp;GlassWire是windows下的一款软件，对windows的，界面很美观，很简洁就像这样 <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ydWFuZmEtcHJvZC5vc3MtY24tc2hhbmdoYWkuYWxpeXVuY3MuY29tL2ZhbnJ1YW4vaW1hZ2UvMjAyMC80LzI1LzYyYTY1MTljLTQ0OWEtNDZmNi04OGJjLTRjYzcxMWEyYzYwZS5wbmc?x-oss-process=image/format,png" alt="image">这是切换中文的图片。你不会想到这是windows下的软件，它太简洁了！所以我强推这款软件，一个字”好！”</p><h5 id="第四个：Firewall-App-Blocker"><a href="#第四个：Firewall-App-Blocker" class="headerlink" title="第四个：Firewall App Blocker"></a>第四个：Firewall App Blocker</h5><p>Firewall App Blocker 超级简单易用的bai限制软件访问网络的防火墙：</p><p>&emsp;&emsp;对于大多数用户，Windows自带的防火墙虽然实用但并没有好好利用起来，主要是因为设置略显繁琐。使用 Firewall App Blocker (Fab) 来禁止应用联网变得超级简单方便。用户只需将需要限制的应用程序添加到软件的列表里即可，勾选状态下为禁止联网，取消勾选可以临时允许联网，就是这么简单。<br> <img src="https://iknow-pic.cdn.bcebos.com/f2deb48f8c5494ee99e71c2428f5e0fe98257ec1?x-bce-process=image/resize,m_lfit,w_600,h_800,limit_1" alt="image"></p><p> 这个软件很好用的，它最大的好处是解决了Windows自带防火墙的难用问题。也推荐。但是界面没有GlassWire那么好看。</p><p> 也许你会说：“为什么只有windows的软件？MAC的去哪里了？”我的回答是，你也不自己去数落数落MAC的防御力，不说是木马了，来个顶级黑客攻进去也要费很多时间！至于Linux的，或许你已经看过了，就不用我来说了，如果你想秀技术，来个反黑客我没意见。如果你真的黑成功了，那你可以做什么呢？等着网警来找你？不要无罪变有罪了。“那么这么多软件，要怎么下载呢？”给出<a href="https://wws.lanzous.com/b01no1xle">网址</a>你认为我会告诉你密码吗？想知道密码？很容易，发邮件到我的邮箱里<a href="mailto:&#x33;&#50;&#50;&#x35;&#52;&#x35;&#52;&#x37;&#52;&#55;&#64;&#113;&#x71;&#x2e;&#99;&#111;&#109;">&#x33;&#50;&#50;&#x35;&#52;&#x35;&#52;&#x37;&#52;&#55;&#64;&#113;&#x71;&#x2e;&#99;&#111;&#109;</a>关键字：密码是啥？或者陈殇好帅。都可以。</p><h4 id="做后一种方法"><a href="#做后一种方法" class="headerlink" title="做后一种方法"></a>做后一种方法</h4><h5 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h5><p> 这个方法很绕，如果实在是听不下去就别听了（博主的衷心劝告），最后一种方法是反黑客后门软件，前言不多说，直接进入正题</p><h5 id="正题"><a href="#正题" class="headerlink" title="正题"></a>正题</h5><p> 马上进入正题！</p><h6 id="了解什么是后门程序"><a href="#了解什么是后门程序" class="headerlink" title="了解什么是后门程序"></a>了解什么是后门程序</h6><p> &emsp;&emsp;后门程序是指那些绕过安全性控制而获取对程序或系统访问权的程序方法。一般在软件开发时，程序员会在软件中创建后门程序，这样就可以修改程序设计中的缺陷。但是，如果这些后门被其他人知道，或是在发布软件之前没有删除后门程序，那么它就成了安全风险，容易被黑客当成漏洞进行攻击。通俗的讲，后门程序就是留在计算机系统中，供某位特殊使用者通过某种特殊方式控制计算机系统的途径。</p><h6 id="一、远程控制的两个通性"><a href="#一、远程控制的两个通性" class="headerlink" title="一、远程控制的两个通性"></a>一、远程控制的两个通性</h6><p><b>（1）任何一款的远程控制技术都必须与目标（被控端）建立至少一个TCP或者UPD连接。如果黑客未上线，则会每隔30秒向黑客发起连接请求。</p><p>（2）任何一款远控木马都会向系统写入至少一个随机启动项、服务启动项，或者劫持某个系统必备的正常启动项。并且会在某个目录中隐、释放木马。以方便随机启动。</p><h6 id="二、基于远控通性反远程控制法——两条命令判断是否被控制"><a href="#二、基于远控通性反远程控制法——两条命令判断是否被控制" class="headerlink" title="二、基于远控通性反远程控制法——两条命令判断是否被控制"></a>二、基于远控通性反远程控制法——两条命令判断是否被控制</h6><ol><li><p>最简单的方法就是通过两条命令，一条是“netstat “ 。另一条就是“tasklist “命令，这两条命令可真为是绝配的反黑客远控的方法啊。首先我们就在虚拟机中测试，在本机使用灰鸽子主控端生成一个木马放入到虚拟机中运行。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Bash"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat <span class="comment"># 在cmd,powershell,Git等终端中运行，直接监听端口</span></span><br><span class="line">tasklist <span class="comment"># 查看所有程序的占用端口</span></span><br></pre></td></tr></table></figure></div></li><li><p>确认虚拟机已经中了我们的远控木马之后我们开始执行第一条命令，首先大家先在联网的情况，把所有联网的程序都关闭，包括杀毒软件、QQ、迅雷、等存在联网的程序关闭，保存最原始的进程。这样很方便我们识别。再次打开开始菜单——运行——输入“cmd”。进入到黑色的DOS窗口下，输入命令“netstat -ano“。这条命令的意思是查看当前网络的连接状态。输入之后我们查看中主要看”state”的状态，如果是“listenning”是端口的监听这个可以放心，如果是“ESTABLISHED”可要注意了，这个状态意思是正在连接！我们肯定会想，我们都没开任何程序在联网，何来正在与远程主机连接呢？下面是中了远程控制木马的虚拟机中网络连接状态。</p></li><li><p>此时捕捉到正在连接的状态的最后一行PID值为：3920，这就是我们说的远控至少与目标建立一个TCP或UDP连接，而这里建立了一个TCP连接，并且仔细看下，“Foregin Address”意思是外网地址，这个IP地址可以百度进行查询下就可以知道是哪个地区的人在控制我们的电脑，再仔细看下IP地址后面的端口为：8000，现在很多主流的远程软件都是8000或者80端口，这又更值得怀疑了。这样我们就可以查看进程，因为木马要想进行连接就必定会在内存中进行运行，否则就无法进行连接了，我们查看内存中可疑的进程，上面捕获的连接PID为：3920。我们输入命令“tasklist /svc“这条命令是查看当前进程与PID值和启动的服务。</p></li><li><p>通过上面的命令找到了网络连接对应的PID值进程3920，并且发现该进程名是一个IE的进程，很明显这就有问题，因为我们根本没打开浏览器，何来IE进程呢？果断的就知道它的一个远程控制木马伪装的进程。我们应该马上去进行一个查杀掉该进程，从内存中干掉它。我们输入命令“taskkill /f /pid 3920”  这条命令是强制结束PID值为3920的进程。当我们强制结束掉了木马之后发现主控端远程控制软件上的肉鸡马上就下线了。这样黑客就无法进行控制了。</p></li><li><p>在这里说明，我们只是暂时现在已经让黑客无法控制我们的电脑，结束了它的远程控制的连接程序。但是我们要知道远程控制的第二个通性，就是远程控制软件为了让对方能够重启系统后继续在黑客的远控软件上面上线，就必须会在被控者的电脑上写入一个随机启动项，这个随机启动项就是当系统启动的时候立马运行木马，运行了木马就可以再次上线。所以我们还需要检测我们的启动项。很多启动项都是写入注册表的，我们这里给大家列出一些木马可能写入的启动键值。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Vb"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run</span><br><span class="line">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run</span><br><span class="line">HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunOnce</span><br><span class="line">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnceEx</span><br><span class="line">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon  下的shell键值</span><br><span class="line">HKEY_CURRENT_USER\Software\Microsoft\Windows NT\CurrentVersion\Windows  下的load键值</span><br></pre></td></tr></table></figure></div></li><li><p>在CMD下切换到该目录下进程一个强制删除吧，切换到目录后输入命令“del  /ah /f svchot.exe “ 就可以强制删除隐藏的木马了。</p></li><li><p>此时我们把隐藏的以服务启动的木马干掉了，你可以去停止服务，或者通过sc delete <servicesname>去删除服务，这里就不多讲了，因为服务启动的木马已经被干掉了，即使服务存在也无法找到启动程序了。我们这里将虚拟机重启下，再查看下网络连接是否还会与黑客建立TCP远程控制连接呢？</p></b></li></ol><h6 id="三、基于远控的通性反黑客远程控制法——两个软件判断是否存在后门"><a href="#三、基于远控的通性反黑客远程控制法——两个软件判断是否存在后门" class="headerlink" title="三、基于远控的通性反黑客远程控制法——两个软件判断是否存在后门"></a>三、基于远控的通性反黑客远程控制法——两个软件判断是否存在后门</h6><ol><li>这两个工具分别是icesword（中文：冰刃）和SSM软件。第一个软件主要是应对一些DLL进程注入或者是存在Rootkit的木马，所谓的Rootkit就是隐藏的意思，这样的木马有隐藏网络连接状态、隐藏进程的功能。但是使用iceword查看就能查看到这种内核级隐藏的木马。例如下面就是GHOST木马的DLL注入，它是通过DLL注入到svchost.exe进程的，从icesword就可以找到可疑的dll模块。<br><br>并且大家都说”Svchost.exe“如果与外界的IP连接就肯定是被控制了，这是有道理的。因为现在的远控比如ghost、白金远控就是会有这种现象就是DLL注入到“svhochst.exe“进程进行控制的，所以会有连接，一般来说“svchost.exe“除了在微软更新的时候可能存在与美国IP的连接，但是其它时候都不会存在与外界进行IP连接的。通过360的网络连接就可以直接看的出来。<br><br>icesword里面的进程都是黑色显示的，如果出现有红色的进程，一般都是运用了内核级的rootkit技术的木马。这样的木马通过任务管理器或者tasklist /svc 一般都是查看不到进程的，但是用冰刃却可以很快的查看到。</li><li>icesword的软件很强大这里就不多说了，上面已经举例说了。下面说下SSM工具的使用，首先我先在虚拟机里面安装下这个软件吧。并且开启这个软件，开启这个软件后只要我们运行任何一个程序都会报警说明软件执行了什么动作！这里我们将一个灰鸽子远控木马拷贝进到我们的虚拟机，当我们点击远控木马的时候SSM马上就报警了，提示程序启动，这个动作是正常的，因为该程序需要explorer图形化程序进程启动的。</li><li>当我们运行之后会发现，这时候程序突然来了一个注册表修改的动作，懂注册表的都知道这个就是向HKLC\System\CurretcontrolSet\services里面写入服务。这个就不太正常了，不是安装什么程序，一个简单的程序居然写入服务，增加服务，可疑！</li><li>当我们允许此次操作的时候，你会发现不停的会向注册表写入服务键值，这个肯定就是个可疑的动作，最后发现木马又释放了程序到系统目录。照理说一个执行程序不会随意释放程序到系统目录，可疑！</li><li>此允许发现最后一步又有一个进程尝试注入到IE里面进行以IE后台启动木马，很明显就能分析出就是个可疑的木马程序，很可能就是后门木马，它有写入服务的这一通性！通过SSM的拦截程序动作就可以分析一个程序是不是绑有后门木马。<br>以上就是我分享的反黑客教程，希望可以帮助你😉</li></ol>]]></content>
      
      
      <categories>
          
          <category> Toss Note </category>
          
          <category> Linux </category>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从Linux内核理解JAVA的NIO</title>
      <link href="2020/12/26/%E4%BB%8ELinux%E5%86%85%E6%A0%B8%E7%90%86%E8%A7%A3JAVA%E7%9A%84NIO/"/>
      <url>2020/12/26/%E4%BB%8ELinux%E5%86%85%E6%A0%B8%E7%90%86%E8%A7%A3JAVA%E7%9A%84NIO/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>IO 可以简单分为<code>磁盘 IO</code> 和 <code>网络 IO</code> ,<code>磁盘 IO</code> 相对于<code>网络 IO</code> 速度会快一点，本文主要介绍 <code>磁盘 IO</code> ，<code>网络 IO</code> 下周写。</p><p>JAVA 对  <code>NIO</code> 抽象为 <code>Channel</code> , <code>Channel</code> 又可以分为 <code>FileChannel</code> （磁盘 io）和 <code>SocketChannel</code> （网络 io）。</p><p>如果你对 IO 的理解只是停留在 api 层面那是远远不够的，一定要了解 IO 在系统层面是怎么处理的。</p><p>本文内容：</p><li>FileChannel 读写复制文件的用法。</li><li>ByteBuffer 的介绍</li><li>jvm 文件进程锁，FileLock</li><li>HeapByteBuffer ，DirectByteBuffer 和 mmap 谁的速度更快</li><li>从 <code>Linux 内核</code> 中的 <code>虚拟内存</code> 、<code>系统调用</code>、<code>文件描述符</code>、<code>Inode</code>、<code>Page Cache</code> 、<code>缺页异常</code>讲述整个 IO 的过程</li><li>jvm 堆外的 DirectByteBuffer 的内存怎么回收</li><p><img src="https://upimage.alexhchu.com/2021/01/25/a27c9234cfee1.png" alt="image-20200711165857889"></p><blockquote><p>本文计算机系统相关的图全部来自 《深入理解计算机系统》</p></blockquote><p>对 Linux 的了解都是来自书上和查阅资料，本文内容主要是我自己的理解和代码验证，有的描述不一定准确，重在理解过程即可。</p><h1 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h1><p><code>NIO</code> 是 从 Java 1.4 开始引入的，被称之为 Non Blocking IO，也有称之为 New IO。</p><p>NIO 抽象为 <code>Channel</code> 是面向缓冲区的（操作的是一块数据），非阻塞 IO。</p><p><code>Channel</code> 只负责传输，数据由 <code>Buffer</code> 负责存储。</p><p><code>NIO</code> 是 从 Java 1.4 开始引入的，被称之为 Non Blocking IO，也有称之为 New IO。</p><p>NIO 抽象为 <code>Channel</code> 是面向缓冲区的（操作的是一块数据），非阻塞 IO。</p><p><code>Channel</code> 只负责传输，数据由 <code>Buffer</code> 负责存储。</p><h2 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h2><p><code>Buffer</code> 中的 <code>capacity</code>、<code>limit</code> 和 <code>position</code> 属性是比较重要的，这些弄不明白，读写文件会遇到很多坑。</p><p><code>capacity</code> 标识 <code>Buffer</code> 最大数据容量，相等于一个数组的长度。</p><p><code>limit</code> 为一个指针，标识当前数组可操作的数据的最大索引。</p><p> <code>position</code> 表示为下一个读取数据时的索引</p><p><img src="https://upimage.alexhchu.com/2020/11/20/369ca8961b3b5.png" alt="images-20200711202515"></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span> </span>&#123; </span><br><span class="line">  <span class="comment">// `DirectByteBuffer` </span></span><br><span class="line">  <span class="keyword">final</span> ByteBuffer byteBuffer = ByteBuffer.allocateDirect(<span class="number">1024</span>);</span><br><span class="line">   <span class="comment">// `HeapByteBuffer` </span></span><br><span class="line">  <span class="keyword">final</span> ByteBuffer allocate = ByteBuffer.allocate(<span class="number">1024</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>HeapByteBuffer</code> 会分配在 <code>Jvm堆内</code>，受 JVM 堆大小的限制，创建速度快，但是读写速度慢。实际底层是一个字节数组。</p><p><code>DirectByteBuffer</code> 会分配 <code>Jvm 堆外</code>，不受 JVM 堆大小的限制，创建速度慢，读写快。<code>DirectByteBuffer</code> 内存在 Linux 中，属于进程的堆内。<code>DirectByteBuffer</code> 受 jvm 参数 <code>MaxDirectMemorySize</code> 的影响。</p><p>设置 jvm 堆 100m，运行程序报错 <code>Exception in thread "main" java.lang.OutOfMemoryError: Java heap space</code>。因为指定了 jvm 堆为 100m，然后一些 class 文件也会放在 堆中的，实际堆内存时不足 100m,当申请 100m 堆内存只能报错了。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferNio</span> </span>&#123; </span><br><span class="line">  <span class="comment">// -Xmx100m </span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123; </span><br><span class="line">    <span class="comment">// HeapByteBuffer 是 jvm 堆内，因为堆不足分配 100m(java 中的一些 class 也会占用堆)，导致 oom </span></span><br><span class="line">    System.out.println(<span class="string">&quot;申请 100 m `HeapByteBuffer`&quot;</span>); </span><br><span class="line">    Thread.sleep(<span class="number">5000</span>); </span><br><span class="line">    ByteBuffer.allocate(<span class="number">100</span> * <span class="number">1024</span> * <span class="number">1024</span>); </span><br><span class="line">  &#125;; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><p>设置 jvm 堆为 100m，MaxDirectMemorySize 为 1g，死循环创建 <code>DirectByteBuffer</code>，打印 10 次 <code>申请 directbuffer 成功</code>，报错 <code>Exception in thread "main" java.lang.OutOfMemoryError: Direct buffer memory</code>，后面再说这个堆外的 <code>DirectByteBuffer</code> 怎么进行回收。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferNio</span> </span>&#123; </span><br><span class="line">  <span class="comment">// -Xmx100m -XX:MaxDirectMemorySize=1g </span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123; </span><br><span class="line">    System.out.println(<span class="string">&quot;申请 100 m DirectByteBuffer&quot;</span>); </span><br><span class="line">    <span class="keyword">final</span> ArrayList&lt;Object&gt; objects = <span class="keyword">new</span> ArrayList&lt;&gt;(); </span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123; </span><br><span class="line">      <span class="comment">// DirectByteBuffer 不在 jvm 堆内，所以可以申请成功，但是不是无限制的，也有限制（MaxDirectMemorySize） </span></span><br><span class="line">      <span class="keyword">final</span> ByteBuffer byteBuffer = ByteBuffer.allocateDirect(<span class="number">100</span> * <span class="number">1024</span> * <span class="number">1024</span>); objects.add(byteBuffer); System.out.println(<span class="string">&quot;申请 directbuffer 成功&quot;</span>); </span><br><span class="line"></span><br><span class="line">System.out.println(ManagementFactory.getMemoryMXBean().getHeapMemoryUsage()); </span><br><span class="line">System.out.println(ManagementFactory.getMemoryMXBean().getNonHeapMemoryUsage()); </span><br><span class="line">    &#125;; </span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><h2 id="FileChannel"><a href="#FileChannel" class="headerlink" title="FileChannel"></a>FileChannel</h2><h2 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123; <span class="keyword">final</span> Path path = Paths.get(FILE_NAME); </span><br><span class="line"><span class="comment">// 创建一个 FileChannel,指定这个 channel 读写的权限 </span></span><br><span class="line">  <span class="keyword">final</span> FileChannel open = FileChannel.open(path, StandardOpenOption.READ); </span><br><span class="line">  <span class="comment">// 创建一个和这个文件大小一样的 buffer，小文件可以这样，大文件，循环读 </span></span><br><span class="line">  <span class="keyword">final</span> ByteBuffer allocate = ByteBuffer.allocate((<span class="keyword">int</span>) open.size()); open.read(allocate); open.close(); </span><br><span class="line">  <span class="comment">// 切换为读模式，position=0 </span></span><br><span class="line">  allocate.flip(); </span><br><span class="line">  <span class="comment">// 用 UTF-8 解码 </span></span><br><span class="line">  <span class="keyword">final</span> CharBuffer decode = StandardCharsets.UTF_8.decode(allocate); </span><br><span class="line">  System.out.println(decode.toString()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  <span class="comment">// 通道具有写权限，create 标识文件不存在的时候创建 </span></span><br><span class="line">  <span class="keyword">final</span> FileChannel open = FileChannel.open(path, StandardOpenOption.WRITE, StandardOpenOption.CREATE); </span><br><span class="line">  <span class="keyword">final</span> ByteBuffer allocate = ByteBuffer.allocate(<span class="number">1024</span>); </span><br><span class="line">  allocate.put(<span class="string">&quot;ChenShang aaaaa-1111111&quot;</span>.getBytes(StandardCharsets.UTF_8)); </span><br><span class="line">  <span class="comment">// 切换写模式，position=0 </span></span><br><span class="line">  allocate.flip(); </span><br><span class="line">  open.write(allocate); </span><br><span class="line">  open.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="CV大法！"><a href="#CV大法！" class="headerlink" title="CV大法！"></a>CV大法！</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123; </span><br><span class="line">  <span class="keyword">final</span> Path srcPath = Paths.get(FILE_NAME); <span class="keyword">final</span> Path destPath = Paths.get(<span class="string">&quot;demo&quot;</span> + FILE_NAME); </span><br><span class="line">  <span class="keyword">final</span> FileChannel srcChannel = FileChannel.open(srcPath, StandardOpenOption.READ); </span><br><span class="line">  <span class="keyword">final</span> FileChannel destChannel = FileChannel.open(destPath, StandardOpenOption.WRITE, StandardOpenOption.CREATE); </span><br><span class="line">  <span class="comment">// transferTo 实现类中，用的是一个 8M MappedByteBuffer 做数据的 copy ,但是这个方法只能 copy 文件最大字节数为 Integer.MAX </span></span><br><span class="line">  srcChannel.transferTo(<span class="number">0</span>, srcChannel.size(), destChannel); </span><br><span class="line">  destChannel.close(); </span><br><span class="line">  srcChannel.close(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="FileLock"><a href="#FileLock" class="headerlink" title="FileLock"></a>FileLock</h2><p><code>FileLcok</code> 是 jvm 进程文件锁，在多个 jvm 进程间生效，进程享有文件的读写权限，有共享锁 和 独占锁。</p><p>同一个进程不能锁同一个文件的重复区域，不重复是可以锁的。</p><p>同一个进程中第一个线程锁文件的 （0，2），同时另一个线程锁（1，2），文件锁的区域有重复，程序会报错。</p><p>一个进程锁（0，2），另一个进程锁（1，2）这是可以的，因为 <code>FileLock</code> 是 JVM 进程锁。</p><p>运行下面程序两次，打印结果为</p><p>第一个程序顺利打印</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Text"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">获取到锁0-3,代码没有被阻塞</span><br><span class="line">获取到锁4-7,代码没有被阻塞</span><br></pre></td></tr></table></figure></div><p>第二个程序打印</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">获取到锁4-7,代码没有被阻塞</span><br><span class="line">获取到锁0-3,代码没有被阻塞</span><br></pre></td></tr></table></figure></div><p>第一个程序运行的时候，<code>file_lock.txt</code> 的 0-2 位置被锁住了，第一个程序持有锁 10 s,第二个程序运行的时候，会在这里阻塞等待 <code>FileLock</code>，直到第一个程序释放了锁。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileLock</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123; </span><br><span class="line">    <span class="keyword">final</span> Path path = Paths.get(<span class="string">&quot;file_lock.txt&quot;</span>); </span><br><span class="line">    <span class="keyword">final</span> FileChannel open = FileChannel.open(path, StandardOpenOption.WRITE, StandardOpenOption.READ); </span><br><span class="line">    <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">2</span>); <span class="keyword">new</span> Thread(() -&gt; &#123; </span><br><span class="line">      <span class="keyword">try</span> (<span class="keyword">final</span> java.nio.channels.FileLock lock = open.lock(<span class="number">0</span>, <span class="number">3</span>, <span class="keyword">false</span>)) &#123; </span><br><span class="line">        System.out.println(<span class="string">&quot;获取到锁0-3,代码没有被阻塞&quot;</span>); </span><br><span class="line">        Thread.sleep(<span class="number">10000</span>); <span class="keyword">final</span> ByteBuffer wrap = ByteBuffer.wrap(<span class="string">&quot;aaa&quot;</span>.getBytes()); </span><br><span class="line">        open.position(<span class="number">0</span>); open.write(wrap); Thread.sleep(<span class="number">10000</span>); &#125; <span class="keyword">catch</span> (IOException | InterruptedException e) &#123; </span><br><span class="line">          e.printStackTrace(); &#125; <span class="keyword">finally</span> &#123; countDownLatch.countDown(); </span><br><span class="line">          &#125; &#125;);</span><br><span class="line">          .start(); </span><br><span class="line">          Thread.sleep(<span class="number">1000</span>); </span><br><span class="line">          <span class="keyword">new</span> Thread(() -&gt; &#123; </span><br><span class="line">            <span class="keyword">try</span> (<span class="keyword">final</span> java.nio.channels.FileLock lock = open.lock(<span class="number">4</span>, <span class="number">3</span>, <span class="keyword">false</span>)) &#123; </span><br><span class="line">              System.out.println(<span class="string">&quot;获取到锁4-7,代码没有被阻塞&quot;</span>); </span><br><span class="line">              <span class="keyword">final</span> ByteBuffer wrap = ByteBuffer.wrap(<span class="string">&quot;bbb&quot;</span>.getBytes()); </span><br><span class="line">              open.position(<span class="number">4</span>); open.write(wrap); </span><br><span class="line">              &#125; </span><br><span class="line">              <span class="keyword">catch</span> (IOException e) &#123; </span><br><span class="line">                e.printStackTrace(); </span><br><span class="line">              &#125; </span><br><span class="line">                <span class="keyword">finally</span> &#123; countDownLatch.countDown(); </span><br><span class="line">            &#125;;</span><br><span class="line">          &#125;);</span><br><span class="line">          .start(); </span><br><span class="line">          countDownLatch.await(); </span><br><span class="line">          open.close(); </span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><p>当将上面的程序第二个线程改为 <code>java.nio.channels.FileLock lock = open.lock(1, 3, false)</code> ，因为同一个进程不允许锁文件的重复区域，程序会报错。</p><p><code>Exception in thread "Thread-1" java.nio.channels.OverlappingFileLockException</code></p><h2 id="HeapByteBuffer-和-DirectByteBuffer-谁的读写效率高？"><a href="#HeapByteBuffer-和-DirectByteBuffer-谁的读写效率高？" class="headerlink" title="HeapByteBuffer 和 DirectByteBuffer 谁的读写效率高？"></a>HeapByteBuffer 和 DirectByteBuffer 谁的读写效率高？</h2><p><code>FileChannel</code> 的实现类 <code>FileChannelImpl</code>，当读写 <code>ByteBuffer</code> 会判断是否是 <code>DirectBuffer</code>，不是的话，会创建一个 <code>DirectBuffer</code>，将原来的的 Buffer 数据 copy 到 <code>DirectBuffer</code> 中使用。所以读写效率上来说，DirectByteBuffer 读写更快。但是 <code>DirectByteBuffer</code> 创建相对来说耗时。</p><p>尽管 <code>DirectByteBuffer</code> 是堆外，但是当堆外内存占用达到 <code>-XX:MaxDirectMemorySize</code> 的时候，也会触发 FullGC ，如果堆外没有办法回收内存，就会抛出 OOM。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面这个程序会一直执行下去，但是会触发 FullGC，来回收掉堆外的直接内存 </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferNio</span> </span>&#123; </span><br><span class="line">  <span class="comment">// -Xmx100m -XX:MaxDirectMemorySize=1g </span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123; </span><br><span class="line">    System.out.println(<span class="string">&quot;申请 100 m `HeapByteBuffer`&quot;</span>); </span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123; </span><br><span class="line">      <span class="comment">// 当前对象没有被引用，GC root 也就到达不了 DirectByteBuffer </span></span><br><span class="line">      ByteBuffer.allocateDirect(<span class="number">100</span> * <span class="number">1024</span> * <span class="number">1024</span>); </span><br><span class="line">      System.out.println(<span class="string">&quot;申请 directbuffer 成功&quot;</span>); </span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><p>死循环创建的 <code>DirectByteBuffer</code> 没有 GC ROOT 到达，对象会被回收掉，回收掉的时候，也只是回收掉堆内啊，堆外的回收怎么做到的呢？</p><p>从 <code>DirectByteBuffer</code> 源码着手，可以看到它有一个成员变量 <code>private final Cleaner cleaner;</code>，当触发 FullGC 的时候，因为 <code>cleaner</code> 没有 gc root 可达，导致 <code>cleaner</code> 会被回收，回收的时候会触发 <code>Cleaner.clean</code> <p>在Reference.tryHandlePending 触发 方法的调用，thunk 就是 <code>DirectByteBuffer.Deallocator</code> 的示例，这个 run 方法中，调用了 <code>Unsafe.freeMemory</code> 来释放掉了堆外内存. </p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cleaner</span> <span class="keyword">extends</span> <span class="title">PhantomReference</span>&lt;<span class="title">Object</span>&gt; </span>&#123; </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Runnable thunk; <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clean</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span> (remove(<span class="keyword">this</span>)) &#123; <span class="keyword">try</span> &#123; <span class="keyword">this</span>.thunk.run(); </span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">catch</span> (<span class="keyword">final</span> Throwable var2) &#123; AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Void&gt;() &#123; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Void <span class="title">run</span><span class="params">()</span> </span>&#123; </span><br><span class="line">  <span class="keyword">if</span> (System.err != <span class="keyword">null</span>) &#123; (<span class="keyword">new</span> Error(<span class="string">&quot;Cleaner terminated abnormally&quot;</span>, var2)).printStackTrace(); &#125; System.exit(<span class="number">1</span>); <span class="keyword">return</span> <span class="keyword">null</span>; </span><br><span class="line">          &#125; </span><br><span class="line">        &#125;); </span><br><span class="line">      &#125; </span><br><span class="line">    &#125; </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="内存映射"><a href="#内存映射" class="headerlink" title="内存映射"></a>内存映射</h1><p><img src="/images/20200712125658.png" alt="images - 20200712125658.png"></p><p>当应用程序读文件的时候，数据需要从先从磁盘读取到内核空间第一次读写，没有pagecache缓存数据，在从内核空间 copy 到用户空间，这样应用程序才能使用读到的数据。当一个文件的全部数据都在内核的 Page Cache 上时，就不用再从磁盘读了，直接从内核空间 copy 到用户空间去了。</p><p>应用程序对一个文件写数据时，先将要写的数据 copy 到内核 的 page cache，然后调用 fsync 将数据从内核落盘到文件上（只要调用返回成功，数据就不会丢失）。或者不调用 fsync 落盘，应用程序的数据只要写入到 内核的 pagecache 上，写入操作就算完成了，数据的落盘交由 内核 的 Io 调度程序在适当的时机来落盘（突然断电会丢数据，MySQL 这样的程序都是自己维护数据的落盘的）。</p><p>我们可以看到数据的读写总会经过从用户空间与内核空间的 copy ,如果能把这个 copy 去掉，效率就会高很多，这就是 mmap （内存映射）。将用户空间和内核空间的内存指向同一块物理内存。<code>内存映射</code> 英文为 <code>Memory Mapping</code> ,缩写 <code>mmap</code>。对应系统调用 <a href="https://man7.org/linux/man-pages/man2/mmap.2.html" target="_blank" rel="noopener" one-link-mark="yes" style="color: Green; text-decoration: / ;">mmap</a></p><p>这样在用户空间读写数据，实际操作的也是内核空间的，减少了数据的 copy 。</p><p><img src="/images/20200712145306.png" alt="images - 20200712145306.png"></p><p>怎么实现的呢，简单来说就是 linux 中进程的地址是虚拟地址，cpu 会将虚拟地址映射到物理内存的物理地址上。mmap 实际是将用户进程的某块虚拟地址与内核空间的某块虚拟地址映射到同一块物理内存上，已达到减少数据的 copy 。</p><p>用户程序调用系统调用 <code>mmap</code> 之后的数据的读写都不需要调用系统调用 <code>read</code> 和 <code>write</code> 了。</p><h2 id="虚拟内存与物理内存的映射"><a href="#虚拟内存与物理内存的映射" class="headerlink" title="虚拟内存与物理内存的映射"></a>虚拟内存与物理内存的映射</h2><p>计算机的主存可以看做是由 M 个连续字节组成的数组，每个字节都有一个唯一<code>物理地址</code> (<code>Physical Address</code>)。</p><p>Cpu 使用的 <code>虚拟寻址</code>  （<code>VA</code>,<code>Virtual Address</code>） 来查找物理地址。</p><p><img src="/images/20200711171400.png" alt="images - 20200711171400.png"> </p><p><code>CPU</code> 会将进程使用的 <code>虚拟地址</code> 通过 CPU 上的硬件 <code>内存管理单元</code> (<code>Memory Management Unit</code> <code>MMU</code>) 的进行地址翻译找到物理主存中的物理地址，从而获取数据。</p><p>当进程加载之后，系统会为进程分配一个<code>虚拟地址空间</code>，当虚拟地址空间中的某个 <code>虚拟地址</code> 被使用的时候，就会将其先映射到主存上的 <code>物理地址</code>。</p><p>当多个进程需要共享数据的时候，只需要将其虚拟地址空间中的某些虚拟地址映射相同的物理地址即可。</p><p>通常我们操作数据的时候，不会一个字节一个字节的操作，这样效率太低，通常都是连续访问某些字节。所以在内存管理的时候，将内存空间分割为页来管理，物理内存中有<code>物理页</code>（<code>Physical Page</code>），虚拟内存中有 <code>Virtual Page</code> 来管理。通常页的大小为 4KB。</p><p>系统通过 MMU 和 <code>页表（Page Table）</code> 来管理 <code>虚拟页</code> 和 <code>物理也</code> 的对应关系，页表就是页表条目（<code>Page Table Entry,PTE</code>）的数组</p><p><img src="/images/20200711183510.png" alt="images - 20200711183510.png"></p><p>PTE 的有效为1时，标识数据在内存中，标识为 0 时，标识在磁盘上。</p><p>当访问的虚拟地址对应的数据不再物理内存上时，会有两种情况处理：</p><p>1、在内存够用的时候，会直接将虚拟页对应在磁盘上的数据加载到物理内存上，</p><p>2、当内存不够用的时候，就会触发 swap,会根据 LRU 将最近使用频率比较低的虚拟页对应物理也淘汰掉，写入到磁盘中去，淘汰掉一部分物理内存中的数据，然后对对应的虚拟页设置为 0，然后将磁盘上的数据再加载到内存中去。</p><h2 id="进程的虚拟内存"><a href="#进程的虚拟内存" class="headerlink" title="进程的虚拟内存"></a>进程的虚拟内存</h2><p><code>Linux</code>  会为每个进程分配一个单独的虚拟内存地址，</p><p><img src="/images/20200711174755.png" alt="images - 20200711174755.png"></p><p>当我们的程序运行的时候，不是整个程序的代码文件一次性全部加载到内存中去，而是执行懒加载。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Text"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">机械硬盘使用扇区来管理磁盘，磁盘控制器会通过块管理磁盘，系统通过 Page Cache 与磁盘控制器打交道。 </span><br><span class="line">一个块包含多个扇区，一个页也包含多个块。 磁盘上会有一个文件对应一个 Inode，Innode 记录文件的元数据及数据所在位置。 </span><br><span class="line">当系统启动的时候，这些 Inode 数据会被加载到主存中去。不过系统中的 Inode 还记录他们对应的物理内存中的位置（实际就是对应 Page Cache）</span><br><span class="line">，有的 Inode 对应的数据没有加载到内存中，Inode 就不会记录其对应的内存地址。 </span><br><span class="line">程序执行之前会初始化其虚拟内存，虚拟内存会记录代码对应哪些 Innode。</span><br></pre></td></tr></table></figure></div><p>当执行程序的时候，系统会初始化当前程序的虚拟内存，然后运行 <code>main</code> 函数，当发现执行代码时，有的代码没有加载到内存，就会触发缺页异常，将根据虚拟页找到对应的 <code>Innoe</code> ，然后将磁盘中需要的数据加载到内存中，然后将虚拟页标记为已加载到内存，下次访问直接从内存中访问。</p><h1 id="Java-中的-mmap"><a href="#Java-中的-mmap" class="headerlink" title="Java 中的 mmap"></a>Java 中的 mmap</h1><p>看源码我们发现 <code>open.map</code> 返回的也是 <code>DirectByteBuffer</code>，只是这个方法返回的 <code>DirectByteBuffer</code> 使用了不同的构造方法，它绑定了一个 <code>fd</code> 。当我们读写数据的时候是不会触发系统调用 read 和 write 的，也就是内存映射的好处。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MMapDemo</span> </span>&#123; <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> URISyntaxException, IOException,InterruptedException  </span>&#123; </span><br><span class="line">    <span class="keyword">final</span> URL resource = MMapDemo.class.getClassLoader().getResource(<span class="string">&quot;demo.txt&quot;</span>); </span><br><span class="line">    <span class="keyword">final</span> Path path = Paths.get(resource.toURI()); <span class="keyword">final</span> FileChannel open = FileChannel.open(path, StandardOpenOption.READ); </span><br><span class="line">    <span class="comment">// 发起系统调用 mmap </span></span><br><span class="line">    <span class="keyword">final</span> MappedByteBuffer map = open.map(FileChannel.MapMode.READ_ONLY, <span class="number">0</span>, </span><br><span class="line">    open.size()); </span><br><span class="line">    <span class="comment">// 读取数据时，不会再出发调用 read,直接从自己的虚拟内存中即可拿数据 </span></span><br><span class="line">    <span class="keyword">final</span> CharBuffer decode = StandardCharsets.UTF_8.decode(map); </span><br><span class="line">    System.out.println(decode.toString()); </span><br><span class="line">    open.close(); </span><br><span class="line">    Thread.sleep(<span class="number">100000</span>); </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>尽管下面这个也是 <code>DirectByteBuffer</code> ，但是它和 mmap 不同的是，他没有绑定 fd，读写数据的时候还是要经过从用户空间到内核空间的 copy ,也会发生系统调用，效率相对 mmap 低。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MMapDemo</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> URISyntaxException, IOException, InterruptedException </span>&#123; </span><br><span class="line">    <span class="keyword">final</span> URL resource = MMapDemo.class.getClassLoader().getResource(<span class="string">&quot;demo.txt&quot;</span>); </span><br><span class="line">    <span class="keyword">final</span> Path path = Paths.get(resource.toURI()); </span><br><span class="line">    <span class="keyword">final</span> FileChannel open = FileChannel.open(path, StandardOpenOption.READ); </span><br><span class="line">    <span class="comment">// 这个 DirectByteBuffer 使用的构造不一样，它会走系统调用 read </span></span><br><span class="line">    <span class="keyword">final</span> ByteBuffer byteBuffer = ByteBuffer.allocateDirect(<span class="number">1024</span>); </span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> read = open.read(byteBuffer); byteBuffer.flip(); </span><br><span class="line">    System.out.println(StandardCharsets.UTF_8.decode(byteBuffer).toString()); </span><br><span class="line">    Thread.sleep(<span class="number">100000</span>); </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>追踪代码的系统调用，在 linux 下使用 <code>strace</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Bash"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">rm -fr /nio/out.*</span><br><span class="line"><span class="built_in">cd</span> /nio/target/classes</span><br><span class="line">strace -ff -o /nio/out java com.fly.blog.nio.MMapDemo</span><br></pre></td></tr></table></figure></div><p>数据读写速度上 <code>mmap</code> 大于 <code>ByteBuffer.allocateDirect</code> 大于 <code>ByteBuffer.allocate</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> linux </category>
          
          <category> JAVA </category>
          
          <category> JVM虚拟机 </category>
          
          <category> NIO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> JAVA </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中的Pandas</title>
      <link href="2020/12/26/Python2/"/>
      <url>2020/12/26/Python2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> <a href="http://pandas.pydata.org/"><em>pandas</em></a> 是一种列存数据分析 API。它是用于处理和分析输入数据的强大工具，很多机器学习框架都支持将 <em>pandas</em> 数据结构作为输入。 虽然全方位介绍 <em>pandas</em> API 会占据很长篇幅，但它的核心概念非常简单，我们会在下文中进行说明。有关更完整的参考，请访问 <a href="http://pandas.pydata.org/pandas-docs/stable/index.html"><em>pandas</em> 文档网站</a>，其中包含丰富的文档和教程资源。</p><a id="more"></a><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>首先安装一下 module，可以配置下pip源，或者 加参数<code>-i</code>提高下载速度</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.pip</span><br><span class="line">vim ~/.pip/pip.conf</span><br><span class="line">[global]</span><br><span class="line">index-url = https://mirrors.aliyun.com/pypi/simple</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install pandas -i https://mirrors.aliyun.com/pypi/simple</span><br><span class="line">pip3 install matplotlib -i https://mirrors.aliyun.com/pypi/simple # 如果需要绘制图表</span><br></pre></td></tr></table></figure></div><p><em>pandas</em> 中的主要数据结构被实现为以下两类：</p><ul><li>**<code>DataFrame</code>**，您可以将它想象成一个关系型数据表格，其中包含多个行和已命名的列。</li><li>**<code>Series</code>**，它是单一列。<code>DataFrame</code> 中包含一个或多个 <code>Series</code>，每个 <code>Series</code> 均有一个名称。</li></ul><p>数据框架是用于数据操控的一种常用抽象实现形式。<a href="https://spark.apache.org/">Spark</a> 和 <a href="https://www.r-project.org/about.html">R</a> 中也有类似的实现。</p><p>创建<code>Series</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Python"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">city_names = pd.Series([<span class="string">&#x27;San Francisco&#x27;</span>, <span class="string">&#x27;San Jose&#x27;</span>, <span class="string">&#x27;Sacramento&#x27;</span>])</span><br><span class="line">population = pd.Series([<span class="number">852469</span>, <span class="number">1015785</span>, <span class="number">485199</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>创建<code>DataFrame</code>，通过<code>Series</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.DataFrame(&#123; &#39;City name&#39;: city_names, &#39;Population&#39;: population &#125;)</span><br></pre></td></tr></table></figure></div><p>更多时候，一般装载整个文件</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Python"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">california_housing_dataframe = pd.read_csv(<span class="string">&quot;https://download.mlcc.google.com/mledu-datasets/california_housing_train.csv&quot;</span>, sep=<span class="string">&quot;,&quot;</span>)</span><br></pre></td></tr></table></figure></div><p>当然，也可以通过复制表格内容</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Python"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_clipboard()</span><br><span class="line">df.to_csv(<span class="string">&quot;some_data.csv&quot;</span>)</span><br></pre></td></tr></table></figure></div><p><code>DataFrame</code> 常用方法</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Python"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示统计信息</span></span><br><span class="line">california_housing_dataframe.describe()</span><br><span class="line"><span class="comment"># 显示前几个记录</span></span><br><span class="line">california_housing_dataframe.head()</span><br><span class="line"><span class="comment"># 绘制图表 </span></span><br><span class="line">california_housing_dataframe.hist(<span class="string">&#x27;housing_median_age&#x27;</span>)</span><br></pre></td></tr></table></figure></div><h2 id="访问数据"><a href="#访问数据" class="headerlink" title="访问数据"></a>访问数据</h2><p>您可以使用熟悉的 Python dict/list 指令访问 <code>DataFrame</code> 数据：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Python"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cities = pd.DataFrame(&#123; <span class="string">&#x27;City name&#x27;</span>: city_names, <span class="string">&#x27;Population&#x27;</span>: population &#125;)</span><br><span class="line">print(<span class="built_in">type</span>(cities[<span class="string">&#x27;City name&#x27;</span>]))</span><br><span class="line">print(cities[<span class="string">&#x27;City name&#x27;</span>])</span><br><span class="line">print(<span class="built_in">type</span>(cities[<span class="string">&#x27;City name&#x27;</span>][<span class="number">1</span>]))</span><br><span class="line">print(cities[<span class="string">&#x27;City name&#x27;</span>][<span class="number">1</span>])</span><br></pre></td></tr></table></figure></div><p> 此外，<strong>pandas</strong> 针对高级<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html">索引和选择</a>提供了极其丰富的 API（数量过多，此处无法逐一列出）。</p><h2 id="操控数据"><a href="#操控数据" class="headerlink" title="操控数据"></a>操控数据</h2><p>您可以向 <code>Series</code> 应用 Python 的基本运算指令。例如：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Python"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">population / <span class="number">1000</span></span><br></pre></td></tr></table></figure></div><p><a href="http://www.numpy.org/">NumPy</a> 是一种用于进行科学计算的常用工具包。<em>pandas</em> <code>Series</code> 可用作大多数 NumPy 函数的参数：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Python"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.log(population)</span><br></pre></td></tr></table></figure></div><p>对于更复杂的单列转换，您可以使用 <code>Series.apply</code>。像 Python <a href="https://docs.python.org/2/library/functions.html#map">映射函数</a>一样，<code>Series.apply</code> 将以参数形式接受 <a href="https://docs.python.org/2/tutorial/controlflow.html#lambda-expressions">lambda 函数</a>，而该函数会应用于每个值。</p><p>下面的示例创建了一个指明 <code>population</code> 是否超过 100 万的新 <code>Series</code>：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Python"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">population.apply(<span class="keyword">lambda</span> val: val &gt; <span class="number">1000000</span>)</span><br></pre></td></tr></table></figure></div><p><code>DataFrames</code> 的修改方式也非常简单。例如，以下代码向现有 <code>DataFrame</code> 添加了两个 <code>Series</code>：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Python"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cities[<span class="string">&#x27;Area square miles&#x27;</span>] = pd.Series([<span class="number">46.87</span>, <span class="number">176.53</span>, <span class="number">97.92</span>])</span><br><span class="line">cities[<span class="string">&#x27;Population density&#x27;</span>] = cities[<span class="string">&#x27;Population&#x27;</span>] / cities[<span class="string">&#x27;Area square miles&#x27;</span>]</span><br><span class="line">print(cities)</span><br></pre></td></tr></table></figure></div><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p><code>Series</code> 和 <code>DataFrame</code> 对象也定义了 <code>index</code> 属性，该属性会向每个 <code>Series</code> 项或 <code>DataFrame</code> 行赋一个标识符值。</p><p>默认情况下，在构造时，<em>pandas</em> 会赋可反映源数据顺序的索引值。索引值在创建后是稳定的；也就是说，它们不会因为数据重新排序而发生改变。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Python"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(city_names.index)</span><br></pre></td></tr></table></figure></div><p>调用 <code>DataFrame.reindex</code> 以手动重新排列各行的顺序。例如，以下方式与按城市名称排序具有相同的效果：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Python"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cities.reindex([<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>])</span><br></pre></td></tr></table></figure></div><p>重建索引是一种随机排列 <code>DataFrame</code> 的绝佳方式。在下面的示例中，我们会取用类似数组的索引，然后将其传递至 <code>NumPy</code> 的 <code>random.permutation</code> 函数，该函数会随机排列其值的位置。如果使用此重新随机排列的数组调用 <code>reindex</code>，会导致 <code>DataFrame</code> 行以同样的方式随机排列。 尝试多次运行以下单元格！</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Python"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cities.reindex(np.random.permutation(cities.index))</span><br></pre></td></tr></table></figure></div><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p>推荐使用 <a href="https://colab.research.google.com/">https://colab.research.google.com/</a> 练习，可以直接导入<code>ipynb</code>，练习库<code>github</code>上面有很多，这里不多赘述，底下相关链接也有列出。</p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://colab.research.google.com/notebooks/mlcc/intro_to_pandas.ipynb">colab intro to pandas</a> </p><p><a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/10min.html">user guide</a></p><p><a href="https://github.com/guipsamora/pandas_exercises">guipsamora/pandas_exercises</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> da </category>
          
      </categories>
      
      
        <tags>
            
            <tag> data analysis </tag>
            
            <tag> pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中的flask-todolist</title>
      <link href="2020/12/26/Python1/"/>
      <url>2020/12/26/Python1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>Flask</code> 是一个使用 Python 语言编写的 Web 框架，它可以让你高效的编写 Web 程序。我最近用<code>flask+vue</code>搭建一个简单的<code>todolist</code> 项目示例来学习，主要是参考<a href="https://github.com/greyli/flask-tutorial">flask-tutorial</a>，感兴趣的可以看看，<a href="https://github.com/jianchengwang/todo-python/raw/master/flask/todo-list">示例代码</a></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个项目比较简单，就是用户登录，然后有一个<code>todolist</code>列表，可以简单的增删改，前端界面使用<code>vue</code>框架，所以关于<code>flask template</code>涉及不多，感兴趣的可以自己去学习下。本系列基于<code>python3</code>版本，所以命令跟<code>python2</code>可能有些许出入。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="基础软件"><a href="#基础软件" class="headerlink" title="基础软件"></a>基础软件</h3><p>安装<code>python</code>，</p><p>编辑软件，一般文本软件软件即可，这个看个人习惯，我这边是用<code>vscode</code></p><p>安装<code>git</code>，window用户推荐使用<code>git bash</code> 内置了很多linux命令</p><h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir todo-list</span><br><span class="line">cd todo-list</span><br><span class="line">mkdir app serve</span><br></pre></td></tr></table></figure></div><p>我这边项目里面创建两个目录<code>app</code>（vue前端页面，这个这里不多做介绍），<code>serve</code>（flask后端服务），</p><h3 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cd serve </span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装虚拟环境</span></span><br><span class="line">py -3 -m venv env  # Windows or </span><br><span class="line">python3 -m venv env # Linux 和 macOS</span><br><span class="line"><span class="meta">#</span><span class="bash"> 激活虚拟环境</span></span><br><span class="line">env\Scripts\activate  # Windows</span><br><span class="line">. env/bin/activate  # Linux 或 macOS</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装flask</span></span><br><span class="line"> pip3 install flask</span><br></pre></td></tr></table></figure></div><p><code>env</code>这个名字不固定，你也可以使用<code>venv</code>，记得<code>.gitignore</code>忽略掉这个目录。</p><p>在激活虚拟环境后，无论操作系统和 Python 版本，都可以统一使用 <code>python</code> 和 <code>pip</code> 命令来调用当前虚拟环境内的 Python 和 pip 程序/二进制文件。此时执行 <code>python</code> 或 <code>pip</code> 命令指向的程序和激活脚本在同一个目录下，在 Windows 下所在目录为 <code>env\Scripts\</code>，Linux 和 macOS 下所在目录为 <code>env/bin/</code></p><h2 id="Hello-Flask"><a href="#Hello-Flask" class="headerlink" title="Hello Flask"></a>Hello Flask</h2><p><code>serve</code>根目录下创建<code>app.py</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建app.py</span></span><br><span class="line">vim app.py </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> app.py内容</span></span><br><span class="line">from flask import Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/&#x27;)</span><br><span class="line">def hello():</span><br><span class="line">    return &#x27;Welcome to My Watchlist!&#x27;</span><br><span class="line">    </span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">flask run    </span><br></pre></td></tr></table></figure></div><p>现在打开浏览器，访问 <a href="http://localhost:5000/">http://localhost:5000</a> 即可访问我们的程序主页</p><h3 id="程序发现机制"><a href="#程序发现机制" class="headerlink" title="程序发现机制"></a>程序发现机制</h3><p>如果你把上面的程序保存成其他的名字，比如 hello.py，接着执行 <code>flask run</code> 命令会返回一个错误提示。这是因为 Flask 默认会假设你把程序存储在名为 <code>app.py</code> 或 <code>wsgi.py</code> 的文件中。如果你使用了其他名称，就要设置系统环境变量 <code>FLASK_APP</code> 来告诉 Flask 你要启动哪个程序。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export FLASK_APP=hello.py # Linux 或 macOS</span><br><span class="line"><span class="meta">$</span><span class="bash">Env:FLASK_APP=hello.py <span class="comment"># Window PowerShell</span></span></span><br><span class="line">set FLASK_APP=hello.py # Window CMD</span><br></pre></td></tr></table></figure></div><h3 id="管理环境变量"><a href="#管理环境变量" class="headerlink" title="管理环境变量"></a>管理环境变量</h3><p>为了不用每次打开新的终端会话都要设置环境变量，我们安装用来管理系统环境变量的 <code>python-dotenv</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install python-dotenv</span><br></pre></td></tr></table></figure></div><p>当 <code>python-dotenv</code> 安装后，<code>Flask</code> 会从项目根目录的 <code>.flaskenv</code>和 <code>.env</code> 文件读取环境变量并设置。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch .env .flaskenv</span><br></pre></td></tr></table></figure></div><p><code>.flaskenv</code> 用来存储 Flask 命令行系统相关的公开环境变量；</p><p><code>.env</code> 则用来存储敏感数据，不应该提交进Git仓库，我们把文件名 <code>.env</code> 添加到 <code>.gitignore</code> 文件的结尾（新建一行）来让 Git 忽略它。</p><p>开启调试模式：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim .flaskenv</span><br><span class="line">FLASK_ENV=development</span><br></pre></td></tr></table></figure></div><h2 id="Routing"><a href="#Routing" class="headerlink" title="Routing"></a>Routing</h2><p>Web的核心功能，这个后面经常用，有个印象即可。</p><h3 id="Variable-Rules"><a href="#Variable-Rules" class="headerlink" title="Variable Rules"></a>Variable Rules</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Python"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/&lt;username&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_user_profile</span>(<span class="params">username</span>):</span></span><br><span class="line">    <span class="comment"># show the user profile for that user</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;User %s&#x27;</span> % escape(username)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/post/&lt;int:post_id&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_post</span>(<span class="params">post_id</span>):</span></span><br><span class="line">    <span class="comment"># show the post with the given id, the id is an integer</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Post %d&#x27;</span> % post_id</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/path/&lt;path:subpath&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_subpath</span>(<span class="params">subpath</span>):</span></span><br><span class="line">    <span class="comment"># show the subpath after /path/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Subpath %s&#x27;</span> % escape(subpath)</span><br></pre></td></tr></table></figure></div><p>注意用户输入可能包含恶意代码，所以最好用<code>escape</code>进行转义处理</p><h3 id="URL-Building"><a href="#URL-Building" class="headerlink" title="URL Building"></a>URL Building</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Python"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;index&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;login&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/&lt;username&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">profile</span>(<span class="params">username</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#123;&#125;\&#x27;s profile&#x27;</span>.<span class="built_in">format</span>(escape(username))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> app.test_request_context():</span><br><span class="line">    print(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    print(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line">    print(url_for(<span class="string">&#x27;login&#x27;</span>, <span class="built_in">next</span>=<span class="string">&#x27;/&#x27;</span>))</span><br><span class="line">    print(url_for(<span class="string">&#x27;profile&#x27;</span>, username=<span class="string">&#x27;John Doe&#x27;</span>))</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/</span><br><span class="line">/login</span><br><span class="line">/login?next=/</span><br><span class="line"><span class="meta">/user/John%</span><span class="bash">20Doe</span></span><br></pre></td></tr></table></figure></div><h3 id="Redirects-and-Errors"><a href="#Redirects-and-Errors" class="headerlink" title="Redirects and Errors"></a>Redirects and Errors</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Python"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> abort, redirect, url_for</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    abort(<span class="number">401</span>)</span><br><span class="line">    this_is_never_executed()</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Python"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">404</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_not_found</span>(<span class="params">error</span>):</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;page_not_found.html&#x27;</span>), <span class="number">404</span></span><br></pre></td></tr></table></figure></div><h3 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Python"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    error = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> valid_login(request.form[<span class="string">&#x27;username&#x27;</span>],</span><br><span class="line">                       request.form[<span class="string">&#x27;password&#x27;</span>]):</span><br><span class="line">            <span class="keyword">return</span> log_the_user_in(request.form[<span class="string">&#x27;username&#x27;</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            error = <span class="string">&#x27;Invalid username/password&#x27;</span></span><br><span class="line">    <span class="comment"># the code below is executed if the request method</span></span><br><span class="line">    <span class="comment"># was GET or the credentials were invalid</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>, error=error)</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Python"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchword = request.args.get(<span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Python"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_file</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        f = request.files[<span class="string">&#x27;the_file&#x27;</span>]</span><br><span class="line">        f.save(<span class="string">&#x27;/var/www/uploads/&#x27;</span> + secure_filename(f.filename))</span><br></pre></td></tr></table></figure></div><h3 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h3><h4 id="return-string"><a href="#return-string" class="headerlink" title="return string"></a>return string</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Python"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="string">&#x27;hello world&#x27;</span></span><br></pre></td></tr></table></figure></div><h4 id="rerun-html"><a href="#rerun-html" class="headerlink" title="rerun html"></a>rerun html</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Python"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="string">&#x27;&lt;hr&gt;Hello World&lt;/hr&gt;&#x27;</span></span><br></pre></td></tr></table></figure></div><h4 id="render-template"><a href="#render-template" class="headerlink" title="render template"></a>render template</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Python"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> render_template(<span class="string">&#x27;error.html&#x27;</span>), <span class="number">404</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">resp = make_response(render_template(<span class="string">&#x27;error.html&#x27;</span>), <span class="number">404</span>)</span><br><span class="line">resp.headers[<span class="string">&#x27;X-Something&#x27;</span>] = <span class="string">&#x27;A value&#x27;</span></span><br><span class="line"><span class="keyword">return</span> resp</span><br></pre></td></tr></table></figure></div><h4 id="return-json"><a href="#return-json" class="headerlink" title="return json"></a>return json</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Python"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/me&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">me_api</span>():</span></span><br><span class="line">    user = get_current_user()</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&quot;username&quot;</span>: user.username,</span><br><span class="line">        <span class="string">&quot;theme&quot;</span>: user.theme,</span><br><span class="line">        <span class="string">&quot;image&quot;</span>: url_for(<span class="string">&quot;user_image&quot;</span>, filename=user.image),</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Python"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/users&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">users_api</span>():</span></span><br><span class="line">    users = get_all_users()</span><br><span class="line">    <span class="keyword">return</span> jsonify([user.to_json() <span class="keyword">for</span> user <span class="keyword">in</span> users])</span><br></pre></td></tr></table></figure></div><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>这边为了简单，使用<code>Sqlite</code></p><h3 id="flask-sqlalchemy"><a href="#flask-sqlalchemy" class="headerlink" title="flask-sqlalchemy"></a>flask-sqlalchemy</h3><p>为了简化数据库操作，我们将使用 <a href="https://www.sqlalchemy.org/">SQLAlchemy</a>——一个 Python 数据库工具（ORM，即对象关系映射）。借助 <code>SQLAlchemy</code>，你可以通过定义 Python 类来表示数据库里的一张表（类属性表示表中的字段 / 列），通过对这个类进行各种操作来代替写 SQL 语句。</p><p>Flask 有大量的第三方扩展，这些扩展可以简化和第三方库的集成工作。我们下面将使用一个叫做 <a href="http://flask-sqlalchemy.pocoo.org/2.3/">Flask-SQLAlchemy</a> 的官方扩展来集成 SQLAlchemy。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install flask-sqlalchemy</span><br></pre></td></tr></table></figure></div><p>大部分扩展都需要执行一个“初始化”操作。你需要导入扩展类，实例化并传入 Flask 程序实例：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from flask_sqlalchemy import SQLAlchemy  # 导入扩展类</span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line">db &#x3D; SQLAlchemy(app)  # 初始化扩展，传入程序实例 app</span><br></pre></td></tr></table></figure></div><h3 id="数据库URL"><a href="#数据库URL" class="headerlink" title="数据库URL"></a>数据库URL</h3><p>为了设置 Flask、扩展或是我们程序本身的一些行为，我们需要设置和定义一些配置变量</p><p><a href="https://flask.palletsprojects.com/en/1.1.x/config/">Flask文档配置页面</a></p><p> <a href="http://flask-sqlalchemy.pocoo.org/2.1/config/">Flask-SQLAlchemy 文档的配置页面</a></p><ul><li><code>sqlite:////tmp/test.db</code></li><li><code>mysql://username:password@server/db</code></li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Python"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">WIN = sys.platform.startswith(<span class="string">&#x27;win&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> WIN:  <span class="comment"># 如果是 Windows 系统，使用三个斜线</span></span><br><span class="line">    prefix = <span class="string">&#x27;sqlite:///&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:  <span class="comment"># 否则使用四个斜线</span></span><br><span class="line">    prefix = <span class="string">&#x27;sqlite:////&#x27;</span></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = prefix + os.path.join(app.root_path, <span class="string">&#x27;data.db&#x27;</span>)</span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 关闭对模型修改的监控</span></span><br><span class="line"><span class="comment"># 在扩展类实例化前加载配置</span></span><br><span class="line">db = SQLAlchemy(app)</span><br></pre></td></tr></table></figure></div><h3 id="创建模型"><a href="#创建模型" class="headerlink" title="创建模型"></a>创建模型</h3><p>我们这边就只有两个模型，一个用户模型，一个代办项目模型</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Python"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">db.Model, UserMixin</span>):</span> <span class="comment"># 表名将会是 user</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    username = db.Column(db.String(<span class="number">20</span>))</span><br><span class="line">    password_hash = db.Column(db.String(<span class="number">128</span>))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoItem</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;todo_item&#x27;</span> <span class="comment"># 表名将会是 todo_item</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)  <span class="comment"># 主键</span></span><br><span class="line">    title = db.Column(db.String(<span class="number">32</span>))  <span class="comment"># 标题</span></span><br><span class="line">    descs = db.Column(db.String(<span class="number">256</span>))  <span class="comment"># 描述</span></span><br></pre></td></tr></table></figure></div><h3 id="自定义命令"><a href="#自定义命令" class="headerlink" title="自定义命令"></a>自定义命令</h3><p>注册命令，便于我们通过<strong>CLI</strong>对程序进行一些额外的数据处理，比如数据库建表，脚本初始化等</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Python"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> click</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.cli.command()  </span><span class="comment"># 注册为命令</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&#x27;--drop&#x27;</span>, is_flag=<span class="literal">True</span>, <span class="built_in">help</span>=<span class="string">&#x27;Create after drop.&#x27;</span></span>)  </span><span class="comment"># 设置选项</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initdb</span>(<span class="params">drop</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Initialize the database.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> drop:  <span class="comment"># 判断是否输入了选项</span></span><br><span class="line">        db.drop_all()</span><br><span class="line">    db.create_all()</span><br><span class="line">    click.echo(<span class="string">&#x27;Initialized database.&#x27;</span>)  <span class="comment"># 输出提示信息</span></span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flask initdb # 创建数据库</span><br><span class="line">flask initdb --drop # 清空数据库</span><br></pre></td></tr></table></figure></div><h3 id="CURD"><a href="#CURD" class="headerlink" title="CURD"></a>CURD</h3><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Python"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> User, TodoItem  <span class="comment"># 导入模型类</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>user = User(username=<span class="string">&#x27;wjc&#x27;</span>)  <span class="comment"># 创建一个 User 记录</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ti1 = TodoItem(title=<span class="string">&#x27;study&#x27;</span>)  <span class="comment"># 创建一个 TodoItem 记录</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ti2 = TodoItem(title=<span class="string">&#x27;game&#x27;</span>)  <span class="comment"># 再创建一个 TodoItem 记录</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>db.session.add(user)  <span class="comment"># 把新创建的记录添加到数据库会话</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>db.session.add(ti1)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>db.session.add(ti2)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>db.session.commit()  <span class="comment"># 提交数据库会话，只需要在最后调用一次即可</span></span><br></pre></td></tr></table></figure></div><h4 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;模型类&gt;.query.&lt;过滤方法（可选）&gt;.&lt;查询方法&gt;</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Python"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> app <span class="keyword">import</span> TodoItem  <span class="comment"># 导入模型类</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>todoItem = TodoItem.query.first()  <span class="comment"># 获取 Movie 模型的第一个记录（返回模型类实例）</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>todoItem.title  <span class="comment"># 对返回的模型类实例调用属性即可获取记录的各字段数据</span></span><br><span class="line"><span class="string">&#x27;study&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>TodoItem.query.<span class="built_in">all</span>()  <span class="comment"># 获取 TodoItem 模型的所有记录，返回包含多个模型类实例的列表</span></span><br><span class="line">[&lt;TodoItem <span class="number">1</span>&gt;, &lt;TodoItem <span class="number">2</span>&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>TodoItem.query.count()  <span class="comment"># 获取 Movie 模型所有记录的数量</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>TodoItem.query.get(<span class="number">1</span>)  <span class="comment"># 获取主键值为 1 的记录</span></span><br><span class="line">&lt;TodoItem <span class="number">1</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>TodoItem.query.filter_by(title=<span class="string">&#x27;game&#x27;</span>).first()  <span class="comment"># 获取 title 字段值为 game 的记录</span></span><br><span class="line">&lt;TodoItem <span class="number">2</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>TodoItem.query.<span class="built_in">filter</span>(TodoItem.title==<span class="string">&#x27;game&#x27;</span>).first()  <span class="comment"># 等同于上面的查询，但使用不同的过滤方法</span></span><br><span class="line">&lt;TodoItem <span class="number">2</span>&gt;</span><br></pre></td></tr></table></figure></div><p><a href="https://docs.sqlalchemy.org/en/14/orm/query.html">sqlalchemy query</a></p><h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Python"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>todoItem = TodoItem.query.get(<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>todoItem.title = <span class="string">&#x27;play ball&#x27;</span>  <span class="comment"># 直接对实例属性赋予新的值即可</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>todoItem.descs = <span class="string">&#x27;玩球&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>db.session.commit()  <span class="comment"># 注意仍然需要调用这一行来提交改动</span></span><br></pre></td></tr></table></figure></div><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Python"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>todoItem = TodoItem.query.get(<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>db.session.delete(todoItem)  <span class="comment"># 使用 db.session.delete() 方法删除记录，传入模型实例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>db.session.commit()  <span class="comment"># 提交改动</span></span><br></pre></td></tr></table></figure></div><h3 id="Flask-Marshmallow"><a href="#Flask-Marshmallow" class="headerlink" title="Flask Marshmallow"></a>Flask Marshmallow</h3><p>因为<code>sqlalchemy</code>查询出来的数据不能直接序列化，所以一般要转成<code>dict</code>，这边引入<a href="https://flask-marshmallow.readthedocs.io/en/latest/">flask-marshmallow</a>来处理</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install  marshmallow-sqlalchemy</span><br><span class="line">pip3 install flask-marshmallow</span><br></pre></td></tr></table></figure></div><p>引入</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Python"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_marshmallow <span class="keyword">import</span> Marshmallow</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">ma = Marshmallow(app)</span><br></pre></td></tr></table></figure></div><p>定义</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Python"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoItemSchema</span>(<span class="params">ma.SQLAlchemyAutoSchema</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = TodoItem</span><br></pre></td></tr></table></figure></div><p>使用</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Python"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/todoItems&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">all</span>():</span></span><br><span class="line">    todoItems = TodoItem.query.<span class="built_in">all</span>()</span><br><span class="line">    todoitems_schema = TodoItemSchema()</span><br><span class="line">    <span class="keyword">return</span> jsonify(result = todoitems_schema.dump(todoItems, many=<span class="literal">True</span>))</span><br></pre></td></tr></table></figure></div><h2 id="用户认证"><a href="#用户认证" class="headerlink" title="用户认证"></a>用户认证</h2><h3 id="密码存储"><a href="#密码存储" class="headerlink" title="密码存储"></a>密码存储</h3><p><code>Flask</code> 的依赖 <code>Werkzeug</code> 内置了用于生成和验证密码散列值的函数，<code>werkzeug.security.generate_password_hash()</code> 用来为给定的密码生成密码散列值，而 <code>werkzeug.security.check_password_hash()</code> 则用来检查给定的散列值和密码是否对应</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Python"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> werkzeug.security <span class="keyword">import</span> generate_password_hash, check_password_hash</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">20</span>))</span><br><span class="line">    username = db.Column(db.String(<span class="number">20</span>))  <span class="comment"># 用户名</span></span><br><span class="line">    password_hash = db.Column(db.String(<span class="number">128</span>))  <span class="comment"># 密码散列值</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_password</span>(<span class="params">self, password</span>):</span>  <span class="comment"># 用来设置密码的方法，接受密码作为参数</span></span><br><span class="line">        self.password_hash = generate_password_hash(password)  <span class="comment"># 将生成的密码保持到对应字段</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_password</span>(<span class="params">self, password</span>):</span>  <span class="comment"># 用于验证密码的方法，接受密码作为参数</span></span><br><span class="line">        <span class="keyword">return</span> check_password_hash(self.password_hash, password)  <span class="comment"># 返回布尔值</span></span><br></pre></td></tr></table></figure></div><h3 id="flask-jwt-extended"><a href="#flask-jwt-extended" class="headerlink" title="flask-jwt-extended"></a>flask-jwt-extended</h3><p><a href="https://flask-jwt-extended.readthedocs.io/en/stable/">flask-jwt-extended</a></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install flask-jwt-extended</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Python"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_jwt_extended <span class="keyword">import</span> (</span><br><span class="line">    create_access_token,</span><br><span class="line">    jwt_required,</span><br><span class="line">    get_jwt_identity</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建toekn</span></span><br><span class="line">access_token = create_access_token(identity=username)</span><br><span class="line"><span class="comment"># 获取当前用户</span></span><br><span class="line">current_user_name = get_jwt_identity()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器拦截接口</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/todoItem&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@jwt_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>():</span></span><br><span class="line">    todoItem = TodoItem(title = request.form[<span class="string">&#x27;title&#x27;</span>], descs = request.form[<span class="string">&#x27;descs&#x27;</span>])</span><br><span class="line">    db.session.add(todoItem)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    <span class="keyword">return</span> utils.result(msg= <span class="string">&#x27;Item added.&#x27;</span>)</span><br></pre></td></tr></table></figure></div><h2 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h2><p>代码结构调整，待定。。。</p><h2 id="打包部署"><a href="#打包部署" class="headerlink" title="打包部署"></a>打包部署</h2><p>待定</p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://github.com/greyli/flask-tutorial">flask-tutorial</a></p><p><a href="https://flask.palletsprojects.com/en/1.1.x/">flask 1.1</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>intro to serverless functions</title>
      <link href="2020/12/26/of/"/>
      <url>2020/12/26/of/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近喵了下 <a href="https://frontendmasters.com/courses/serverless-functions/">Introduction to Serverless Functions</a> 视频感觉还不错。下面主要根据视频作者<code>Jason Lengstorf</code> 的<code>ppt</code> 简单做下笔记，最底下会列出相关链接。</p><p><a href="https://github.com/jianchengwang/todo-web/raw/master/serverless/frontendmasters-serverless">示例代码</a> <a href="https://demo-frontentedmaster-serverless-functions.netlify.app/">示例网站</a></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>serverless</strong> 一般分为<strong>bass</strong>(Backend as a Service)和<strong>fass</strong>(Function as a Service)两种，今天我们主要学习一下<strong>fass</strong>，国内云厂商一般称为<strong>云函数</strong>。简单来说，就是依赖云厂商的平台建设，使我们只关注业务代码，不需要考虑服务器相关内容，也更容易的进行资源的弹性扩容，基于事件驱动，避免闲时资源浪费。</p><p>当然有利也有弊，<strong>fass</strong>基于<strong>Data-shipping</strong>架构，即：<strong>将数据传输到代码所在处执行</strong>，而不是<strong>将代码传输到数据所在处执行</strong>，因为数据一般都比代码的传输量要大得多。而目前主流的 Faas 平台都是『<strong>将数据传输到代码所在处执行</strong>』这种架构，所以这是 Faas 的最大缺陷，同时也不好维护状态，事务啥的。</p><p>所以，一般就作为一些公共基础建设，比如图片预处理，API网关数据拉取，这种<strong>无状态</strong>的<strong>独立功能</strong>函数。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>今天我们主要使用<strong>node.js</strong>构建我们的函数应用，所以你要先安装下<strong>node.js v12 or higher</strong>，</p><p>需要云服务商<a href="https://netlify.com/">Netlify</a>跟<a href="https://hasura.io/">Hasura</a>提供服务，所以需要你有这两个网站的账号，都提供免费额度使用，所以无需担心费用问题。</p><p>还需要，<a href="http://www.omdbapi.com/">omdbapi</a>，提供模拟数据，所以创建一个<strong>API KEY</strong>即可，</p><p>另外有的网站可能需要科学上网，这个需要你自己解决了。</p><h2 id="搭建本地环境"><a href="#搭建本地环境" class="headerlink" title="搭建本地环境"></a>搭建本地环境</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> install the Netlify CLI <span class="keyword">for</span> <span class="built_in">local</span> development</span></span><br><span class="line">npm install -g netlify-cli@latest</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">clone</span> the starting point <span class="keyword">for</span> development</span></span><br><span class="line">git clone --branch start https://github.com/jlengstorf/frontendmasters-serverless.git</span><br><span class="line"><span class="meta">#</span><span class="bash"> recommended use vscode</span></span><br><span class="line">code frontendmasters-serverless</span><br><span class="line"><span class="meta">#</span><span class="bash"> create <span class="built_in">functions</span> dir</span></span><br><span class="line">cd frontendmasters-serverless</span><br><span class="line">mkdir functions</span><br><span class="line"><span class="meta">#</span><span class="bash"> cofnig <span class="built_in">functions</span> location</span></span><br><span class="line">vim netlify.toml</span><br><span class="line">[build]</span><br><span class="line">  command = &quot;npm run build&quot;</span><br><span class="line">  publish = &quot;_site&quot;</span><br><span class="line">  functions = &quot;functions&quot;</span><br></pre></td></tr></table></figure></div><p>最终目录结构如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.eleventy.js</span><br><span class="line">.env # 环境变量</span><br><span class="line">.gitignore</span><br><span class="line">_site</span><br><span class="line">data # 静态数据</span><br><span class="line">functions # 函数目录</span><br><span class="line">netlify.toml # 配置文件</span><br><span class="line">node_modules</span><br><span class="line">package.json</span><br><span class="line">package-lock.json</span><br><span class="line">README.md</span><br><span class="line">src # 网站代码</span><br></pre></td></tr></table></figure></div><p>这个看你使用哪个云厂商提供服务了，目录跟配置项可能不一样，本示例使用的是<a href="https://www.netlify.com/products/functions/">Netlify Functions</a>，</p><p>我们现在就来使用<strong>serverless functions</strong> 搭建一个简单的我看过的电影展示列表，网站静态页面跟样式已经有了，你可以启动服务看下效果</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ntl dev</span><br></pre></td></tr></table></figure></div><h2 id="Boop"><a href="#Boop" class="headerlink" title="Boop"></a>Boop</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd functions</span><br><span class="line">vim boop.js</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Js"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span>.handler = <span class="function">(<span class="params">event, context, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// &quot;event&quot; has information about the path, body, headers, etc. of the request</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;event&#x27;</span>, event)</span><br><span class="line">  <span class="comment">// &quot;context&quot; has information about the lambda environment and user details</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;context&#x27;</span>, context)</span><br><span class="line">  <span class="comment">// The &quot;callback&quot; ends the execution of the function and returns a response back to the caller</span></span><br><span class="line">  <span class="keyword">return</span> callback(<span class="literal">null</span>, &#123;</span><br><span class="line">    statusCode: <span class="number">200</span>,</span><br><span class="line">    body: <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">      data: <span class="string">&#x27;Boop!&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>可以看到，<strong>serverless functions</strong> 函数结构很简单，就是声明一个方法，预处理，然后执行回调函数。</p><p>当然你直接使用<code>return</code> </p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Js"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span>.handler = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        statusCode: <span class="number">200</span>,</span><br><span class="line">        body: <span class="string">&#x27;Boop!&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>然后，我们访问<code>http://localhost:8888/.netlify/functions/boop</code>，即可看到返回的数据了</p><h2 id="获取本地数据"><a href="#获取本地数据" class="headerlink" title="获取本地数据"></a>获取本地数据</h2><p>现在我们要从本地，<code>data/movies.json</code> 获取数据，然后渲染在页面上，<code>functions</code> 目录下创建<code>movies.js</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Js"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  get movies from local json</span></span><br><span class="line"><span class="keyword">const</span> movies = <span class="built_in">require</span>(<span class="string">&#x27;../data/movies.json&#x27;</span>)</span><br><span class="line"><span class="built_in">exports</span>.handler = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        statusCode: <span class="number">200</span>,</span><br><span class="line">        body: <span class="built_in">JSON</span>.stringify(moviesWithRatings),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>然后<code>src/index.html</code> 请求数据，渲染页面即可</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Html"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">initialize</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> movies = <span class="keyword">await</span> fetch(<span class="string">&#x27;/.netlify/functions/movies&#x27;</span>).then(<span class="function">(<span class="params">response</span>) =&gt;</span></span></span><br><span class="line">      response.json(),</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> container = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.movies&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> template = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#movie-template&#x27;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    movies.forEach(<span class="function">(<span class="params">movie</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> element = template.content.cloneNode(<span class="literal">true</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> img = element.querySelector(<span class="string">&#x27;img&#x27;</span>);</span></span><br><span class="line">      img.src = movie.poster;</span><br><span class="line">      img.alt = movie.title;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      element.querySelector(<span class="string">&#x27;h2&#x27;</span>).innerText = movie.title;</span></span><br><span class="line"><span class="javascript">      element.querySelector(<span class="string">&#x27;.tagline&#x27;</span>).innerText = movie.tagline;</span></span><br><span class="line"></span><br><span class="line">      container.appendChild(element);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br></pre></td></tr></table></figure></div><h2 id="获取请求参数"><a href="#获取请求参数" class="headerlink" title="获取请求参数"></a>获取请求参数</h2><p>用过<code>event</code>参数获取，<code>functions</code> 目录下创建<code>movie-by-id.js</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Js"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> movies = <span class="built_in">require</span>(<span class="string">&#x27;../data/movies.json&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.handler = <span class="keyword">async</span>(&#123; queryStringParameters &#125;) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; id &#125; = queryStringParameters;</span><br><span class="line">    <span class="keyword">const</span> moive = movies.find(<span class="function"><span class="params">m</span> =&gt;</span> m.id === id);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!moive) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            statusCode: <span class="number">404</span>,</span><br><span class="line">            body: <span class="string">&#x27;Not Found&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        statusCode: <span class="number">200</span>,</span><br><span class="line">        body: <span class="built_in">JSON</span>.stringify(moive)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>然后访问<code>http://localhost:8888/.netlify/functions/movie-by-id?id=tt2975590</code></p><p>当然<code>event</code>还包含很多其他信息，有兴趣的话可以喵下官方文档，或者，把<code>event</code>返回出来看看。</p><h2 id="拉取OMDBAPI数据"><a href="#拉取OMDBAPI数据" class="headerlink" title="拉取OMDBAPI数据"></a>拉取OMDBAPI数据</h2><p>获取第三方接口，一般需要<strong>API-KEY</strong>提供凭证，一般配置在环境变量里面，</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim .env</span><br><span class="line">OMDB_API_KEY=</span><br></pre></td></tr></table></figure></div><p>这边使用<code>node-fetch</code>请求第三方接口</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install node-fetch</span><br></pre></td></tr></table></figure></div><p>我们这里，通过<strong>OMDBAPI</strong>获取影片的评分信息，调整<code>functions/movies.js</code>代码示例如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Js"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; URL &#125; = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fetch = <span class="built_in">require</span>(<span class="string">&#x27;node-fetch&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//  get movies from local json</span></span><br><span class="line"><span class="keyword">const</span> movies = <span class="built_in">require</span>(<span class="string">&#x27;../data/movies.json&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.handler = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> movieScoreApi = <span class="keyword">new</span> URL(<span class="string">&quot;https://www.omdbapi.com/&quot;</span>);</span><br><span class="line">    <span class="comment">// add the secret API key to the query string</span></span><br><span class="line">    movieScoreApi.searchParams.set(<span class="string">&#x27;apiKey&#x27;</span>, process.env.OMDB_API_KEY)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> promises = movies.map(<span class="function"><span class="params">movie</span> =&gt;</span> &#123;</span><br><span class="line">        movieScoreApi.searchParams.set(<span class="string">&#x27;i&#x27;</span>, movie.id);</span><br><span class="line">        <span class="keyword">return</span> fetch(movieScoreApi)</span><br><span class="line">        .then(<span class="function"><span class="params">response</span> =&gt;</span> response.json())</span><br><span class="line">        .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> scores = data.Ratings;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                ...movie,</span><br><span class="line">                scores</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// awaiting all Promises lets the requests happen in parallel</span></span><br><span class="line">    <span class="comment">// see: https://lwj.dev/blog/keep-async-await-from-blocking-execution/</span></span><br><span class="line">    <span class="keyword">const</span> moviesWithRatings = <span class="keyword">await</span> <span class="built_in">Promise</span>.all(promises);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        statusCode: <span class="number">200</span>,</span><br><span class="line">        body: <span class="built_in">JSON</span>.stringify(moviesWithRatings),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>src/index.html</code> 代码页面也做相应调整，这里就不多赘述。</p><h2 id="Hasura-Graphql"><a href="#Hasura-Graphql" class="headerlink" title="Hasura Graphql"></a>Hasura Graphql</h2><p><code>movies.json</code>的数据到达一定量的话，一般会存到数据库便于管理，这边使用<strong>Hasura Graphql</strong>，创建一张表<code>movies</code>表存储，并将<code>movies.json</code>数据填充几条到<code>movies</code>表中。</p><p>所以这边也要配置下<strong>Hasura Graphql</strong> 请求的环境变量：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim .env</span><br><span class="line">HASURA_API_URL=</span><br><span class="line">HASURA_ADMIN_SECRET=</span><br></pre></td></tr></table></figure></div><p>关于<strong>Hasura Graphql</strong>的使用，语法等可以参考官方文档<a href="https://hasura.io/docs/1.0/graphql/core/index.html">hasura graphql</a>，</p><p><code>HASURA_ADMIN_SECRET</code> 其实就是<code>NEW ENV VARS</code>即可，</p><p>首先我们写一个工具方法，用来调用<strong>Hasura Graphql</strong>接口，<code>functions/util/hasura.js</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Js"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fetch = <span class="built_in">require</span>(<span class="string">&#x27;node-fetch&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params">&#123; query, variables = &#123;&#125; &#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> fetch(process.env.HASURA_API_URL, &#123;</span><br><span class="line">        method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        headers: &#123;</span><br><span class="line">            <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;X-Hasura-Admin-Secret&#x27;</span>: process.env.HASURA_ADMIN_SECRET,</span><br><span class="line">        &#125;,</span><br><span class="line">        body: <span class="built_in">JSON</span>.stringify(&#123; query, variables &#125;),</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">response</span> =&gt;</span> response.json())</span><br><span class="line">    .catch(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// TODO send back helpful information if there are errors</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.info(result)</span><br><span class="line">    <span class="keyword">return</span> result.data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.query = query;</span><br></pre></td></tr></table></figure></div><p>然后再调整一下，<code>functions/movies.js</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Js"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; query &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./util/hasura&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.handler = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get movies from db</span></span><br><span class="line">    <span class="keyword">const</span> &#123; movies &#125; = <span class="keyword">await</span> query(&#123;</span><br><span class="line">        query: <span class="string">`</span></span><br><span class="line"><span class="string">            query &#123;</span></span><br><span class="line"><span class="string">                movies &#123;</span></span><br><span class="line"><span class="string">                    id</span></span><br><span class="line"><span class="string">                    title</span></span><br><span class="line"><span class="string">                    tagline</span></span><br><span class="line"><span class="string">                    poster</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        `</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    ...other code</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        statusCode: <span class="number">200</span>,</span><br><span class="line">        body: <span class="built_in">JSON</span>.stringify(moviesWithRatings),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>然后再写个添加方法<code>functions/add-movie.js</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Js"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; query &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./util/hasura&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.handler = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; id, title, tagline, poster &#125; = <span class="built_in">JSON</span>.parse(event.body);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> query(&#123;</span><br><span class="line">        query: <span class="string">`</span></span><br><span class="line"><span class="string">            mutation CreateMovie($id: String!, $poster: String!, $tagline: String!, $title: String!) &#123;</span></span><br><span class="line"><span class="string">                insert_movies_one(object: &#123;id: $id, poster: $poster, tagline: $tagline, title: $title&#125;) &#123;</span></span><br><span class="line"><span class="string">                    id</span></span><br><span class="line"><span class="string">                    poster</span></span><br><span class="line"><span class="string">                    tagline</span></span><br><span class="line"><span class="string">                    title</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        `</span>,</span><br><span class="line">        variables: &#123; id, title, tagline, poster &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        statusCode: <span class="number">200</span>,</span><br><span class="line">        body: <span class="built_in">JSON</span>.stringify(result),</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>调整下添加页面，<code>src/admin.html</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Html"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">handleSubmit</span>(<span class="params">event</span>) </span>&#123;</span></span><br><span class="line">    event.preventDefault();</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> data = <span class="keyword">new</span> FormData(event.target);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> result = <span class="keyword">await</span> fetch(<span class="string">&#x27;/.netlify/functions/add-movie&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">      method: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      body: <span class="built_in">JSON</span>.stringify(&#123;</span></span><br><span class="line"><span class="javascript">        id: data.get(<span class="string">&#x27;id&#x27;</span>),</span></span><br><span class="line"><span class="javascript">        title: data.get(<span class="string">&#x27;title&#x27;</span>),</span></span><br><span class="line"><span class="javascript">        tagline: data.get(<span class="string">&#x27;tagline&#x27;</span>),</span></span><br><span class="line"><span class="javascript">        poster: data.get(<span class="string">&#x27;poster&#x27;</span>),</span></span><br><span class="line">      &#125;),</span><br><span class="line"><span class="javascript">    &#125;).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.querySelector(</span></span><br><span class="line"><span class="javascript">        <span class="string">&#x27;.message&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      ).innerText = <span class="string">`Response: <span class="subst">$&#123;response.status&#125;</span> — <span class="subst">$&#123;response.statusText&#125;</span>`</span>;</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#add-movie&#x27;</span>).addEventListener(<span class="string">&#x27;submit&#x27;</span>, handleSubmit);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="Netlify-Identify"><a href="#Netlify-Identify" class="headerlink" title="Netlify Identify"></a>Netlify Identify</h2><p>网站一般要进行身份验证，然后不同身份认证有不同的操作权限。比如我的影片列表，我可以进行添加编辑操作，其他人只能进行浏览。所以，一般要引入身份认证，如果从头自己搞登录逻辑，可能比较繁琐，一般也是独立出一个认证的微服务。</p><p>这边简单的使用<a href="https://docs.netlify.com/visitor-access/identity/">Netlify Identify</a>来进行网站的身份认证，如果你使用其他云厂商，这部分可以略过</p><p>此时需要我们先部署一个网站，你可以直接使用<code>netlify-cli</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ntl init</span><br></pre></td></tr></table></figure></div><p>我这边不知道是因为网络原因还是啥的，<code>netlify-cli</code>认证不了，所以我直接登录<a href="https://app.netlify.com/">app.netlify</a>操作了，部署后，可以直接<a href="https://demo-frontentedmaster-serverless-functions.netlify.app/">在线访问</a>，</p><p><strong>app.netlify</strong> 对应站点管理，对我们刚部署的站点启用<code>Identify</code>，</p><p><strong>Netlify Identify</strong> 已经集成了UI界面，所以我们要引入 <a href="https://github.com/netlify/netlify-identity-widget">netlify-identity-widget</a></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Html"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- include the widget --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://identity.netlify.com/v1/netlify-identity-widget.js&quot;</span>&gt;</span>&lt;/script &gt;</span><br></pre></td></tr></table></figure></div><p>这里，我只在<code>src/admin.html</code>  <code>src/login.html</code>引入了，</p><p>这边我想要实现的效果是，用户登录才能访问<code>src/admin</code>页面进行添加电影的操作，</p><p>首先，我们在<code>src/login.html</code> 添加如下代码：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Html"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-netlify-identity-button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&lt;script</span><br><span class="line">  type=&quot;text/javascript&quot;</span><br><span class="line">  src=&quot;https://identity.netlify.com/v1/netlify-identity-widget.js&quot;</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">handleLogin</span>(<span class="params">user</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (!user || !user.token) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// if we get here, we have an active user; redirect to the admin page!</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.location.pathname = <span class="string">&#x27;/admin/&#x27;</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.netlifyIdentity.on(<span class="string">&#x27;init&#x27;</span>, handleLogin);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.netlifyIdentity.on(<span class="string">&#x27;login&#x27;</span>, handleLogin);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>调整<code>src/admin.html</code> 代码，</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Html"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script</span><br><span class="line">  type=&quot;text/javascript&quot;</span><br><span class="line">  src=&quot;https://identity.netlify.com/v1/netlify-identity-widget.js&quot;</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">handleIdentityEvent</span>(<span class="params">user</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (user &amp;&amp; user.token) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.location.pathname = <span class="string">&#x27;/login/&#x27;</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  netlifyIdentity.on(<span class="string">&#x27;init&#x27;</span>, handleIdentityEvent);</span></span><br><span class="line"><span class="javascript">  netlifyIdentity.on(<span class="string">&#x27;logout&#x27;</span>, handleIdentityEvent);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.logout&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line">    event.preventDefault();</span><br><span class="line">    netlifyIdentity.logout();</span><br><span class="line">  &#125;);</span><br><span class="line">    </span><br><span class="line">  ....</span><br></pre></td></tr></table></figure></div><h2 id="腾讯云函数"><a href="#腾讯云函数" class="headerlink" title="腾讯云函数"></a>腾讯云函数</h2><p>这里简单举个小例子，比如做一个返回json数据的接口，触发管理为<strong>API网关触发器</strong>，可以看到语言规范基本一致。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Js"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.main_handler = <span class="function">(<span class="params">event, context, callback</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(event)</span><br><span class="line">    <span class="built_in">console</span>.log(event[<span class="string">&quot;non-exist&quot;</span>])</span><br><span class="line">    <span class="built_in">console</span>.log(context)</span><br><span class="line">    callback(<span class="literal">null</span>, <span class="built_in">require</span>(<span class="string">&#x27;data/fooddata.js&#x27;</span>))</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><p>跟据自己的需要选择合适的云平台，当然也有很多完善云平台使用的<code>serverless</code>框架，</p><p>本篇仅作为一个简单的入门<code>demo</code>，回调方法也不仅仅是返回<code>JSON</code>，也有很多<code>OUTPUT</code>形式，各个云平台也会跟据自己现有的服务，提供各种集成机制，感兴趣的自己自行扩展阅读。</p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://github.com/serverless/serverless">github:serverless</a></p><p><a href="https://github.com/anaibol/awesome-serverless">github:awesome-serverless</a></p><p><a href="https://frontendmasters.com/courses/serverless-functions/">Introduction to Serverless Functions</a></p><p><a href="https://github.com/jlengstorf/frontendmasters-serverless">gihub:frontendmasters-serverless</a></p><p><a href="netlify.com">netlify</a></p><p><a href="http://hasura.io/">hasura</a></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
          <category> serverless </category>
          
      </categories>
      
      
        <tags>
            
            <tag> serverless </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我们来聊聊JAVA8</title>
      <link href="2020/12/26/JAVA8/"/>
      <url>2020/12/26/JAVA8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>Java8</strong> 从2014年发行到现在已经有六个年头了，之前公司的项目都还是基于Java7，所以对 <strong>Java8</strong> 不甚了解。于是乎，花一两个礼拜学习下，做个记录，以下部分文字复制于其他文章，最底下会列出相关链接，感兴趣的可以去了解下。</p><a id="more"></a><h2 id="JAVA8-的发展"><a href="#JAVA8-的发展" class="headerlink" title="JAVA8 的发展"></a>JAVA8 的发展</h2><h3 id="JDK-5"><a href="#JDK-5" class="headerlink" title="JDK 5"></a>JDK 5</h3><h4 id="自动装箱与拆箱"><a href="#自动装箱与拆箱" class="headerlink" title="自动装箱与拆箱"></a>自动装箱与拆箱</h4><p>JDK1.5为每一个基本数据类型定义了一个封装类。使java中的基本数据类型也有自己的对象</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> --&gt;Integer</span><br><span class="line"><span class="keyword">double</span> --&gt; Double</span><br><span class="line"><span class="keyword">long</span> --&gt; Long</span><br><span class="line"><span class="keyword">char</span> --&gt; Character</span><br><span class="line"><span class="keyword">float</span> --&gt; Float</span><br><span class="line"><span class="keyword">boolean</span> --&gt; Boolean</span><br><span class="line"><span class="keyword">short</span> --&gt; Short</span><br><span class="line"><span class="keyword">byte</span> -- &gt; Byte</span><br></pre></td></tr></table></figure></div><ul><li>自动装箱：将基本类型转换成为对象，例如：<code>int --&gt; Integer</code></li><li>自动拆箱：将对象转换成为基本数据类型，例如：<code>Integer --&gt; int</code></li></ul><p>对于 JDK1.5 之前集合总不能存放基本数据类型的问题，现在也能够解决。</p><h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><p>枚举是 JDK1.5 推出的一个比较重要的特性。其关键字为 <code>enum</code> 例如：定义代表交通灯的枚举</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">MyEnum</span></span>&#123;</span><br><span class="line">    RED,GREEN,YELLOW</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="静态导入"><a href="#静态导入" class="headerlink" title="静态导入"></a>静态导入</h4><ul><li>优点：使用静态导入可以使被导入类的所有静态变量和静态方法在当前类直接可见，使用这些静态成员无需再给出他们的类名。</li><li>缺点：过度使用会降低代码的可读性</li></ul><h4 id="变长参数"><a href="#变长参数" class="headerlink" title="变长参数"></a>变长参数</h4><p>在JDK1.5以前，当我们要为一个方法传递多个类型相同的参数时， 我们有两种方法解决</p><ol><li>直接传递一个数组过去</li><li>有多少个参数就传递多少个参数。</li></ol><p>例如：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printColor</span><span class="params">(String red,String green,String yellow)</span></span>&#123; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>或者</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printColor</span><span class="params">(String[] colors)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>这样编写方法参数虽然能够实现我们想要的效果，但是，这样是不是有点麻烦呢？ 再者，如果参数个数不确定，我们怎么办呢？Java JDK1.5为我们提供的可变参数就能够完美的解决这个问题.</p><p>例如：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printColor</span><span class="params">(String... colors)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>如果参数的类型相同，那么可以使用 <code>类型+三个点</code> ，后面跟一个参数名称的形式。 这样的好处就是，只要参数类型相同，无论传递几个参数都没有限制 注意：可变参数必须是参数列表的最后一项（该特性对对象和基本数据类型都适用）</p><h4 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给集合指定存入类型，上面这个集合在存入数据的时候必须存入String类型的数据，否则编译器会报错</span></span><br><span class="line">List&lt;String&gt; strs = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br></pre></td></tr></table></figure></div><p><strong>泛型</strong> 意味着编写的代码可以被不同类型的对象所重用。 可见泛型的提出是为了编写重用性更好的代码。 泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。</p><p>比如常见的集合类 <code>LinkedList</code>，其实现的接口名后有个特殊的部分 <code>&lt;&gt;</code>，而且它的成员的类型 Link 也包含一个 <code>&lt;&gt;</code>，这个符号的就是类型参数， 它使得在运行中，创建一个 LinkedList 时可以传入不同的类型，比如 <code>new LinkedList</code>，这样它的成员存放的类型也是 <code>String</code>。</p><h4 id="For-Each循环"><a href="#For-Each循环" class="headerlink" title="For-Each循环"></a>For-Each循环</h4><p>例如上面这个集合我们可以通过for-each遍历，这样更加简单清晰</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(String s : strs)&#123; </span><br><span class="line">     System.out.println(s); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>注意：使用for-each遍历集合时，要遍历的集合必须实现了Iterator接口</p></blockquote><h4 id="线程并发库-JUC"><a href="#线程并发库-JUC" class="headerlink" title="线程并发库 JUC"></a>线程并发库 JUC</h4><p>线程并发库是 Java1.5 提出的关于多线程处理的高级功能，所在包：<code>java.util.concurrent</code> 包括</p><ol><li>线程互斥工具类：Lock，ReadWriteLock</li><li>线程通信：Condition</li><li>线程池：ExecutorService</li><li>同步队列：ArrayBlockingQueue</li><li>同步集合：ConcurrentHashMap，CopyOnWriteArrayList</li><li>线程同步工具：Semaphore</li></ol><h3 id="JDK-6"><a href="#JDK-6" class="headerlink" title="JDK 6"></a>JDK 6</h3><h4 id="Desktop类和SystemTray类"><a href="#Desktop类和SystemTray类" class="headerlink" title="Desktop类和SystemTray类"></a>Desktop类和SystemTray类</h4><p>前者可以用来打开系统默认浏览器浏览指定的URL，打开系统默认邮件客户端给指定的邮箱发邮件， 用默认应用程序打开或编辑文件(比如，用记事本打开以 txt 为后缀名的文件)，<br>用系统默认的打印机打印文档；后者可以用来在系统托盘区创建一个托盘程序。</p><h4 id="使用Compiler-API"><a href="#使用Compiler-API" class="headerlink" title="使用Compiler API"></a>使用Compiler API</h4><p>现在我们可以用JDK1.6 的Compiler API(JSR 199)去动态编译Java源文件， Compiler API结合反射功能就可以实现动态的产生Java代码并编译执行这些代码，有点动态语言的特征。</p><p>这个特性对于某些需要用到动态编译的应用程序相当有用，比如JSP Web Server，当我们手动修改JSP后， 是不希望需要重启Web Server才可以看到效果的，这时候我们就可以用Compiler API来实现动态编译JSP文件。 当然，现在的JSP Web Server也是支持JSP热部署的，现在的JSP Web Server通过在运行期间通过Runtime.exec或ProcessBuilder来调用javac来编译代码， 这种方式需要我们产生另一个进程去做编译工作，不够优雅而且容易使代码依赖与特定的操作系统； Compiler API通过一套易用的标准的API提供了更加丰富的方式去做动态编译，而且是跨平台的。</p><h4 id="轻量级Http-Server-API"><a href="#轻量级Http-Server-API" class="headerlink" title="轻量级Http Server API"></a>轻量级Http Server API</h4><p>JDK1.6 提供了一个简单的 Http Server API，据此我们可以构建自己的嵌入式 Http Server， 它支持Http和Https协议，提供了HTTP1.1的部分实现，没有被实现的那部分可以通过扩展已有的 Http Server API来实现， 程序员必须自己实现 HttpHandler 接口，HttpServer 会调用 <code>HttpHandler</code> 实现类的回调方法来处理客户端请求， 在这里，我们把一个 Http 请求和它的响应称为一个交换，包装成 <code>HttpExchange</code> 类，<code>HttpServer</code> 负责将 <code>HttpExchange</code> 传给 <code>HttpHandler</code> 实现类的回调方法。</p><h4 id="用Console开发控制台程序"><a href="#用Console开发控制台程序" class="headerlink" title="用Console开发控制台程序"></a>用Console开发控制台程序</h4><p>JDK1.6 中提供了 <code>java.io.Console</code> 类专用来访问基于字符的控制台设备。 你的程序如果要与 Windows 下的 cmd 或者 Linux 下的 Terminal 交互，就可以用 <code>Console</code> 类代劳。 但我们不总是能得到可用的 Console，一个JVM是否有可用的 Console 依赖于底层平台和 JVM 如何被调用。 如果JVM是在交互式命令行(比如 Windows 的 cmd)中启动的，并且输入输出没有重定向到另外的地方，那么就可以得到一个可用的 Console 实例。</p><h4 id="对脚本语言的支持"><a href="#对脚本语言的支持" class="headerlink" title="对脚本语言的支持"></a>对脚本语言的支持</h4><p>如：ruby，groovy，javascript。</p><h3 id="JDK-7"><a href="#JDK-7" class="headerlink" title="JDK 7"></a>JDK 7</h3><h4 id="数字变量对下滑线的支持"><a href="#数字变量对下滑线的支持" class="headerlink" title="数字变量对下滑线的支持"></a>数字变量对下滑线的支持</h4><p>JDK1.7可以在数值类型的变量里添加下滑线，但是有几个地方是不能添加的</p><ol><li>数字的开头和结尾</li><li>小数点前后</li><li>F或者L前</li></ol><p>例如：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = <span class="number">1234_5678_9</span>; </span><br><span class="line"><span class="keyword">float</span> num2 = <span class="number">222_33F</span>; </span><br><span class="line"><span class="keyword">long</span> num3 = <span class="number">123_000_111L</span>;</span><br></pre></td></tr></table></figure></div><h4 id="switch对String的支持"><a href="#switch对String的支持" class="headerlink" title="switch对String的支持"></a>switch对String的支持</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String status = <span class="string">&quot;orderState&quot;</span>;     </span><br><span class="line"><span class="keyword">switch</span> (status) &#123;   </span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;ordercancel&quot;</span>:   </span><br><span class="line">        System.out.println(<span class="string">&quot;订单取消&quot;</span>);   </span><br><span class="line">        <span class="keyword">break</span>;   </span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;orderSuccess&quot;</span>:   </span><br><span class="line">        System.out.println(<span class="string">&quot;预订成功&quot;</span>);   </span><br><span class="line">        <span class="keyword">break</span>;   </span><br><span class="line">    <span class="keyword">default</span>:   </span><br><span class="line">        System.out.println(<span class="string">&quot;状态未知&quot;</span>);   </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></div><h4 id="try-with-resource"><a href="#try-with-resource" class="headerlink" title="try-with-resource"></a>try-with-resource</h4><ul><li><code>try-with-resources</code> 是一个定义了一个或多个资源的 try 声明，这个资源是指程序处理完它之后需要关闭它的对象。</li><li><code>try-with-resources</code> 确保每一个资源在处理完成后都会被关闭。</li></ul><p>可以使用try-with-resources的资源有： 任何实现了 <code>java.lang.AutoCloseable</code> 接口 <code>java.io.Closeable</code> 接口的对象。</p><p>例如：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">readFirstLineFromFile</span><span class="params">(String path)</span> <span class="keyword">throws</span> IOException </span>&#123;   </span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> (BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(path))) &#123;   </span><br><span class="line">        <span class="keyword">return</span> br.readLine();   </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure></div><p>在 java 7 以及以后的版本里，<code>BufferedReader</code> 实现了 <code>java.lang.AutoCloseable</code> 接口。 由于 <code>BufferedReader</code> 定义在 <code>try-with-resources</code> 声明里，无论 <code>try</code> 语句正常还是异常的结束， 它都会自动的关掉。而在 java7 以前，你需要使用 <code>finally</code> 块来关掉这个对象。</p><h4 id="捕获多种异常并用改进后的类型检查来重新抛出异常"><a href="#捕获多种异常并用改进后的类型检查来重新抛出异常" class="headerlink" title="捕获多种异常并用改进后的类型检查来重新抛出异常"></a>捕获多种异常并用改进后的类型检查来重新抛出异常</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static void first()&#123;   </span><br><span class="line">    try &#123;   </span><br><span class="line">        BufferedReader reader &#x3D; new BufferedReader(new FileReader(&quot;&quot;));   </span><br><span class="line">        Connection con &#x3D; null;   </span><br><span class="line">        Statement stmt &#x3D; con.createStatement();   </span><br><span class="line">    &#125; catch (IOException | SQLException e) &#123;   </span><br><span class="line">        &#x2F;&#x2F;捕获多个异常，e就是final类型的   </span><br><span class="line">        e.printStackTrace();   </span><br><span class="line">    &#125;   </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></div><p>优点：用一个 <code>catch</code> 处理多个异常，比用多个 <code>catch</code> 每个处理一个异常生成的字节码要更小更高效。</p><h4 id="创建泛型时类型推断"><a href="#创建泛型时类型推断" class="headerlink" title="创建泛型时类型推断"></a>创建泛型时类型推断</h4><p>只要编译器可以从上下文中推断出类型参数，你就可以用一对空着的尖括号 <code>&lt;&gt;</code> 来代替泛型参数。 这对括号私下被称为菱形(diamond)。 在Java SE 7之前，你声明泛型对象时要这样</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br></pre></td></tr></table></figure></div><p>而在Java SE7以后，你可以这样</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure></div><p>因为编译器可以从前面(List)推断出推断出类型参数，所以后面的 <code>ArrayList</code> 之后可以不用写泛型参数了，只用一对空着的尖括号就行。 当然，你必须带着菱形 <code>&lt;&gt;</code>，否则会有警告的。 Java SE7 只支持有限的类型推断：只有构造器的参数化类型在上下文中被显著的声明了，你才可以使用类型推断，否则不行。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();l</span><br><span class="line">list.add(<span class="string">&quot;A&quot;</span>); </span><br><span class="line"><span class="comment">//这个不行 </span></span><br><span class="line">list.addAll(<span class="keyword">new</span> ArrayList&lt;&gt;()); </span><br><span class="line"><span class="comment">// 这个可以 </span></span><br><span class="line">List&lt;? extends String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;&gt;(); </span><br><span class="line">list.addAll(list2);</span><br></pre></td></tr></table></figure></div><h3 id="JDK-8"><a href="#JDK-8" class="headerlink" title="JDK 8"></a>JDK 8</h3><h4 id="Lambda表达式和函数式接口"><a href="#Lambda表达式和函数式接口" class="headerlink" title="Lambda表达式和函数式接口"></a>Lambda表达式和函数式接口</h4><p>Lambda表达式（也称为闭包）是Java 8中最大和最令人期待的语言改变。它允许我们将函数当成参数传递给某个方法， 或者把代码本身当作数据处理：函数式开发者非常熟悉这些概念。很多JVM平台上的语言（Groovy、Scala等）从诞生之日就支持Lambda表达式，但是Java开发者没有选择，只能使用匿名内部类代替Lambda表达式。 Lambda的设计耗费了很多时间和很大的社区力量，最终找到一种折中的实现方案，可以实现简洁而紧凑的语言结构。最简单的Lambda表达式可由逗号分隔的参数列表、-&gt;符号和语句块组成。</p><p>Lambda的设计者们为了让现有的功能与Lambda表达式良好兼容，考虑了很多方法，于是产生了函数接口这个概念。函数接口指的是只有一个函数的接口，这样的接口可以隐式转换为Lambda表达式。java.lang.Runnable和java.util.concurrent.Callable是函数式接口的最佳例子。在实践中，函数式接口非常脆弱：只要某个开发者在该接口中添加一个函数，则该接口就不再是函数式接口进而导致编译失败。为了克服这种代码层面的脆弱性，并显式说明某个接口是函数式接口，Java 8 提供了一个特殊的注解@FunctionalInterface（Java 库中的所有相关接口都已经带有这个注解了），举个简单的函数式接口的定义</p><h4 id="接口的默认方法和静态方法"><a href="#接口的默认方法和静态方法" class="headerlink" title="接口的默认方法和静态方法"></a>接口的默认方法和静态方法</h4><p>Java 8使用两个新概念扩展了接口的含义：默认方法和静态方法。默认方法使得接口有点类似traits，不过要实现的目标不一样。默认方法使得开发者可以在 不破坏二进制兼容性的前提下，往现存接口中添加新的方法，即不强制那些实现了该接口的类也同时实现这个新加的方法。 默认方法和抽象方法之间的区别在于抽象方法需要实现，而默认方法不需要。接口提供的默认方法会被接口的实现类继承或者覆写 由于JVM上的默认方法的实现在字节码层面提供了支持，因此效率非常高。默认方法允许在不打破现有继承体系的基础上改进接口。该特性在官方库中的应用是：给java.util.Collection接口添加新方法，如stream()、parallelStream()、forEach()和removeIf()等等。 尽管默认方法有这么多好处，但在实际开发中应该谨慎使用：在复杂的继承体系中，默认方法可能引起歧义和编译错误。如果你想了解更多细节，可以参考官方文档。</p><h4 id="更好的类型推断"><a href="#更好的类型推断" class="headerlink" title="更好的类型推断"></a>更好的类型推断</h4><p>Java 8 编译器在类型推断方面有很大的提升，在很多场景下编译器可以推导出某个参数的数据类型，从而使得代码更为简洁。</p><p>参数 <code>Value.defaultValue()</code> 的类型由编译器推导得出，不需要显式指明。在Java 7中这段代码会有编译错误，除非使用 <code>Value.&lt;String&gt;defaultValue()</code>。</p><h4 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h4><p>Java应用中最常见的bug就是空值异常。在Java 8之前，Google Guava引入了 <code>Optionals</code> 类来解决 <code>NullPointerException</code>， 从而避免源码被各种 <code>null</code> 检查污染，以便开发者写出更加整洁的代码。Java 8也将Optional加入了官方库。 <code>Optional</code> 仅仅是一个容易存放T类型的值或者null。它提供了一些有用的接口来避免显式的null检查，可以参考Java 8官方文档了解更多细节。</p><p>如果Optional实例持有一个非空值，则 <code>isPresent()</code> 方法返回true，否则返回false；<code>orElseGet()</code> 方法，Optional实例持有null， 则可以接受一个lambda表达式生成的默认值；map()方法可以将现有的 <code>Optional</code> 实例的值转换成新的值；orElse()方法与orElseGet()方法类似， 但是在持有null的时候返回传入的默认值。</p><h4 id="Streams"><a href="#Streams" class="headerlink" title="Streams"></a>Streams</h4><p>新增的Stream API（java.util.stream）将生成环境的函数式编程引入了Java库中。 这是目前为止最大的一次对Java库的完善，以便开发者能够写出更加有效、更加简洁和紧凑的代码。</p><p>Task 类有一个分数（或伪复杂度）的概念，另外还有两种状态：OPEN 或者 CLOSED。现在假设有一个task集合， 首先看一个问题：在这个task集合中一共有多少个OPEN状态的点？在Java 8之前，要解决这个问题，则需要使用foreach循环遍历task集合； 但是在Java 8中可以利用steams解决：包括一系列元素的列表，并且支持顺序和并行处理。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Collection&lt;Task&gt; tasks = Arrays.asList(</span><br><span class="line">        <span class="keyword">new</span> Task(Status.OPEN, <span class="number">5</span>),</span><br><span class="line">        <span class="keyword">new</span> Task(Status.OPEN, <span class="number">13</span>),</span><br><span class="line">        <span class="keyword">new</span> Task(Status.CLOSED, <span class="number">8</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Calculate total points of all active tasks using sum()</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> totalPointsOfOpenTasks = tasks</span><br><span class="line">        .stream()</span><br><span class="line">        .filter(task -&gt; task.getStatus() == Status.OPEN)</span><br><span class="line">        .mapToInt(Task::getPoints)</span><br><span class="line">        .sum();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;Total points: &quot;</span> + totalPointsOfOpenTasks);</span><br></pre></td></tr></table></figure></div><p>这里有很多知识点值得说。首先，tasks集合被转换成steam表示；其次，在steam上的filter操作会过滤掉所有CLOSED的task； 第三，mapToInt操作基于每个task实例的Task::getPoints方法将task流转换成Integer集合；最后，通过sum方法计算总和，得出最后的结果。</p><h4 id="新的日期时间-API"><a href="#新的日期时间-API" class="headerlink" title="新的日期时间 API"></a>新的日期时间 API</h4><p>Java 8引入了新的Date-Time API(JSR 310)来改进时间、日期的处理。时间和日期的管理一直是最令Java开发者痛苦的问题。 java.util.Date 和后来的 java.util.Calendar 一直没有解决这个问题（甚至令开发者更加迷茫）。</p><p>因为上面这些原因，诞生了第三方库Joda-Time，可以替代Java的时间管理API。 Java 8中新的时间和日期管理API深受Joda-Time影响，并吸收了很多Joda-Time的精华。 新的java.time包包含了所有关于日期、时间、时区、Instant（跟日期类似但是精确到纳秒）、duration（持续时间）和时钟操作的类。 新设计的API认真考虑了这些类的不变性（从java.util.Calendar吸取的教训），如果某个实例需要修改，则返回一个新的对象。</p><p>第二，关注下LocalDate和LocalTime类。LocalDate仅仅包含ISO-8601日历系统中的日期部分；LocalTime则仅仅包含该日历系统中的时间部分。这两个类的对象都可以使用Clock对象构建得到。 LocalDateTime类包含了LocalDate和LocalTime的信息，但是不包含ISO-8601日历系统中的时区信息。这里有一些关于LocalDate和LocalTime的例子： 如果你需要特定时区的data/time信息，则可以使用ZoneDateTime，它保存有ISO-8601日期系统的日期和时间，而且有时区信息。</p><h4 id="Nashorn-JavaScript引擎"><a href="#Nashorn-JavaScript引擎" class="headerlink" title="Nashorn JavaScript引擎"></a>Nashorn JavaScript引擎</h4><p>Java 8提供了新的Nashorn JavaScript引擎，使得我们可以在JVM上开发和运行JS应用。 Nashorn JavaScript引擎是javax.script.ScriptEngine的另一个实现版本，这类Script引擎遵循相同的规则，允许Java和JavaScript交互使用，例子代码如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Js"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fun1 = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    print(<span class="string">&#x27;Hi there from Javascript, &#x27;</span> + name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;greetings from javascript&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fun2 = <span class="function"><span class="keyword">function</span> (<span class="params">object</span>) </span>&#123;</span><br><span class="line">    print(<span class="string">&quot;JS Class Definition: &quot;</span> + <span class="built_in">Object</span>.prototype.toString.call(object));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ScriptEngine engine = <span class="keyword">new</span> ScriptEngineManager().getEngineByName(<span class="string">&quot;nashorn&quot;</span>);</span><br><span class="line">        engine.eval(<span class="keyword">new</span> FileReader(<span class="string">&quot;java8-nashorn/src/main/resources/nashorn1.js&quot;</span>));</span><br><span class="line"></span><br><span class="line">        Invocable invocable = (Invocable) engine;</span><br><span class="line">        Object result = invocable.invokeFunction(<span class="string">&quot;fun1&quot;</span>, <span class="string">&quot;Peter Parker&quot;</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        System.out.println(result.getClass());</span><br><span class="line"></span><br><span class="line">        invocable.invokeFunction(<span class="string">&quot;fun2&quot;</span>, <span class="keyword">new</span> Date());</span><br><span class="line">        invocable.invokeFunction(<span class="string">&quot;fun2&quot;</span>, LocalDateTime.now());</span><br><span class="line">        invocable.invokeFunction(<span class="string">&quot;fun2&quot;</span>, <span class="keyword">new</span> Person());</span><br></pre></td></tr></table></figure></div><h4 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h4><p>对 Base64 编码的支持已经被加入到Java 8官方库中，这样不需要使用第三方库就可以进行Base64编码，例子代码如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> String text = <span class="string">&quot;Lets Learn Java 8!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> String encoded = Base64</span><br><span class="line">        .getEncoder()</span><br><span class="line">        .encodeToString(text.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">System.out.println(encoded);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> String decoded = <span class="keyword">new</span> String(</span><br><span class="line">        Base64.getDecoder().decode(encoded),</span><br><span class="line">        StandardCharsets.UTF_8);</span><br><span class="line">System.out.println(decoded);</span><br></pre></td></tr></table></figure></div><p>新的Base64API也支持URL和MINE的编码解码。</p><h2 id="Default-Methods-for-Interface"><a href="#Default-Methods-for-Interface" class="headerlink" title="Default Methods for Interface"></a>Default Methods for Interface</h2><p>Java 8 允许我们为接口添加非抽象的方法通过 <strong>default</strong>  关键字。当然静态方法的实现也是允许的。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Formula</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> a)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认方法实现</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">double</span> <span class="title">sqrt</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.sqrt(a);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 静态方法实现</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;hello world&quot;</span>);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>所以我们实现接口的时候只需要实现抽象方法就可以了，默认方法可以直接使用。下面例子 The formula is implemented as an anonymous object.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Formula formula = <span class="keyword">new</span> Formula() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqrt(a * <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">formula.calculate(<span class="number">100</span>);     <span class="comment">// 100.0</span></span><br><span class="line">formula.sqrt(<span class="number">16</span>);           <span class="comment">// 4.0</span></span><br></pre></td></tr></table></figure></div><h2 id="Lambda-expression"><a href="#Lambda-expression" class="headerlink" title="Lambda expression"></a>Lambda expression</h2><p><strong>λ演算</strong>（英语：lambda calculus，λ-calculus）是一套从数学逻辑中发展，以变量绑定和替换的规则，来研究<a href="https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B0">函数</a>如何抽象化定义、函数如何被应用以及<a href="https://zh.wikipedia.org/wiki/%E9%80%92%E5%BD%92">递归</a>的<a href="https://zh.wikipedia.org/wiki/%E5%BD%A2%E5%BC%8F%E7%B3%BB%E7%B5%B1">形式系统</a>。它由数学家<a href="https://zh.wikipedia.org/wiki/%E9%98%BF%E9%9A%86%E4%BD%90%C2%B7%E9%82%B1%E5%A5%87">阿隆佐·邱奇</a>在20世纪30年代首次发表。lambda演算作为一种广泛用途的计算模型，可以清晰地定义什么是一个可计算函数，而任何可计算函数都能以这种形式表达和求值，它能模拟单一磁带<a href="https://zh.wikipedia.org/wiki/%E5%9B%BE%E7%81%B5%E6%9C%BA">图灵机</a>的计算过程；尽管如此，lambda演算强调的是变换规则的运用，而非实现它们的具体机器。</p><p>更多介绍请教wiki爸爸，虽然我看的一脸懵逼 <a href="https://zh.wikipedia.org/wiki/%CE%9B%E6%BC%94%E7%AE%97"><strong>wiki</strong></a></p><p>简单的说 lambda expression就是一个匿名的函数，通常作为其他函数的参数。</p><p>下面通过一个例子简单介绍下</p><p>之前版本的我们写</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; names = Arrays.asList(<span class="string">&quot;peter&quot;</span>, <span class="string">&quot;anna&quot;</span>, <span class="string">&quot;mike&quot;</span>, <span class="string">&quot;xenia&quot;</span>);</span><br><span class="line"></span><br><span class="line">Collections.sort(names, <span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String a, String b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> b.compareTo(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><p>取代之前创建匿名内部类的方法，通过 Java8 我们可以用更少的代码来实现：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Collections.sort(names, (String a, String b) -&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> b.compareTo(a);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><p>如果方法只有一行语句，那么花括号 <strong>{}</strong> 是可选的，并且假如这一行语句有返回值，那么 <strong>return</strong> 关键字也是可选的。所以我们的代码更精简了：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Collections.sort(names, (String a, String b) -&gt; b.compareTo(a));</span><br></pre></td></tr></table></figure></div><p>Lambda 的参数类型可以由上下文推算而出，所以，参数类型也是可选的，</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Collections.sort(names, (a, b) -&gt; b.compareTo(a));</span><br></pre></td></tr></table></figure></div><p>下面我们就看看 lambda的相关特性和实现</p><h3 id="Diff-with-Anonymous-Classes"><a href="#Diff-with-Anonymous-Classes" class="headerlink" title="Diff with Anonymous Classes"></a>Diff with Anonymous Classes</h3><p>在JVM层面，Lambda表达式和匿名内部类有着明显的差别。</p><p><strong>匿名内部类仍然是一个类，只是不需要程序员显示指定类名，编译器会自动为该类取名</strong>。因此如果有如下形式的代码，编译之后将会产生两个class文件：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainAnonymousClass</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Anonymous Class Thread run()&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>编译之后文件分布如下，两个class文件分别是主类和匿名内部类产生的：</p><p><a href="https://github.com/CarpenterLee/JavaLambdaInternals/blob/master/Figures/2-AnonymousClass.png"><img src="https://github.com/CarpenterLee/JavaLambdaInternals/raw/master/Figures/2-AnonymousClass.png" alt="2-AnonymousClass.png"></a></p><p>进一步分析主类MainAnonymousClass.class的字节码，可发现其创建了匿名内部类的对象：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javap -c MainAnonymousClass.class</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainAnonymousClass</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    Code:</span><br><span class="line">       0: new           #2                  // class java/lang/Thread</span><br><span class="line">       <span class="number">3</span>: dup</span><br><span class="line">       4: new           #3                  // class MainAnonymousClass$1 /*创建内部类对象*/</span><br><span class="line">       <span class="number">7</span>: dup</span><br><span class="line">       8: invokespecial #4                  // Method MainAnonymousClass$1.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">      11: invokespecial #5                  // Method java/lang/Thread.&quot;&lt;init&gt;&quot;:(Ljava/lang/Runnable;)V</span><br><span class="line">      14: invokevirtual #6                  // Method java/lang/Thread.start:()V</span><br><span class="line">      <span class="number">17</span>: <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><strong>Lambda表达式通过invokedynamic指令实现，书写Lambda表达式不会产生新的类</strong>。如果有如下代码，编译之后只有一个class文件：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainLambda</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> Thread(</span><br><span class="line">() -&gt; System.out.println(<span class="string">&quot;Lambda Thread run()&quot;</span>)</span><br><span class="line">).start();;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>编译之后的结果：</p><p><a href="https://github.com/CarpenterLee/JavaLambdaInternals/blob/master/Figures/2-Lambda.png"><img src="https://github.com/CarpenterLee/JavaLambdaInternals/raw/master/Figures/2-Lambda.png" alt="2-Lambda"></a></p><p>通过javap反编译命名，我们更能看出Lambda表达式内部表示的不同：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javap -c -p MainLambda.class</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainLambda</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    Code:</span><br><span class="line">       0: new           #2                  // class java/lang/Thread</span><br><span class="line">       <span class="number">3</span>: dup</span><br><span class="line">       4: invokedynamic #3,  0              // InvokeDynamic #0:run:()Ljava/lang/Runnable; /*使用invokedynamic指令调用*/</span><br><span class="line">       9: invokespecial #4                  // Method java/lang/Thread.&quot;&lt;init&gt;&quot;:(Ljava/lang/Runnable;)V</span><br><span class="line">      12: invokevirtual #5                  // Method java/lang/Thread.start:()V</span><br><span class="line">      <span class="number">15</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> lambda$main$<span class="number">0</span>();  <span class="comment">/*Lambda表达式被封装成主类的私有方法*/</span></span><br><span class="line">    Code:</span><br><span class="line">       0: getstatic     #6                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">       3: ldc           #7                  // String Lambda Thread run()</span><br><span class="line">       5: invokevirtual #8                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">       <span class="number">8</span>: <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>反编译之后我们发现Lambda表达式被封装成了主类的一个私有方法，并通过<em>invokedynamic</em>指令进行调用。</p><p>既然Lambda表达式不是内部类的简写，那么Lambda内部的<code>this</code>引用也就跟内部类对象没什么关系了。在Lambda表达式中<code>this</code>的意义跟在表达式外部完全一样。因此下列代码将输出两遍<code>Hello Hoolee</code>，而不是两个引用地址。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">Runnable r1 = () -&gt; &#123; System.out.println(<span class="keyword">this</span>); &#125;;</span><br><span class="line">Runnable r2 = () -&gt; &#123; System.out.println(toString()); &#125;;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> Hello().r1.run();</span><br><span class="line"><span class="keyword">new</span> Hello().r2.run();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;Hello Hoolee&quot;</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="lambda-Scope"><a href="#lambda-Scope" class="headerlink" title="lambda Scope"></a>lambda Scope</h3><p>lambda Scope实际上跟匿名内部类差不多，只不过 <strong>local variables</strong> 可以不声明未final，但是实际上是一个隐final。因为java8 中 lambda 代码块相当于闭包，闭包中被引用的局部变量是不能进行更改的。这也是为什么函数式编程可以很容易做到线程安全，很适合并发编程的原因。</p><p>下面通过几个小例子说明一下 lambda 的作用域</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">Converter&lt;Integer, String&gt; stringConverter =</span><br><span class="line">        (from) -&gt; String.valueOf(from + num);</span><br><span class="line">stringConverter.convert(<span class="number">2</span>);     <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">Converter&lt;Integer, String&gt; stringConverter =</span><br><span class="line">        (from) -&gt; String.valueOf(from + num);</span><br><span class="line">stringConverter.convert(<span class="number">2</span>);     <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// Variable used in lambda expression should be final or effectively final</span></span><br><span class="line">Converter&lt;Integer, String&gt; stringConverter =</span><br><span class="line">        (from) -&gt; String.valueOf(from + num); <span class="comment">// 无法编译</span></span><br><span class="line">num = <span class="number">3</span>;</span><br></pre></td></tr></table></figure></div><p>在lambda表达式中更改局部变量 num 的值同样是不允许的。</p><p>如果是 <strong>static variables</strong> 或是 <strong>fields</strong> 就跟匿名内部类一样了，无论在lambda 表达式内部还是外部都是进行修改</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lambda4</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> outerStaticNum;</span><br><span class="line">    <span class="keyword">int</span> outerNum;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testScopes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Converter&lt;Integer, String&gt; stringConverter1 = (from) -&gt; &#123;</span><br><span class="line">            outerNum = <span class="number">23</span>;</span><br><span class="line">            <span class="keyword">return</span> String.valueOf(from);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Converter&lt;Integer, String&gt; stringConverter2 = (from) -&gt; &#123;</span><br><span class="line">            outerStaticNum = <span class="number">72</span>;</span><br><span class="line">            <span class="keyword">return</span> String.valueOf(from);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>还记得前面我们定义的函数接口 <strong>Formula</strong> 吗，接口公式定义了一个默认方法sqrt，可以从包括匿名对象在内的每个公式实例访问该方法。这不适用于lambda表达式。</p><p>不能从lambda表达式中访问 <strong>default interface method</strong>，以下代码无法编译</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Formula formula = (a) -&gt; sqrt( a * <span class="number">100</span>);</span><br></pre></td></tr></table></figure></div><h3 id="Functional-Interfaces"><a href="#Functional-Interfaces" class="headerlink" title="Functional Interfaces"></a>Functional Interfaces</h3><p><strong>lambda</strong> 表达式如何适应Java的类型系统呢？转换lambda表达式的类型总是函数接口类型。所以，一个函数接口必须<strong>有且只有一个抽象方法声明</strong>。该类型的每个lambda表达式都将匹配到这个抽象方法。</p><p>下面有个小例子，Runnable是一个函数接口，它只有一个方法run()。因此，当您将lambda表达式传递给Thread类的构造函数时，编译器会尝试将该表达式转换为等价的可运行代码，如第一个代码示例所示。如果编译器成功，则一切正常运行，如果编译器无法将表达式转换为等效的实现代码，则会产生错误。在上面的例子中，lambda表达式被转换为Runnable类型。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;howtodoinjava&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(</span><br><span class="line">            () -&gt;   &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;My Runnable&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">         ).start();</span><br></pre></td></tr></table></figure></div><p>为了确保接口满足需求，您应该添加 <strong>@FunctionalInterface</strong> 注解，编译器知道这个注释，并在您试图向接口添加第二个抽象方法声明时抛出编译器错误。当然，注解省略也是可以的。</p><p>因为默认方法有一个实现，所以它们不是抽象的。因为默认方法不是抽象的，所以您可以随意将默认方法添加到您的函数接口中。当然静态方法也同理。</p><p>如果接口声明一个抽象方法覆盖 <strong>java.lang.Object</strong> 的一个公共方法，这也不计入接口的抽象方法计数，因为该接口的任何实现都有一个来自 java.lang.Object 的实现。Comparator是一个函数接口，尽管它声明了两个抽象方法。为什么?因为其中一个抽象方法equals()它的签名等于Object类中的public方法。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Converter</span>&lt;<span class="title">F</span>, <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">T <span class="title">convert</span><span class="params">(F from)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">haha</span><span class="params">()</span></span>; <span class="comment">// 编译错误</span></span><br><span class="line">    <span class="comment">// 默认方法</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 静态方法也是允许的，可以少写工具类</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fourWork</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;today is a nice day&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>;                <span class="comment">//Overridden from Object class</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>;        <span class="comment">//Overridden from Object class</span></span><br><span class="line">&#125;</span><br><span class="line">Converter&lt;String, Integer&gt; converter = (from) -&gt; Integer.valueOf(from);</span><br><span class="line">Integer converted = converter.convert(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">System.out.println(converted);    <span class="comment">// 123</span></span><br></pre></td></tr></table></figure></div><p>功能接口只显示一个功能。例如，使用具有单个方法 compareTo 的可比较接口进行比较。</p><h3 id="Method-References"><a href="#Method-References" class="headerlink" title="Method References"></a>Method References</h3><p>简单的说就是对于 lambda 表达式中只有一个参数，并且箭头右边的逻辑是对入参执行一个函数：</p><p>即 <code>x =&gt; f(x)</code><br>则可以简写为<code>f</code></p><p>Java8 用 <strong>class::methodName</strong> 来表示 <strong>eta-conversion</strong></p><p>Method references help to point to methods by their names. A method reference is described using <code>::</code> symbol. A method reference can be used to point the following types of methods −</p><ul><li>Static methods</li><li>Instance methods</li><li>Constructors using new operator (TreeSet::new)</li></ul><p>下面看一些简单例子</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// static method -&gt; Math::max = Math.max(x,y)</span></span><br><span class="line">List&lt;Integer&gt; integers = Arrays.asList(<span class="number">1</span>,<span class="number">12</span>,<span class="number">433</span>,<span class="number">5</span>);</span><br><span class="line">Optional&lt;Integer&gt; max = integers.stream().reduce( Math::max );</span><br><span class="line">max.ifPresent(value -&gt; System.out.println(value));</span><br><span class="line"></span><br><span class="line"><span class="comment">// instance method from instance -&gt; System.out::println = System.out.println(x)</span></span><br><span class="line">ArrayList&lt;Integer&gt; numberList = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>));</span><br><span class="line">Consumer&lt;Integer&gt; action = System.out::println;</span><br><span class="line">numberList.forEach(action);</span><br><span class="line"></span><br><span class="line"><span class="comment">// instance method from class type -&gt; String::compareTo = s1.compareTo(s2)</span></span><br><span class="line">List&lt;String&gt; strings = Arrays</span><br><span class="line">                .asList(<span class="string">&quot;how&quot;</span>, <span class="string">&quot;to&quot;</span>, <span class="string">&quot;do&quot;</span>, <span class="string">&quot;in&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;dot&quot;</span>, <span class="string">&quot;com&quot;</span>);</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; sorted = strings</span><br><span class="line">                .stream()</span><br><span class="line">    .sorted((s1, s2) -&gt; s1.compareTo(s2))</span><br><span class="line">    .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">System.out.println(sorted);</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; sortedAlt = strings</span><br><span class="line">                .stream()</span><br><span class="line">    .sorted(String::compareTo)</span><br><span class="line">    .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">System.out.println(sortedAlt);</span><br><span class="line"></span><br><span class="line"><span class="comment">// constructor -&gt; ArrayList::new = new ArrayList</span></span><br><span class="line">List&lt;Integer&gt; integers1 = IntStream</span><br><span class="line">                .range(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">    .boxed()</span><br><span class="line">    .collect(Collectors.toCollection( ArrayList::<span class="keyword">new</span> ));</span><br><span class="line">Optional&lt;Integer&gt; max1 = integers.stream().reduce(Math::max);</span><br><span class="line">max.ifPresent(System.out::println);</span><br></pre></td></tr></table></figure></div><h3 id="Built-in-Functional-Interfaces"><a href="#Built-in-Functional-Interfaces" class="headerlink" title="Built-in Functional Interfaces"></a>Built-in Functional Interfaces</h3><p>Java 8 内置了许多函数接口，可在lambda表达式中广泛使用。</p><p>有一些是兼容旧版本的比如 <code>Comparator</code> 或者 <code>Runnable</code>，</p><p>还有一些是吸取了 <a href="https://code.google.com/p/guava-libraries/">Google Guava</a> library ，比如在  <strong>java.util.Function package</strong> 就定义了很多实用的函数接口。</p><p>不过一般我们不需要去死记它们，因为类型推导帮我们做了一切。</p><p>比如举个简单的例子，collection 的forEach方法，该方法的签名为<code>void forEach(Consumer&lt;? super E&gt; action)</code>，作用是对容器中的每个元素执行<code>action</code>指定的动作，其中<code>Consumer</code>是个函数接口，里面只有一个待实现方法<code>void accept(T t)</code>（后面我们会看到，这个方法叫什么根本不重要，你甚至不需要记忆它的名字）。</p><p>需求：<em>假设有一个字符串列表，需要打印出其中所有长度大于3的字符串.</em></p><p>Java7及以前我们可以用增强的for循环实现：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用增强for循环迭代</span></span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="string">&quot;I&quot;</span>, <span class="string">&quot;love&quot;</span>, <span class="string">&quot;you&quot;</span>, <span class="string">&quot;too&quot;</span>));</span><br><span class="line"><span class="keyword">for</span>(String str : list)&#123;</span><br><span class="line">    <span class="keyword">if</span>(str.length()&gt;<span class="number">3</span>)</span><br><span class="line">        System.out.println(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>现在使用<code>forEach()</code>方法结合匿名内部类，可以这样实现：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用forEach()结合匿名内部类迭代</span></span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="string">&quot;I&quot;</span>, <span class="string">&quot;love&quot;</span>, <span class="string">&quot;you&quot;</span>, <span class="string">&quot;too&quot;</span>));</span><br><span class="line">list.forEach(<span class="keyword">new</span> Consumer&lt;String&gt;()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(str.length()&gt;<span class="number">3</span>)</span><br><span class="line">            System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><p>上述代码调用<code>forEach()</code>方法，并使用匿名内部类实现<code>Comsumer</code>接口。到目前为止我们没看到这种设计有什么好处，但是不要忘记Lambda表达式，使用Lambda表达式实现如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用forEach()结合Lambda表达式迭代</span></span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="string">&quot;I&quot;</span>, <span class="string">&quot;love&quot;</span>, <span class="string">&quot;you&quot;</span>, <span class="string">&quot;too&quot;</span>));</span><br><span class="line">list.forEach(str -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span>(str.length()&gt;<span class="number">3</span>)</span><br><span class="line">            System.out.println(str);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></div><p>上述代码给<code>forEach()</code>方法传入一个Lambda表达式，我们不需要知道<code>accept()</code>方法，也不需要知道<code>Consumer</code>接口，类型推导帮我们做了一切。</p><p>这里，简单列几个常用的函数接口，</p><h4 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate<T></h4><p><code>Represents a predicate (Boolean-valued function) of one argument.The interface contains various default methods for composing predicates to complex logical terms (and, or, negate)</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">      List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Predicate&lt;Integer&gt; predicate = n -&gt; true</span></span><br><span class="line">      <span class="comment">// n is passed as parameter to test method of Predicate interface</span></span><br><span class="line">      <span class="comment">// test method will always return true no matter what value n has.</span></span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">&quot;Print all numbers:&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//pass n as parameter</span></span><br><span class="line">      eval(list, n-&gt;<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Predicate&lt;Integer&gt; predicate1 = n -&gt; n%2 == 0</span></span><br><span class="line">      <span class="comment">// n is passed as parameter to test method of Predicate interface</span></span><br><span class="line">      <span class="comment">// test method will return true if n%2 comes to be zero</span></span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">&quot;Print even numbers:&quot;</span>);</span><br><span class="line">      eval(list, n-&gt; n%<span class="number">2</span> == <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Predicate&lt;Integer&gt; predicate2 = n -&gt; n &gt; 3</span></span><br><span class="line">      <span class="comment">// n is passed as parameter to test method of Predicate interface</span></span><br><span class="line">      <span class="comment">// test method will return true if n is greater than 3.</span></span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">&quot;Print numbers greater than 3:&quot;</span>);</span><br><span class="line">      eval(list, n-&gt; n &gt; <span class="number">3</span> );</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">eval</span><span class="params">(List&lt;Integer&gt; list, Predicate&lt;Integer&gt; predicate)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span>(Integer n: list) &#123;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span>(predicate.test(n)) &#123;</span><br><span class="line">            System.out.println(n + <span class="string">&quot; &quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div><h4 id="Function-lt-T-R-gt"><a href="#Function-lt-T-R-gt" class="headerlink" title="Function&lt;T,R&gt;"></a>Function&lt;T,R&gt;</h4><p><code>Represents a function that accepts one argument and produces a result.Default methods can be used to chain multiple functions together (compose, andThen).</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Function&lt;String, Integer&gt; toInteger = Integer::valueOf;</span><br><span class="line">Function&lt;String, String&gt; backToString = toInteger.andThen(String::valueOf);</span><br><span class="line"></span><br><span class="line">backToString.apply(<span class="string">&quot;123&quot;</span>);     <span class="comment">// &quot;123&quot;</span></span><br></pre></td></tr></table></figure></div><h4 id="Supplier"><a href="#Supplier" class="headerlink" title="Supplier"></a>Supplier<T></h4><p><code>Suppliers produce a result of a given generic type. Unlike Functions, Suppliers don&#39;t accept arguments.</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Supplier&lt;Person&gt; personSupplier = Person::<span class="keyword">new</span>;</span><br><span class="line">personSupplier.get();   <span class="comment">// new Person</span></span><br></pre></td></tr></table></figure></div><h4 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer<T></h4><p><code>Consumers represents operations to be performed on a single input argument.</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">consumer&lt;Person&gt; greeter = (p) -&gt; System.out.println(<span class="string">&quot;Hello, &quot;</span> + p.firstName);</span><br><span class="line">greeter.accept(<span class="keyword">new</span> Person(<span class="string">&quot;Luke&quot;</span>, <span class="string">&quot;Skywalker&quot;</span>));</span><br></pre></td></tr></table></figure></div><h4 id="Comparators"><a href="#Comparators" class="headerlink" title="Comparators"></a>Comparators</h4><p><code>Comparators are well known from older versions of Java. Java 8 adds various default methods to the interface.</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;Person&gt; comparator = (p1, p2) -&gt; p1.firstName.compareTo(p2.firstName);</span><br><span class="line"></span><br><span class="line">Person p1 = <span class="keyword">new</span> Person(<span class="string">&quot;John&quot;</span>, <span class="string">&quot;Doe&quot;</span>);</span><br><span class="line">Person p2 = <span class="keyword">new</span> Person(<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Wonderland&quot;</span>);</span><br><span class="line"></span><br><span class="line">comparator.compare(p1, p2);             <span class="comment">// &gt; 0</span></span><br><span class="line">comparator.reversed().compare(p1, p2);  <span class="comment">// &lt; 0</span></span><br></pre></td></tr></table></figure></div><h2 id="Streams-1"><a href="#Streams-1" class="headerlink" title="Streams"></a>Streams</h2><p>A <strong>Collection is an in-memory data structure</strong>, </p><p>A <strong>Stream is a conceptually fixed data structure, in which elements are computed on demand</strong>.</p><p>This is a form of a <strong>producer-consumer</strong> relationship.</p><p>In java, java.util.Stream represents a stream on which one or more operations can be performed. Stream <strong>operations are either intermediate or terminal</strong>. While <strong>terminal operations return a result of a certain type</strong>, <strong>intermediate operations return the stream itself</strong> so you can chain multiple method calls in a row. Streams are created on a source, e.g. a java.util.Collection like lists or sets (maps are not supported). Stream operations can either be executed sequential or parallel.</p><p>简单来说，流就相当于我们在线看电影一样，不需要下载整部电影，只关注我们感兴趣的地方。流只是数据源的一个视图，我们可以对这个视图进行过滤，映射，排序，统计等一系列操作，而不会影响到数据源，并且在流上的操作是按需执行的，执行后即失效，所以很适合于函数编程。</p><h3 id="Streams-processing-order"><a href="#Streams-processing-order" class="headerlink" title="Streams  processing order"></a>Streams  processing order</h3><p>衔接操作的一个重要特性就是延迟性。观察下面没有终止操作的例子：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Stream.of(<span class="string">&quot;d2&quot;</span>, <span class="string">&quot;a2&quot;</span>, <span class="string">&quot;b1&quot;</span>, <span class="string">&quot;b3&quot;</span>, <span class="string">&quot;c&quot;</span>)</span><br><span class="line">.filter(s -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;filter: &quot;</span> + s);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><p>执行这段代码时，不向控制台打印任何东西。这是因为衔接操作只在终止操作调用时被执行。</p><p>让我们通过添加终止操作<code>forEach</code>来扩展这个例子：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Stream.of(<span class="string">&quot;d2&quot;</span>, <span class="string">&quot;a2&quot;</span>, <span class="string">&quot;b1&quot;</span>, <span class="string">&quot;b3&quot;</span>, <span class="string">&quot;c&quot;</span>)</span><br><span class="line">.filter(s -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;filter: &quot;</span> + s);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;)</span><br><span class="line">.forEach(s -&gt; System.out.println(<span class="string">&quot;forEach: &quot;</span> + s));</span><br></pre></td></tr></table></figure></div><p>执行这段代码会得到如下输出：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">filter:  d2</span><br><span class="line">forEach: d2</span><br><span class="line">filter:  a2</span><br><span class="line">forEach: a2</span><br><span class="line">filter:  b1</span><br><span class="line">forEach: b1</span><br><span class="line">filter:  b3</span><br><span class="line">forEach: b3</span><br><span class="line">filter:  c</span><br><span class="line">forEach: c</span><br></pre></td></tr></table></figure></div><p>结果的顺序可能出人意料。原始的方法会在数据流的所有元素上，一个接一个地水平执行所有操作。但是每个元素在调用链上垂直移动。第一个字符串<code>&quot;d2&quot;</code>首先经过<code>filter</code>然后是<code>forEach</code>，执行完后才开始处理第二个字符串<code>&quot;a2&quot;</code>。</p><p>这种行为可以减少每个元素上所执行的实际操作数量，就像我们在下个例子中看到的那样：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Stream.of(<span class="string">&quot;d2&quot;</span>, <span class="string">&quot;a2&quot;</span>, <span class="string">&quot;b1&quot;</span>, <span class="string">&quot;b3&quot;</span>, <span class="string">&quot;c&quot;</span>)</span><br><span class="line">.map(s -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;map: &quot;</span> + s);</span><br><span class="line"><span class="keyword">return</span> s.toUpperCase();</span><br><span class="line">&#125;)</span><br><span class="line">.anyMatch(s -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;anyMatch: &quot;</span> + s);</span><br><span class="line"><span class="keyword">return</span> s.startsWith(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// map:      d2</span></span><br><span class="line"><span class="comment">// anyMatch: D2</span></span><br><span class="line"><span class="comment">// map:      a2</span></span><br><span class="line"><span class="comment">// anyMatch: A2</span></span><br></pre></td></tr></table></figure></div><p>只要提供的数据元素满足了谓词，<code>anyMatch</code>操作就会返回<code>true</code>。对于第二个传递<code>&quot;A2&quot;</code>的元素，它的结果为真。由于数据流的链式调用是垂直执行的，<code>map</code>这里只需要执行两次。所以<code>map</code>会执行尽可能少的次数，而不是把所有元素都映射一遍。</p><h4 id="为什么顺序如此重要"><a href="#为什么顺序如此重要" class="headerlink" title="为什么顺序如此重要"></a>为什么顺序如此重要</h4><p>下面的例子由两个衔接操作<code>map</code>和<code>filter</code>，以及一个终止操作<code>forEach</code>组成。让我们再来看看这些操作如何执行：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Stream.of(<span class="string">&quot;d2&quot;</span>, <span class="string">&quot;a2&quot;</span>, <span class="string">&quot;b1&quot;</span>, <span class="string">&quot;b3&quot;</span>, <span class="string">&quot;c&quot;</span>)</span><br><span class="line">.map(s -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;map: &quot;</span> + s);</span><br><span class="line"><span class="keyword">return</span> s.toUpperCase();</span><br><span class="line">&#125;)</span><br><span class="line">.filter(s -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;filter: &quot;</span> + s);</span><br><span class="line"><span class="keyword">return</span> s.startsWith(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.forEach(s -&gt; System.out.println(<span class="string">&quot;forEach: &quot;</span> + s));</span><br><span class="line"></span><br><span class="line"><span class="comment">// map:     d2</span></span><br><span class="line"><span class="comment">// filter:  D2</span></span><br><span class="line"><span class="comment">// map:     a2</span></span><br><span class="line"><span class="comment">// filter:  A2</span></span><br><span class="line"><span class="comment">// forEach: A2</span></span><br><span class="line"><span class="comment">// map:     b1</span></span><br><span class="line"><span class="comment">// filter:  B1</span></span><br><span class="line"><span class="comment">// map:     b3</span></span><br><span class="line"><span class="comment">// filter:  B3</span></span><br><span class="line"><span class="comment">// map:     c</span></span><br><span class="line"><span class="comment">// filter:  C</span></span><br></pre></td></tr></table></figure></div><p>就像你可能猜到的那样，<code>map</code>和<code>filter</code>会对底层集合的每个字符串调用五次，而<code>forEach</code>只会调用一次。</p><p>如果我们调整操作顺序，将<code>filter</code>移动到调用链的顶端，就可以极大减少操作的执行次数:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Stream.of(<span class="string">&quot;d2&quot;</span>, <span class="string">&quot;a2&quot;</span>, <span class="string">&quot;b1&quot;</span>, <span class="string">&quot;b3&quot;</span>, <span class="string">&quot;c&quot;</span>)</span><br><span class="line">    .filter(s -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;filter: &quot;</span> + s);</span><br><span class="line">        <span class="keyword">return</span> s.startsWith(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .map(s -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;map: &quot;</span> + s);</span><br><span class="line">        <span class="keyword">return</span> s.toUpperCase();</span><br><span class="line">    &#125;)</span><br><span class="line">    .forEach(s -&gt; System.out.println(<span class="string">&quot;forEach: &quot;</span> + s));</span><br><span class="line"></span><br><span class="line"><span class="comment">// filter:  d2</span></span><br><span class="line"><span class="comment">// filter:  a2</span></span><br><span class="line"><span class="comment">// map:     a2</span></span><br><span class="line"><span class="comment">// forEach: A2</span></span><br><span class="line"><span class="comment">// filter:  b1</span></span><br><span class="line"><span class="comment">// filter:  b3</span></span><br><span class="line"><span class="comment">// filter:  c</span></span><br></pre></td></tr></table></figure></div><p>现在，<code>map</code>只会调用一次，所以操作流水线对于更多的输入元素会执行更快。在整合复杂的方法链时，要记住这一点。</p><p>让我们通过添加额外的方法<code>sorted</code>来扩展上面的例子：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Stream.of(<span class="string">&quot;d2&quot;</span>, <span class="string">&quot;a2&quot;</span>, <span class="string">&quot;b1&quot;</span>, <span class="string">&quot;b3&quot;</span>, <span class="string">&quot;c&quot;</span>)</span><br><span class="line">    .sorted((s1, s2) -&gt; &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;sort: %s; %s\n&quot;</span>, s1, s2);</span><br><span class="line">        <span class="keyword">return</span> s1.compareTo(s2);</span><br><span class="line">    &#125;)</span><br><span class="line">    .filter(s -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;filter: &quot;</span> + s);</span><br><span class="line">        <span class="keyword">return</span> s.startsWith(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .map(s -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;map: &quot;</span> + s);</span><br><span class="line">        <span class="keyword">return</span> s.toUpperCase();</span><br><span class="line">    &#125;)</span><br><span class="line">    .forEach(s -&gt; System.out.println(<span class="string">&quot;forEach: &quot;</span> + s));</span><br></pre></td></tr></table></figure></div><p>排序是一类特殊的衔接操作。它是有状态的操作，因为你需要在处理中保存状态来对集合中的元素排序。</p><p>执行这个例子会得到如下输入：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Bash"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">sort:    a2; d2</span><br><span class="line">sort:    b1; a2</span><br><span class="line">sort:    b1; d2</span><br><span class="line">sort:    b1; a2</span><br><span class="line">sort:    b3; b1</span><br><span class="line">sort:    b3; d2</span><br><span class="line">sort:    c; b3</span><br><span class="line">sort:    c; d2</span><br><span class="line">filter:  a2</span><br><span class="line">map:     a2</span><br><span class="line">forEach: A2</span><br><span class="line">filter:  b1</span><br><span class="line">filter:  b3</span><br><span class="line">filter:  c</span><br><span class="line">filter:  d2</span><br></pre></td></tr></table></figure></div><p>首先，排序操作在整个输入集合上执行。也就是说，<code>sorted</code>以水平方式执行。所以这里<code>sorted</code>对输入集合中每个元素的多种组合调用了八次。</p><p>我们同样可以通过重排调用链来优化性能：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Stream.of(<span class="string">&quot;d2&quot;</span>, <span class="string">&quot;a2&quot;</span>, <span class="string">&quot;b1&quot;</span>, <span class="string">&quot;b3&quot;</span>, <span class="string">&quot;c&quot;</span>)</span><br><span class="line">    .filter(s -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;filter: &quot;</span> + s);</span><br><span class="line">        <span class="keyword">return</span> s.startsWith(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .sorted((s1, s2) -&gt; &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;sort: %s; %s\n&quot;</span>, s1, s2);</span><br><span class="line">        <span class="keyword">return</span> s1.compareTo(s2);</span><br><span class="line">    &#125;)</span><br><span class="line">    .map(s -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;map: &quot;</span> + s);</span><br><span class="line">        <span class="keyword">return</span> s.toUpperCase();</span><br><span class="line">    &#125;)</span><br><span class="line">    .forEach(s -&gt; System.out.println(<span class="string">&quot;forEach: &quot;</span> + s));</span><br><span class="line"></span><br><span class="line"><span class="comment">// filter:  d2</span></span><br><span class="line"><span class="comment">// filter:  a2</span></span><br><span class="line"><span class="comment">// filter:  b1</span></span><br><span class="line"><span class="comment">// filter:  b3</span></span><br><span class="line"><span class="comment">// filter:  c</span></span><br><span class="line"><span class="comment">// map:     a2</span></span><br><span class="line"><span class="comment">// forEach: A2</span></span><br></pre></td></tr></table></figure></div><p>这个例子中<code>sorted</code>永远不会调用，因为<code>filter</code>把输入集合减少至只有一个元素。所以对于更大的输入集合会极大提升性能。</p><h4 id="复用数据流"><a href="#复用数据流" class="headerlink" title="复用数据流"></a>复用数据流</h4><p>Java8的数据流不能被复用。一旦你调用了任何终止操作，数据流就关闭了：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; stream =</span><br><span class="line">Stream.of(<span class="string">&quot;d2&quot;</span>, <span class="string">&quot;a2&quot;</span>, <span class="string">&quot;b1&quot;</span>, <span class="string">&quot;b3&quot;</span>, <span class="string">&quot;c&quot;</span>)</span><br><span class="line">.filter(s -&gt; s.startsWith(<span class="string">&quot;a&quot;</span>));</span><br><span class="line"></span><br><span class="line">stream.anyMatch(s -&gt; <span class="keyword">true</span>); <span class="comment">// ok</span></span><br><span class="line">stream.noneMatch(s -&gt; <span class="keyword">true</span>); <span class="comment">// exception</span></span><br></pre></td></tr></table></figure></div><p>在相同数据流上，在<code>anyMatch</code>之后调用<code>noneMatch</code>会产生下面的异常：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalStateException: stream has already been operated upon or closed</span><br><span class="line">   at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:<span class="number">229</span>)</span><br><span class="line">   at java.util.stream.ReferencePipeline.noneMatch(ReferencePipeline.java:<span class="number">459</span>)</span><br><span class="line">   at com.winterbe.java8.Streams5.test7(Streams5.java:<span class="number">38</span>)</span><br><span class="line">   at com.winterbe.java8.Streams5.main(Streams5.java:<span class="number">28</span>)</span><br></pre></td></tr></table></figure></div><p>要克服这个限制，我们需要为每个我们想要执行的终止操作创建新的数据流调用链。例如，我们创建一个数据流供应器，来构建新的数据流，并且设置好所有衔接操作：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Supplier&lt;Stream&lt;String&gt;&gt; streamSupplier =</span><br><span class="line">    () -&gt; Stream.of(<span class="string">&quot;d2&quot;</span>, <span class="string">&quot;a2&quot;</span>, <span class="string">&quot;b1&quot;</span>, <span class="string">&quot;b3&quot;</span>, <span class="string">&quot;c&quot;</span>)</span><br><span class="line">    .filter(s -&gt; s.startsWith(<span class="string">&quot;a&quot;</span>));</span><br><span class="line"></span><br><span class="line">streamSupplier.get().anyMatch(s -&gt; <span class="keyword">true</span>); <span class="comment">// ok</span></span><br><span class="line">streamSupplier.get().noneMatch(s -&gt; <span class="keyword">true</span>); <span class="comment">// ok </span></span><br></pre></td></tr></table></figure></div><p>每次对<code>get()</code>的调用都构造了一个新的数据流，我们将其保存来调用终止操作。</p><h3 id="Create-Stream"><a href="#Create-Stream" class="headerlink" title="Create Stream"></a>Create Stream</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Stream.of(val1, val2, val3….)</span></span><br><span class="line">Stream&lt;Integer&gt; stream1 = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line">stream1.forEach(p -&gt; System.out.println(p));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Stream.of(arrayOfElements)</span></span><br><span class="line">Stream&lt;Integer&gt; stream2 = Stream.of( <span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125; );</span><br><span class="line">stream2.forEach(p -&gt; System.out.println(p));</span><br><span class="line"></span><br><span class="line"><span class="comment">// List.stream()</span></span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">    list.add(i);</span><br><span class="line">&#125;</span><br><span class="line">Stream&lt;Integer&gt; stream3 = list.stream();</span><br><span class="line">stream3.forEach(p -&gt; System.out.println(p));</span><br><span class="line"></span><br><span class="line"><span class="comment">// String chars or String tokens</span></span><br><span class="line">IntStream stream5 = <span class="string">&quot;12345_abcdefg&quot;</span>.chars();</span><br><span class="line">stream5.forEach(p -&gt; System.out.println(p));</span><br><span class="line"><span class="comment">//OR</span></span><br><span class="line">Stream&lt;String&gt; stream6 = Stream.of(<span class="string">&quot;A$B$C&quot;</span>.split(<span class="string">&quot;\\$&quot;</span>));</span><br><span class="line">stream6.forEach(p -&gt; System.out.println(p));</span><br><span class="line"></span><br><span class="line"><span class="comment">// file</span></span><br><span class="line"><span class="keyword">try</span>(Stream lines = Files.lines(Paths.get(<span class="string">&quot;文件路径名&quot;</span>),Charset.defaultCharset()))&#123;</span><br><span class="line">    <span class="comment">//可对lines做一些操作</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// create iterator stream, 创建迭代或者无限流，大都数情况需要添加limit函数限制</span></span><br><span class="line"><span class="comment">// Stream.generate() or Stream.iterate()</span></span><br><span class="line">Stream&lt;Date&gt; stream4 = Stream.generate(() -&gt; &#123; <span class="keyword">return</span> <span class="keyword">new</span> Date(); &#125;).limit(<span class="number">10</span>);</span><br><span class="line">stream4.forEach(p -&gt; System.out.println(p));</span><br><span class="line">Stream.iterate(<span class="number">0</span>, n -&gt; n + <span class="number">2</span>)</span><br><span class="line">    .limit(<span class="number">10</span>)</span><br><span class="line">    .forEach(System.out::println);</span><br></pre></td></tr></table></figure></div><h3 id="Convert-streams-to-collections"><a href="#Convert-streams-to-collections" class="headerlink" title="Convert streams to collections"></a>Convert streams to collections</h3><p>It’s just collecting the elements from the stream into a collection or array.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Convert Stream to List – Stream.collect( Collectors.toList() )</span></span><br><span class="line">      List&lt;Integer&gt; list1 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">          list1.add(i);</span><br><span class="line">      &#125;</span><br><span class="line">      Stream&lt;Integer&gt; stream1 = list1.stream();</span><br><span class="line">      List&lt;Integer&gt; evenNumbersList = stream1.filter(i -&gt; i%<span class="number">2</span> == <span class="number">0</span>).collect(Collectors.toList());</span><br><span class="line">      System.out.print(evenNumbersList);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">// Convert Stream to array – Stream.toArray( EntryType[]::new )</span></span><br><span class="line">      List&lt;Integer&gt; list2 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">          list2.add(i);</span><br><span class="line">      &#125;</span><br><span class="line">      Stream&lt;Integer&gt; stream2 = list2.stream();</span><br><span class="line">      Integer[] evenNumbersArr = stream2.filter(i -&gt; i%<span class="number">2</span> == <span class="number">0</span>).toArray(Integer[]::<span class="keyword">new</span>);</span><br><span class="line">      System.out.print(evenNumbersArr);</span><br></pre></td></tr></table></figure></div><h3 id="Core-stream-operations"><a href="#Core-stream-operations" class="headerlink" title="Core stream operations"></a>Core stream operations</h3><table><thead><tr><th></th><th></th><th>操作分类</th><th></th><th></th></tr></thead><tbody><tr><td>操作</td><td>类型</td><td>返回类型</td><td>使用的类型/函数式接口</td><td>函数描述符</td></tr><tr><td><code>filter</code></td><td>中间</td><td><code>Stream&lt;T&gt;</code></td><td><code>Predicate&lt;T&gt;</code></td><td><code>T -&gt; boolean</code></td></tr><tr><td><code>distinct</code></td><td>中间</td><td><code>Stream&lt;T&gt;</code></td><td></td><td></td></tr><tr><td><code>skip</code></td><td>中间</td><td><code>Stream&lt;T&gt;</code></td><td>long</td><td></td></tr><tr><td><code>map</code></td><td>中间</td><td><code>Stream&lt;R&gt;</code></td><td><code>Function&lt;T, R&gt;</code></td><td><code>T -&gt; R</code></td></tr><tr><td><code>flatMap</code></td><td>中间</td><td><code>Stream&lt;R&gt;</code></td><td><code>Function&lt;T, Stream&lt;R&gt;&gt;</code></td><td><code>T -&gt; Stream&lt;R&gt;</code></td></tr><tr><td><code>limit</code></td><td>中间</td><td><code>Stream&lt;T&gt;</code></td><td>long</td><td></td></tr><tr><td><code>sorted</code></td><td>中间</td><td><code>Stream&lt;T&gt;</code></td><td><code>Comparator&lt;T&gt;</code></td><td><code>(T, T) -&gt; int</code></td></tr><tr><td><code>anyMatch</code></td><td>终端</td><td><code>boolean</code></td><td><code>Predicate&lt;T&gt;</code></td><td><code>T -&gt; boolean</code></td></tr><tr><td><code>noneMatch</code></td><td>终端</td><td><code>boolean</code></td><td><code>Predicate&lt;T&gt;</code></td><td><code>T -&gt; boolean</code></td></tr><tr><td><code>allMatch</code></td><td>终端</td><td><code>boolean</code></td><td><code>Predicate&lt;T&gt;</code></td><td><code>T -&gt; boolean</code></td></tr><tr><td><code>findAny</code></td><td>终端</td><td><code>Optional&lt;T&gt;</code></td><td></td><td></td></tr><tr><td><code>findFirst</code></td><td>终端</td><td><code>Optional&lt;T&gt;</code></td><td></td><td></td></tr><tr><td><code>forEach</code></td><td>终端</td><td><code>void</code></td><td><code>Consumer&lt;T&gt;</code></td><td><code>T -&gt; void</code></td></tr><tr><td><code>collect</code></td><td>终端</td><td><code>R</code></td><td><code>Collector&lt;T, A, R&gt;</code></td><td></td></tr><tr><td><code>reduce</code></td><td>终端</td><td><code>Optional&lt;T&gt;</code></td><td><code>BinaryOperator&lt;T&gt;</code></td><td><code>(T, T) -&gt; T</code></td></tr><tr><td><code>count</code></td><td>终端</td><td><code>long</code></td><td></td><td></td></tr></tbody></table><h4 id="Intermediate-operations"><a href="#Intermediate-operations" class="headerlink" title="Intermediate operations"></a>Intermediate operations</h4><p><strong>Intermediate operations return the stream itself</strong>, so you can chain multiple method calls in a row.</p><p>中间流返回流本身。</p><p>这个简单的说就是<em>pipeline</em>操作了，类比linux的管道流，</p><p>比如我要统计一个目录下所有文件包含hello的字数并且统计出现的次数并且排序，然后筛选出前几个</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -l &#x27;hello&#x27; /tmp/* | xargs wc -w | sort -nr | head -3</span><br></pre></td></tr></table></figure></div><p>更多介绍请戳 <a href="https://martinfowler.com/articles/collection-pipeline/">collection-pipeline</a></p><p>下面我们先定义一个集合然后操作几种常用的流操作。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> List&lt;String&gt; memberNames = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">memberNames.add(<span class="string">&quot;Amitabh&quot;</span>);</span><br><span class="line">memberNames.add(<span class="string">&quot;Shekhar&quot;</span>);</span><br><span class="line">memberNames.add(<span class="string">&quot;Aman&quot;</span>);</span><br><span class="line">memberNames.add(<span class="string">&quot;Rahul&quot;</span>);</span><br><span class="line">memberNames.add(<span class="string">&quot;Shahrukh&quot;</span>);</span><br><span class="line">memberNames.add(<span class="string">&quot;Salman&quot;</span>);</span><br><span class="line">memberNames.add(<span class="string">&quot;Yana&quot;</span>);</span><br><span class="line">memberNames.add(<span class="string">&quot;Lokesh&quot;</span>);</span><br></pre></td></tr></table></figure></div><h5 id="Stream-filter"><a href="#Stream-filter" class="headerlink" title="Stream.filter()"></a>Stream.filter()</h5><p>Filter accepts a predicate to filter all elements of the stream. This operation is intermediate which enables us to call another stream operation (e.g. forEach) on the result.</p><p>过滤流获取我们需要的数据</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">memberNames.stream().filter((s) -&gt; s.startsWith(<span class="string">&quot;A&quot;</span>))</span><br><span class="line">    .forEach(System.out::println);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h5 id="Stream-distinct"><a href="#Stream-distinct" class="headerlink" title="Stream.distinct()"></a>Stream.distinct()</h5><p>函数原型为<code>Stream&lt;T&gt; distinct()</code>，作用是返回一个去除重复元素之后的<code>Stream</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; stream= Stream.of(<span class="string">&quot;I&quot;</span>, <span class="string">&quot;love&quot;</span>, <span class="string">&quot;you&quot;</span>, <span class="string">&quot;too&quot;</span>, <span class="string">&quot;too&quot;</span>);</span><br><span class="line">stream.distinct()</span><br><span class="line">    .forEach(str -&gt; System.out.println(str));</span><br></pre></td></tr></table></figure></div><h5 id="Stream-map"><a href="#Stream-map" class="headerlink" title="Stream.map()"></a>Stream.map()</h5><p>The intermediate operation map converts each element into another object via the given function</p><p>映射流的每个元素进行转换等操作</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">memberNames.stream().filter((s) -&gt; s.startsWith(<span class="string">&quot;A&quot;</span>))</span><br><span class="line">    .map(String::toUpperCase)</span><br><span class="line">    .forEach(System.out::println);</span><br></pre></td></tr></table></figure></div><h5 id="Stream-flatMap"><a href="#Stream-flatMap" class="headerlink" title="Stream.flatMap"></a>Stream.flatMap</h5><p>函数原型为<code>&lt;R&gt; Stream&lt;R&gt; flatMap(Function&lt;? super T,? extends Stream&lt;? extends R&gt;&gt; mapper)</code>，作用是对每个元素执行<code>mapper</code>指定的操作，并用所有<code>mapper</code>返回的<code>Stream</code>中的元素组成一个新的<code>Stream</code>作为最终返回结果。说起来太拗口，通俗的讲<code>flatMap()</code>的作用就相当于把原<em>stream</em>中的所有元素都”摊平”之后组成的<code>Stream</code>，转换前后元素的个数和类型都可能会改变。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;List&lt;Integer&gt;&gt; stream = Stream.of(Arrays.asList(<span class="number">1</span>,<span class="number">2</span>), Arrays.asList(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>));</span><br><span class="line">stream.flatMap(list -&gt; list.stream())</span><br><span class="line">    .forEach(i -&gt; System.out.println(i));</span><br></pre></td></tr></table></figure></div><h5 id="Stream-sorted"><a href="#Stream-sorted" class="headerlink" title="Stream.sorted()"></a>Stream.sorted()</h5><p>Sorted is an intermediate operation which returns a sorted view of the stream. The elements are sorted in natural order unless you pass a custom Comparator.</p><p>对流的元素进行排序，除非传递自定义比较器，否则元素按自然顺序排序。</p><p>注意，流排序只是创建已排序的流视图，不改变原本集合的顺序。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">memberNames.stream().sorted()</span><br><span class="line">    .map(String::toUpperCase)</span><br><span class="line">    .forEach(System.out::println);</span><br></pre></td></tr></table></figure></div><h4 id="Terminal-operations"><a href="#Terminal-operations" class="headerlink" title="Terminal operations"></a>Terminal operations</h4><p><strong>Terminal operations return a result of a certain type</strong> instead of again a Stream.</p><p>终端流返回特定类型的结果，表示流操作完成。</p><h5 id="Stream-forEach"><a href="#Stream-forEach" class="headerlink" title="Stream.forEach()"></a>Stream.forEach()</h5><p>This method helps in iterating over all elements of a stream and perform some operation on each of them. The operation is passed as lambda expression parameter.</p><p>遍历流的所有元素并对每个元素执行某些操作。作为lambda表达式参数传递。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">memberNames.forEach(System.out::println);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h5 id="Stream-match"><a href="#Stream-match" class="headerlink" title="Stream.match()"></a>Stream.match()</h5><p>Various matching operations can be used to check whether a certain predicate matches the stream. All of those operations are terminal and return a boolean result.</p><p>返回布尔值，流匹配</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> matchedResult = memberNames.stream()</span><br><span class="line">    .anyMatch((s) -&gt; s.startsWith(<span class="string">&quot;A&quot;</span>));</span><br><span class="line"></span><br><span class="line">  System.out.println(matchedResult);</span><br><span class="line"></span><br><span class="line">  matchedResult = memberNames.stream()</span><br><span class="line">      .allMatch((s) -&gt; s.startsWith(<span class="string">&quot;A&quot;</span>));</span><br><span class="line"></span><br><span class="line">  System.out.println(matchedResult);</span><br><span class="line"></span><br><span class="line">  matchedResult = memberNames.stream()</span><br><span class="line">      .noneMatch((s) -&gt; s.startsWith(<span class="string">&quot;A&quot;</span>));</span><br><span class="line"></span><br><span class="line">  System.out.println(matchedResult);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h5 id="Stream-count"><a href="#Stream-count" class="headerlink" title="Stream.count()"></a>Stream.count()</h5><p>Count is a terminal operation returning the number of elements in the stream as a long.</p><p>返回流元素的数量</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">long</span> totalMatched = memberNames.stream()</span><br><span class="line">     .filter((s) -&gt; s.startsWith(<span class="string">&quot;A&quot;</span>))</span><br><span class="line">     .count();</span><br><span class="line"></span><br><span class="line">System.out.println(totalMatched);</span><br></pre></td></tr></table></figure></div><h5 id="Stream-reduce"><a href="#Stream-reduce" class="headerlink" title="Stream.reduce()"></a>Stream.reduce()</h5><p>This terminal operation performs a reduction on the elements of the stream with the given function. The result is an Optional holding the reduced value.</p><p><em>reduce</em>操作可以实现从一组元素中生成一个值，<code>sum()</code>、<code>max()</code>、<code>min()</code>、<code>count()</code>等都是<em>reduce</em>操作，将他们单独设为函数只是因为常用。<code>reduce()</code>的方法定义有三种重写形式：</p><ul><li><code>Optional&lt;T&gt; reduce(BinaryOperator&lt;T&gt; accumulator)</code></li><li><code>T reduce(T identity, BinaryOperator&lt;T&gt; accumulator)</code></li><li><code>&lt;U&gt; U reduce(U identity, BiFunction&lt;U,? super T,U&gt; accumulator, BinaryOperator&lt;U&gt; combiner)</code></li></ul><p>虽然函数定义越来越长，但语义不曾改变，多的参数只是为了指明初始值（参数<em>identity</em>），或者是指定并行执行时多个部分结果的合并方式（参数<em>combiner</em>）。<code>reduce()</code>最常用的场景就是从一堆值中生成一个值。用这么复杂的函数去求一个最大或最小值，你是不是觉得设计者有病。其实不然，因为“大”和“小”或者“求和”有时会有不同的语义。</p><p>需求：<em>从一组单词中找出最长的单词</em>。这里“大”的含义就是“长”。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 找出最长的单词</span></span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;I&quot;</span>, <span class="string">&quot;love&quot;</span>, <span class="string">&quot;you&quot;</span>, <span class="string">&quot;too&quot;</span>);</span><br><span class="line">Optional&lt;String&gt; longest = stream.reduce((s1, s2) -&gt; s1.length()&gt;=s2.length() ? s1 : s2);</span><br><span class="line"><span class="comment">//Optional&lt;String&gt; longest = stream.max((s1, s2) -&gt; s1.length()-s2.length());</span></span><br><span class="line">System.out.println(longest.get());</span><br></pre></td></tr></table></figure></div><p>上述代码会选出最长的单词<em>love</em>，其中<em>Optional</em>是（一个）值的容器，使用它可以避免<em>null</em>值的麻烦。当然可以使用<code>Stream.max(Comparator&lt;? super T&gt; comparator)</code>方法来达到同等效果，但<code>reduce()</code>自有其存在的理由。</p><p><a href="https://github.com/CarpenterLee/JavaLambdaInternals/blob/master/Figures/Stream.reduce_parameter.png"><img src="https://github.com/CarpenterLee/JavaLambdaInternals/raw/master/Figures/Stream.reduce_parameter.png" alt="Stream.reduce_parameter"></a></p><p>需求：<em>求出一组单词的长度之和</em>。这是个“求和”操作，操作对象输入类型是<em>String</em>，而结果类型是<em>Integer</em>。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 求单词长度之和</span><br><span class="line">Stream&lt;String&gt; stream &#x3D; Stream.of(&quot;I&quot;, &quot;love&quot;, &quot;you&quot;, &quot;too&quot;);</span><br><span class="line">Integer lengthSum &#x3D; stream.reduce(0,　&#x2F;&#x2F; 初始值　&#x2F;&#x2F; (1)</span><br><span class="line">        (sum, str) -&gt; sum+str.length(), &#x2F;&#x2F; 累加器 &#x2F;&#x2F; (2)</span><br><span class="line">        (a, b) -&gt; a+b);　&#x2F;&#x2F; 部分和拼接器，并行执行时才会用到 &#x2F;&#x2F; (3)</span><br><span class="line">&#x2F;&#x2F; int lengthSum &#x3D; stream.mapToInt(str -&gt; str.length()).sum();</span><br><span class="line">System.out.println(lengthSum);</span><br></pre></td></tr></table></figure></div><p>上述代码标号(2)处将i. 字符串映射成长度，ii. 并和当前累加和相加。这显然是两步操作，使用<code>reduce()</code>函数将这两步合二为一，更有助于提升性能。如果想要使用<code>map()</code>和<code>sum()</code>组合来达到上述目的，也是可以的。</p><h5 id="Boxed-Stream"><a href="#Boxed-Stream" class="headerlink" title="Boxed Stream"></a>Boxed Stream</h5><p>采用reduce进行数值操作会涉及到基本数值类型和引用数值类型之间的装箱、拆箱操作，因此效率较低。 当流操作为纯数值操作时，使用<strong>数值流</strong>能获得较高的效率。</p><p><strong>将普通流转换成数值流</strong></p><p>StreamAPI提供了三种数值流：IntStream、DoubleStream、LongStream，也提供了将普通流转换成数值流的三种方法：mapToInt、mapToDouble、mapToLong。 如，将Person中的age转换成数值流：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IntStream stream &#x3D; list.stream().mapToInt(Person::getAge);</span><br></pre></td></tr></table></figure></div><p><strong>数值计算</strong></p><p>每种数值流都提供了数值计算函数，如max、min、sum等。如，找出最大的年龄：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OptionalInt maxAge &#x3D; list.stream()</span><br><span class="line">                                .mapToInt(Person::getAge)</span><br><span class="line">                                .max();</span><br></pre></td></tr></table></figure></div><p>由于数值流可能为空，并且给空的数值流计算最大值是没有意义的，因此max函数返回OptionalInt，它是Optional的一个子类，能够判断流是否为空，并对流为空的情况作相应的处理。 此外，mapToInt、mapToDouble、mapToLong进行数值操作后的返回结果分别为：OptionalInt、OptionalDouble、OptionalLong</p><p><code>reduce()</code>擅长的是生成一个值，如果想要从<em>Stream</em>生成一个集合或者<em>Map</em>等复杂的对象该怎么办呢？终极武器<code>collect()</code>横空出世！</p><h5 id="Stream-collect"><a href="#Stream-collect" class="headerlink" title="Stream.collect()"></a>Stream.collect()</h5><p><strong>Collectors 类的静态工厂方法</strong></p><table><thead><tr><th>工厂方法</th><th>返回类型</th><th>用途</th><th>示例</th></tr></thead><tbody><tr><td><code>toList</code></td><td><code>List&lt;T&gt;</code></td><td>把流中所有项目收集到一个 List</td><td><code>List&lt;Project&gt; projects = projectStream.collect(toList());</code></td></tr><tr><td><code>toSet</code></td><td><code>Set&lt;T&gt;</code></td><td>把流中所有项目收集到一个 Set，删除重复项</td><td><code>Set&lt;Project&gt; projects = projectStream.collect(toSet());</code></td></tr><tr><td><code>toCollection</code></td><td><code>Collection&lt;T&gt;</code></td><td>把流中所有项目收集到给定的供应源创建的集合</td><td><code>Collection&lt;Project&gt; projects = projectStream.collect(toCollection(), ArrayList::new);</code></td></tr><tr><td><code>counting</code></td><td><code>Long</code></td><td>计算流中元素的个数</td><td><code>long howManyProjects = projectStream.collect(counting());</code></td></tr><tr><td><code>summingInt</code></td><td><code>Integer</code></td><td>对流中项目的一个整数属性求和</td><td><code>int totalStars = projectStream.collect(summingInt(Project::getStars));</code></td></tr><tr><td><code>averagingInt</code></td><td><code>Double</code></td><td>计算流中项目 Integer 属性的平均值</td><td><code>double avgStars = projectStream.collect(averagingInt(Project::getStars));</code></td></tr><tr><td><code>summarizingInt</code></td><td><code>IntSummaryStatistics</code></td><td>收集关于流中项目 Integer 属性的统计值，例如最大、最小、 总和与平均值</td><td><code>IntSummaryStatistics projectStatistics = projectStream.collect(summarizingInt(Project::getStars));</code></td></tr><tr><td><code>joining</code></td><td><code>String</code></td><td>连接对流中每个项目调用 toString 方法所生成的字符串</td><td><code>String shortProject = projectStream.map(Project::getName).collect(joining(&quot;, &quot;));</code></td></tr><tr><td><code>maxBy</code></td><td><code>Optional&lt;T&gt;</code></td><td>按照给定比较器选出的最大元素的 Optional， 或如果流为空则为 Optional.empty()</td><td><code>Optional&lt;Project&gt; fattest = projectStream.collect(maxBy(comparingInt(Project::getStars)));</code></td></tr><tr><td><code>minBy</code></td><td><code>Optional&lt;T&gt;</code></td><td>按照给定比较器选出的最小元素的 Optional， 或如果流为空则为 Optional.empty()</td><td><code>Optional&lt;Project&gt; fattest = projectStream.collect(minBy(comparingInt(Project::getStars)));</code></td></tr><tr><td><code>reducing</code></td><td>归约操作产生的类型</td><td>从一个作为累加器的初始值开始，利用 BinaryOperator 与流中的元素逐个结合，从而将流归约为单个值</td><td><code>int totalStars = projectStream.collect(reducing(0, Project::getStars, Integer::sum));</code></td></tr><tr><td><code>collectingAndThen</code></td><td>转换函数返回的类型</td><td>包含另一个收集器，对其结果应用转换函数</td><td><code>int howManyProjects = projectStream.collect(collectingAndThen(toList(), List::size));</code></td></tr><tr><td><code>groupingBy</code></td><td><code>Map&lt;K, List&lt;T&gt;&gt;</code></td><td>根据项目的一个属性的值对流中的项目作问组，并将属性值作 为结果 Map 的键</td><td><code>Map&lt;String,List&lt;Project&gt;&gt; projectByLanguage = projectStream.collect(groupingBy(Project::getLanguage));</code></td></tr><tr><td><code>partitioningBy</code></td><td><code>Map&lt;Boolean,List&lt;T&gt;&gt;</code></td><td>根据对流中每个项目应用断言的结果来对项目进行分区</td><td><code>Map&lt;Boolean,List&lt;Project&gt;&gt; vegetarianDishes = projectStream.collect(partitioningBy(Project::isVegetarian));</code></td></tr></tbody></table><p>collect() method used to recieve elements from a sream and store them in a collection and metioned in parameter funcion.</p><p>collect ( )方法，用于从Stream接收元素，并将它们存储在集合中，并在参数函数中进行赋值。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; memNamesInUppercase = memberNames.stream().sorted()</span><br><span class="line">    .map(String::toUpperCase)</span><br><span class="line">    .collect(Collectors.toList());</span><br><span class="line">System.out.print(memNamesInUppercase);</span><br></pre></td></tr></table></figure></div><p>不夸张的讲，如果你发现某个功能在<em>Stream</em>接口中没找到，十有八九可以通过<code>collect()</code>方法实现。<code>collect()</code>是<em>Stream</em>接口方法中最灵活的一个。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将Stream转换成容器或Map</span></span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;I&quot;</span>, <span class="string">&quot;love&quot;</span>, <span class="string">&quot;you&quot;</span>, <span class="string">&quot;too&quot;</span>);</span><br><span class="line">List&lt;String&gt; list = stream.collect(Collectors.toList()); <span class="comment">// (1)</span></span><br><span class="line"><span class="comment">// Set&lt;String&gt; set = stream.collect(Collectors.toSet()); // (2)</span></span><br><span class="line"><span class="comment">// Map&lt;String, Integer&gt; map = stream.collect(Collectors.toMap(Function.identity(), String::length)); // (3)</span></span><br></pre></td></tr></table></figure></div><p>上述代码分别列举了如何将<em>Stream</em>转换成<em>List</em>、<em>Set</em>和<em>Map</em>。</p><p><code>Collectors.toMap() internally uses Map.merge() to add mappings to the map. Map.merge() is spec&#39;d not to allow null values, regardless of whether the underlying Map supports null values. This could probably use some clarification in the Collectors.toMap() specifications.</code></p><p>前面已经说过<em>Stream</em>背后依赖于某种数据源，数据源可以是数组、容器等，但不能是<em>Map</em>。反过来从<em>Stream</em>生成<em>Map</em>是可以的，但我们要想清楚<em>Map</em>的<em>key</em>和<em>value</em>分别代表什么，根本原因是我们要想清楚要干什么。通常在三种情况下<code>collect()</code>的结果会是<em>Map</em>：</p><ol><li>使用<code>Collectors.toMap()</code>生成的收集器，用户需要指定如何生成<em>Map</em>的<em>key</em>和<em>value</em>。</li><li>使用<code>Collectors.partitioningBy()</code>生成的收集器，对元素进行二分区操作时用到。</li><li>使用<code>Collectors.groupingBy()</code>生成的收集器，对元素做<em>group</em>操作时用到。</li></ol><p>情况1：使用<code>toMap()</code>生成的收集器，这种情况是最直接的，前面例子中已提到，这是和<code>Collectors.toCollection()</code>并列的方法。如下代码展示将学生列表转换成由&lt;学生，GPA&gt;组成的<em>Map</em>。非常直观，无需多言。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用toMap()统计学生GPA</span></span><br><span class="line">Map&lt;Student, Double&gt; studentToGPA =</span><br><span class="line">     students.stream().collect(Collectors.toMap(Function.identity(),<span class="comment">// 如何生成key</span></span><br><span class="line">   student -&gt; computeGPA(student)));<span class="comment">// 如何生成value</span></span><br></pre></td></tr></table></figure></div><p>情况2：使用<code>partitioningBy()</code>生成的收集器，这种情况适用于将<code>Stream</code>中的元素依据某个二值逻辑（满足条件，或不满足）分成互补相交的两部分，比如男女性别、成绩及格与否等。下列代码展示将学生分成成绩及格或不及格的两部分。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Partition students into passing and failing</span></span><br><span class="line">Map&lt;Boolean, List&lt;Student&gt;&gt; passingFailing = students.stream()</span><br><span class="line">.collect(Collectors.partitioningBy(s -&gt; s.getGrade() &gt;= PASS_THRESHOLD));</span><br></pre></td></tr></table></figure></div><p>情况3：使用<code>groupingBy()</code>生成的收集器，这是比较灵活的一种情况。跟SQL中的<em>group by</em>语句类似，这里的<em>groupingBy()也是按照某个属性对数据进行分组，属性相同的元素会被对应到Map</em>的同一个<em>key</em>上。下列代码展示将员工按照部门进行分组：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Group employees by department</span></span><br><span class="line">Map&lt;Department, List&lt;Employee&gt;&gt; byDept = employees.stream()</span><br><span class="line">.collect(Collectors.groupingBy(Employee::getDepartment));</span><br></pre></td></tr></table></figure></div><p>以上只是分组的最基本用法，有些时候仅仅分组是不够的。在SQL中使用<em>group by</em>是为了协助其他查询，比如<em>1. 先将员工按照部门分组，2. 然后统计每个部门员工的人数</em>。Java类库设计者也考虑到了这种情况，增强版的<code>groupingBy()</code>能够满足这种需求。增强版的<code>groupingBy()</code>允许我们对元素分组之后再执行某种运算，比如求和、计数、平均值、类型转换等。这种先将元素分组的收集器叫做<strong>上游收集器</strong>，之后执行其他运算的收集器叫做<strong>下游收集器</strong>(<em>downstream Collector</em>)。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用下游收集器统计每个部门的人数</span></span><br><span class="line">Map&lt;Department, Integer&gt; totalByDept = employees.stream()</span><br><span class="line">.collect(Collectors.groupingBy(Employee::getDepartment,</span><br><span class="line">Collectors.counting()));<span class="comment">// 下游收集器</span></span><br></pre></td></tr></table></figure></div><p>上面代码的逻辑是不是越看越像SQL？高度非结构化。还有更狠的，下游收集器还可以包含更下游的收集器，这绝不是为了炫技而增加的把戏，而是实际场景需要。考虑将员工按照部门分组的场景，如果<em>我们想得到每个员工的名字（字符串），而不是一个个</em>Employee<em>对象</em>，可通过如下方式做到：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按照部门对员工分布组，并只保留员工的名字</span></span><br><span class="line">Map&lt;Department, List&lt;String&gt;&gt; byDept = employees.stream()</span><br><span class="line">.collect(Collectors.groupingBy(Employee::getDepartment,</span><br><span class="line">    Collectors.mapping(Employee::getName,<span class="comment">// 下游收集器</span></span><br><span class="line">        Collectors.toList())));<span class="comment">// 更下游的收集器</span></span><br></pre></td></tr></table></figure></div><p>字符串拼接时使用<code>Collectors.joining()</code>生成的收集器，从此告别<em>for</em>循环。<code>Collectors.joining()</code>方法有三种重写形式，分别对应三种不同的拼接方式。无需多言，代码过目难忘。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用Collectors.joining()拼接字符串</span></span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;I&quot;</span>, <span class="string">&quot;love&quot;</span>, <span class="string">&quot;you&quot;</span>);</span><br><span class="line"><span class="comment">//String joined = stream.collect(Collectors.joining());// &quot;Iloveyou&quot;</span></span><br><span class="line"><span class="comment">//String joined = stream.collect(Collectors.joining(&quot;,&quot;));// &quot;I,love,you&quot;</span></span><br><span class="line">String joined = stream.collect(Collectors.joining(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;&#123;&quot;</span>, <span class="string">&quot;&#125;&quot;</span>));<span class="comment">// &quot;&#123;I,love,you&#125;&quot;</span></span><br></pre></td></tr></table></figure></div><p>了可以使用<em>Collectors</em>工具类已经封装好的收集器，我们还可以自定义收集器，或者直接调用<code>collect(Supplier&lt;R&gt; supplier, BiConsumer&lt;R,? super T&gt; accumulator, BiConsumer&lt;R,R&gt; combiner)</code>方法，<strong>收集任何形式你想要的信息</strong>。不过<em>Collectors</em>工具类应该能满足我们的绝大部分需求，手动实现之间请先看看文档。</p><h4 id="Stream-short-circuit-operations"><a href="#Stream-short-circuit-operations" class="headerlink" title="Stream short-circuit operations"></a>Stream short-circuit operations</h4><p>尽管流操作是在满足谓词的集合中的所有元素上执行的，但是在迭代过程中每当遇到匹配的元素时，通常都希望中断该操作。在外部迭代中，您将使用if-else块。在内部迭代中，有一些特定的方法可以用于此目的。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// anyMatch() -&gt; 一旦条件 满足 predicate ，则返回true。它将不再处理任何元素。</span></span><br><span class="line"><span class="keyword">boolean</span> matched = memberNames.stream()</span><br><span class="line">    .anyMatch((s) -&gt; s.startsWith(<span class="string">&quot;A&quot;</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(matched);</span><br><span class="line"></span><br><span class="line"><span class="comment">// findFirst() -&gt; 它将从流返回第一个元素，然后不再处理任何元素。</span></span><br><span class="line">String firstMatchedName = memberNames.stream()</span><br><span class="line">    .filter((s) -&gt; s.startsWith(<span class="string">&quot;L&quot;</span>))</span><br><span class="line">    .findFirst().get();</span><br><span class="line"></span><br><span class="line">System.out.println(firstMatchedName);</span><br></pre></td></tr></table></figure></div><h4 id="Streams-pipeline"><a href="#Streams-pipeline" class="headerlink" title="Streams pipeline"></a>Streams pipeline</h4><p>这里我们来阐述一下，Streams 流水线工作原理。</p><h5 id="中间操作怎么保存跟记录"><a href="#中间操作怎么保存跟记录" class="headerlink" title="中间操作怎么保存跟记录"></a>中间操作怎么保存跟记录</h5><p>首先，我们上面介绍了Streams的很多中间操作，那么这些中间操作是如果保存跟记录呢，很多Stream操作会需要一个回调函数（Lambda表达式），因此一个完整的操作是&lt;*数据来源，操作，回调函数*&gt;构成的三元组。Stream中使用Stage的概念来描述一个完整的操作，并用某种实例化后的<em>PipelineHelper</em>来代表Stage，将具有先后顺序的各个Stage连到一起，就构成了整个流水线。跟Stream相关类和接口的继承关系图示。</p><p><img src="https://github.com/CarpenterLee/JavaLambdaInternals/raw/master/Figures/Java_stream_pipeline_classes.png" alt="Java_stream_pipeline_classes"></p><p>还有<em>IntPipeline, LongPipeline, DoublePipeline</em>没在图中画出，这三个类专门为三种基本类型（不是包装类型）而定制的，跟<em>ReferencePipeline</em>是并列关系。图中<em>Head</em>用于表示第一个Stage，即调用调用诸如<em>Collection.stream()方法产生的Stage，很显然这个Stage里不包含任何操作；StatelessOp和StatefulOp</em>分别表示无状态和有状态的Stage，对应于无状态和有状态的中间操作。</p><p>Stream流水线组织结构示意图如下：</p><p><a href="https://github.com/CarpenterLee/JavaLambdaInternals/blob/master/Figures/Stream_pipeline_example.png"><img src="https://github.com/CarpenterLee/JavaLambdaInternals/raw/master/Figures/Stream_pipeline_example.png" alt="Stream_pipeline_example"></a></p><p>图中通过<code>Collection.stream()</code>方法得到<em>Head</em>也就是stage0，紧接着调用一系列的中间操作，不断产生新的Stream。<strong>这些Stream对象以双向链表的形式组织在一起，构成整个流水线，由于每个Stage都记录了前一个Stage和本次的操作以及回调函数，依靠这种结构就能建立起对数据源的所有操作</strong>。这就是Stream记录操作的方式。</p><h5 id="中间操作怎么叠加"><a href="#中间操作怎么叠加" class="headerlink" title="中间操作怎么叠加"></a>中间操作怎么叠加</h5><p>以上只是解决了操作记录的问题，要想让流水线起到应有的作用我们需要一种将所有操作叠加到一起的方案。你可能会觉得这很简单，只需要从流水线的head开始依次执行每一步的操作（包括回调函数）就行了。这听起来似乎是可行的，但是你忽略了前面的Stage并不知道后面Stage到底执行了哪种操作，以及回调函数是哪种形式。换句话说，只有当前Stage本身才知道该如何执行自己包含的动作。这就需要有某种协议来协调相邻Stage之间的调用关系。</p><p>这种协议由<em>Sink</em>接口完成，<em>Sink</em>接口包含的方法如下表所示：</p><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>void begin(long size)</td><td>开始遍历元素之前调用该方法，通知Sink做好准备。</td></tr><tr><td>void end()</td><td>所有元素遍历完成之后调用，通知Sink没有更多的元素了。</td></tr><tr><td>boolean cancellationRequested()</td><td>是否可以结束操作，可以让短路操作尽早结束。</td></tr><tr><td>void accept(T t)</td><td>遍历元素时调用，接受一个待处理元素，并对元素进行处理。Stage把自己包含的操作和回调方法封装到该方法里，前一个Stage只需要调用当前Stage.accept(T t)方法就行了。</td></tr></tbody></table><p>有了上面的协议，相邻Stage之间调用就很方便了，每个Stage都会将自己的操作封装到一个Sink里，前一个Stage只需调用后一个Stage的<code>accept()</code>方法即可，并不需要知道其内部是如何处理的。当然对于有状态的操作，Sink的<code>begin()</code>和<code>end()</code>方法也是必须实现的。比如Stream.sorted()是一个有状态的中间操作，其对应的Sink.begin()方法可能创建一个乘放结果的容器，而accept()方法负责将元素添加到该容器，最后end()负责对容器进行排序。对于短路操作，<code>Sink.cancellationRequested()</code>也是必须实现的，比如Stream.findFirst()是短路操作，只要找到一个元素，cancellationRequested()就应该返回<em>true</em>，以便调用者尽快结束查找。Sink的四个接口方法常常相互协作，共同完成计算任务。<strong>实际上Stream API内部实现的的本质，就是如何重载Sink的这四个接口方法</strong>。</p><p>有了Sink对操作的包装，Stage之间的调用问题就解决了，执行时只需要从流水线的head开始对数据源依次调用每个Stage对应的Sink.{begin(), accept(), cancellationRequested(), end()}方法就可以了。一种可能的Sink.accept()方法流程是这样的：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(U u)</span></span>&#123;</span><br><span class="line">    <span class="number">1.</span> 使用当前Sink包装的回调函数处理u</span><br><span class="line">    <span class="number">2.</span> 将处理结果传递给流水线下游的Sink</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>Sink接口的其他几个方法也是按照这种[处理-&gt;转发]的模型实现。下面我们结合具体例子看看Stream的中间操作是如何将自身的操作包装成Sink以及Sink是如何将处理结果转发给下一个Sink的。先看Stream.map()方法：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Stream.map()，调用该方法将产生一个新的Stream</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> &lt;R&gt; <span class="function">Stream&lt;R&gt; <span class="title">map</span><span class="params">(Function&lt;? <span class="keyword">super</span> P_OUT, ? extends R&gt; mapper)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> StatelessOp&lt;P_OUT, R&gt;(<span class="keyword">this</span>, StreamShape.REFERENCE,</span><br><span class="line">                                 StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT) &#123;</span><br><span class="line">        <span class="meta">@Override</span> <span class="comment">/*opWripSink()方法返回由回调函数包装而成Sink*/</span></span><br><span class="line">        <span class="function">Sink&lt;P_OUT&gt; <span class="title">opWrapSink</span><span class="params">(<span class="keyword">int</span> flags, Sink&lt;R&gt; downstream)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Sink.ChainedReference&lt;P_OUT, R&gt;(downstream) &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(P_OUT u)</span> </span>&#123;</span><br><span class="line">                    R r = mapper.apply(u);<span class="comment">// 1. 使用当前Sink包装的回调函数mapper处理u</span></span><br><span class="line">                    downstream.accept(r);<span class="comment">// 2. 将处理结果传递给流水线下游的Sink</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>上述代码看似复杂，其实逻辑很简单，就是将回调函数<em>mapper</em>包装到一个Sink当中。由于Stream.map()是一个无状态的中间操作，所以map()方法返回了一个StatelessOp内部类对象（一个新的Stream），调用这个新Stream的opWripSink()方法将得到一个包装了当前回调函数的Sink。</p><p>再来看一个复杂一点的例子。Stream.sorted()方法将对Stream中的元素进行排序，显然这是一个有状态的中间操作，因为读取所有元素之前是没法得到最终顺序的。抛开模板代码直接进入问题本质，sorted()方法是如何将操作封装成Sink的呢？sorted()一种可能封装的Sink代码如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Stream.sort()方法用到的Sink实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RefSortingSink</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractRefSortingSink</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;T&gt; list;<span class="comment">// 存放用于排序的元素</span></span><br><span class="line">    RefSortingSink(Sink&lt;? <span class="keyword">super</span> T&gt; downstream, Comparator&lt;? <span class="keyword">super</span> T&gt; comparator) &#123;</span><br><span class="line">        <span class="keyword">super</span>(downstream, comparator);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">begin</span><span class="params">(<span class="keyword">long</span> size)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// 创建一个存放排序元素的列表</span></span><br><span class="line">        list = (size &gt;= <span class="number">0</span>) ? <span class="keyword">new</span> ArrayList&lt;T&gt;((<span class="keyword">int</span>) size) : <span class="keyword">new</span> ArrayList&lt;T&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">end</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        list.sort(comparator);<span class="comment">// 只有元素全部接收之后才能开始排序</span></span><br><span class="line">        downstream.begin(list.size());</span><br><span class="line">        <span class="keyword">if</span> (!cancellationWasRequested) &#123;<span class="comment">// 下游Sink不包含短路操作</span></span><br><span class="line">            list.forEach(downstream::accept);<span class="comment">// 2. 将处理结果传递给流水线下游的Sink</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;<span class="comment">// 下游Sink包含短路操作</span></span><br><span class="line">            <span class="keyword">for</span> (T t : list) &#123;<span class="comment">// 每次都调用cancellationRequested()询问是否可以结束处理。</span></span><br><span class="line">                <span class="keyword">if</span> (downstream.cancellationRequested()) <span class="keyword">break</span>;</span><br><span class="line">                downstream.accept(t);<span class="comment">// 2. 将处理结果传递给流水线下游的Sink</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        downstream.end();</span><br><span class="line">        list = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        list.add(t);<span class="comment">// 1. 使用当前Sink包装动作处理t，只是简单的将元素添加到中间列表当中</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>上述代码完美的展现了Sink的四个接口方法是如何协同工作的：</p><ol><li>首先begin()方法告诉Sink参与排序的元素个数，方便确定中间结果容器的的大小；</li><li>之后通过accept()方法将元素添加到中间结果当中，最终执行时调用者会不断调用该方法，直到遍历所有元素；一个</li><li>最后end()方法告诉Sink所有元素遍历完毕，启动排序步骤，排序完成后将结果传递给下游的Sink；</li><li>如果下游的Sink是短路操作，将结果传递给下游时不断询问下游cancellationRequested()是否可以结束处理。</li></ol><h5 id="操作叠加后如何执行"><a href="#操作叠加后如何执行" class="headerlink" title="操作叠加后如何执行"></a>操作叠加后如何执行</h5><p>Sink完美封装了Stream每一步操作，并给出了[处理-&gt;转发]的模式来叠加操作。这一连串的齿轮已经咬合，就差最后一步拨动齿轮启动执行。是什么启动这一连串的操作呢？也许你已经想到了启动的原始动力就是结束操作(Terminal Operation)，一旦调用某个结束操作，就会触发整个流水线的执行。</p><p>结束操作之后不能再有别的操作，所以结束操作不会创建新的流水线阶段(Stage)，直观的说就是流水线的链表不会在往后延伸了。结束操作会创建一个包装了自己操作的Sink，这也是流水线中最后一个Sink，这个Sink只需要处理数据而不需要将结果传递给下游的Sink（因为没有下游）。对于Sink的[处理-&gt;转发]模型，结束操作的Sink就是调用链的出口。</p><p>我们再来考察一下上游的Sink是如何找到下游Sink的。一种可选的方案是在<em>PipelineHelper</em>中设置一个Sink字段，在流水线中找到下游Stage并访问Sink字段即可。但Stream类库的设计者没有这么做，而是设置了一个<code>Sink AbstractPipeline.opWrapSink(int flags, Sink downstream)</code>方法来得到Sink，该方法的作用是返回一个新的包含了当前Stage代表的操作以及能够将结果传递给downstream的Sink对象。为什么要产生一个新对象而不是返回一个Sink字段？这是因为使用opWrapSink()可以将当前操作与下游Sink（上文中的downstream参数）结合成新Sink。试想只要从流水线的最后一个Stage开始，不断调用上一个Stage的opWrapSink()方法直到最开始（不包括stage0，因为stage0代表数据源，不包含操作），就可以得到一个代表了流水线上所有操作的Sink，用代码表示就是这样：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; AbstractPipeline.wrapSink()</span><br><span class="line">&#x2F;&#x2F; 从下游向上游不断包装Sink。如果最初传入的sink代表结束操作，</span><br><span class="line">&#x2F;&#x2F; 函数返回时就可以得到一个代表了流水线上所有操作的Sink。</span><br><span class="line">final &lt;P_IN&gt; Sink&lt;P_IN&gt; wrapSink(Sink&lt;E_OUT&gt; sink) &#123;</span><br><span class="line">    ...</span><br><span class="line">    for (AbstractPipeline p&#x3D;AbstractPipeline.this; p.depth &gt; 0; p&#x3D;p.previousStage) &#123;</span><br><span class="line">        sink &#x3D; p.opWrapSink(p.previousStage.combinedFlags, sink);</span><br><span class="line">    &#125;</span><br><span class="line">    return (Sink&lt;P_IN&gt;) sink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>现在流水线上从开始到结束的所有的操作都被包装到了一个Sink里，执行这个Sink就相当于执行整个流水线，执行Sink的代码如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; AbstractPipeline.copyInto(), 对spliterator代表的数据执行wrappedSink代表的操作。</span><br><span class="line">final &lt;P_IN&gt; void copyInto(Sink&lt;P_IN&gt; wrappedSink, Spliterator&lt;P_IN&gt; spliterator) &#123;</span><br><span class="line">    ...</span><br><span class="line">    if (!StreamOpFlag.SHORT_CIRCUIT.isKnown(getStreamAndOpFlags())) &#123;</span><br><span class="line">        wrappedSink.begin(spliterator.getExactSizeIfKnown());&#x2F;&#x2F; 通知开始遍历</span><br><span class="line">        spliterator.forEachRemaining(wrappedSink);&#x2F;&#x2F; 迭代</span><br><span class="line">        wrappedSink.end();&#x2F;&#x2F; 通知遍历结束</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>上述代码首先调用wrappedSink.begin()方法告诉Sink数据即将到来，然后调用spliterator.forEachRemaining()方法对数据进行迭代（Spliterator是容器的一种迭代器，<a href="https://github.com/CarpenterLee/JavaLambdaInternals/blob/master/3-Lambda%20and%20Collections.md#spliterator">参阅</a>），最后调用wrappedSink.end()方法通知Sink数据处理结束。逻辑如此清晰。</p><h5 id="执行后的结果怎么保存"><a href="#执行后的结果怎么保存" class="headerlink" title="执行后的结果怎么保存"></a>执行后的结果怎么保存</h5><p>最后一个问题是流水线上所有操作都执行后，用户所需要的结果（如果有）在哪里？首先要说明的是不是所有的Stream结束操作都需要返回结果，有些操作只是为了使用其副作用(<em>Side-effects</em>)，比如使用<code>Stream.forEach()</code>方法将结果打印出来就是常见的使用副作用的场景（事实上，除了打印之外其他场景都应避免使用副作用），对于真正需要返回结果的结束操作结果存在哪里呢？</p><blockquote><p>特别说明：副作用不应该被滥用，也许你会觉得在Stream.forEach()里进行元素收集是个不错的选择，就像下面代码中那样，但遗憾的是这样使用的正确性和效率都无法保证，因为Stream可能会并行执行。大多数使用副作用的地方都可以使用<a href="https://github.com/CarpenterLee/JavaLambdaInternals/blob/master/5-Streams%20API(II).md">归约操作</a>更安全和有效的完成。</p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 错误的收集方式</span><br><span class="line">ArrayList&lt;String&gt; results &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">stream.filter(s -&gt; pattern.matcher(s).matches())</span><br><span class="line">      .forEach(s -&gt; results.add(s));  &#x2F;&#x2F; Unnecessary use of side-effects!</span><br><span class="line">&#x2F;&#x2F; 正确的收集方式</span><br><span class="line">List&lt;String&gt;results &#x3D;</span><br><span class="line">     stream.filter(s -&gt; pattern.matcher(s).matches())</span><br><span class="line">             .collect(Collectors.toList());  &#x2F;&#x2F; No side-effects!</span><br></pre></td></tr></table></figure></div><p>回到流水线执行结果的问题上来，需要返回结果的流水线结果存在哪里呢？这要分不同的情况讨论，下表给出了各种有返回结果的Stream结束操作。</p><table><thead><tr><th>返回类型</th><th>对应的结束操作</th></tr></thead><tbody><tr><td>boolean</td><td>anyMatch() allMatch() noneMatch()</td></tr><tr><td>Optional</td><td>findFirst() findAny()</td></tr><tr><td>归约结果</td><td>reduce() collect()</td></tr><tr><td>数组</td><td>toArray()</td></tr></tbody></table><ol><li>对于表中返回boolean或者Optional的操作（Optional是存放 一个 值的容器）的操作，由于值返回一个值，只需要在对应的Sink中记录这个值，等到执行结束时返回就可以了。</li><li>对于归约操作，最终结果放在用户调用时指定的容器中（容器类型通过<a href="https://github.com/CarpenterLee/JavaLambdaInternals/blob/master/5-Streams%20API(II).md#%E6%94%B6%E9%9B%86%E5%99%A8">收集器</a>指定）。collect(), reduce(), max(), min()都是归约操作，虽然max()和min()也是返回一个Optional，但事实上底层是通过调用<a href="https://github.com/CarpenterLee/JavaLambdaInternals/blob/master/5-Streams%20API(II).md#%E5%A4%9A%E9%9D%A2%E6%89%8Breduce">reduce()</a>方法实现的。</li><li>对于返回是数组的情况，毫无疑问的结果会放在数组当中。这么说当然是对的，但在最终返回数组之前，结果其实是存储在一种叫做<em>Node</em>的数据结构中的。Node是一种多叉树结构，元素存储在树的叶子当中，并且一个叶子节点可以存放多个元素。这样做是为了并行执行方便。</li></ol><h3 id="Parallelism-in-Java-Steam"><a href="#Parallelism-in-Java-Steam" class="headerlink" title="Parallelism in Java Steam"></a>Parallelism in Java Steam</h3><p>并行流</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">    list.add(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Here creating a parallel stream</span></span><br><span class="line">Stream&lt;Integer&gt; stream = list.parallelStream();</span><br><span class="line">Integer[] evenNumbersArr = stream.filter(i -&gt; i%<span class="number">2</span> == <span class="number">0</span>).toArray(Integer[]::<span class="keyword">new</span>);</span><br><span class="line">System.out.print(evenNumbersArr);</span><br></pre></td></tr></table></figure></div><h2 id="Concurrent"><a href="#Concurrent" class="headerlink" title="Concurrent"></a>Concurrent</h2><h3 id="Thread-和-Runnable"><a href="#Thread-和-Runnable" class="headerlink" title="Thread 和 Runnable"></a>Thread 和 Runnable</h3><p>所有的现代操作系统都通过进程和线程来支持并发。进程是通常彼此独立运行的程序的实例，比如，如果你启动了一个Java程序，操作系统产生一个新的进程，与其他程序一起并行执行。 在这些进程的内部，我们使用线程并发执行代码，因此，我们可以最大限度的利用CPU可用的核心（core）。</p><p>Java从JDK1.0开始执行线程。在开始一个新的线程之前，你必须指定由这个线程执行的代码，通常称为task。这可以通过实现Runnable——一个定义了一个无返回值无参数的 <code>run()</code> 方法的函数接口。</p><h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><p>在执行一个异步任务或并发任务时，往往是通过直接 <code>new Thread()</code> 方法来创建新的线程，这样做弊端较多，更好的解决方案是合理地利用线程池，线程池的优势很明显，如下：</p><ol><li>降低系统资源消耗，通过重用已存在的线程，降低线程创建和销毁造成的消耗；</li><li>提高系统响应速度，当有任务到达时，无需等待新线程的创建便能立即执行；</li><li>方便线程并发数的管控，线程若是无限制的创建，不仅会额外消耗大量系统资源，更是占用过多资源而阻塞系统或oom等状况，从而降低系统的稳定性。线程池能有效管控线程，统一分配、调优，提供资源使用率；</li><li>更强大的功能，线程池提供了定时、定期以及可控线程数等功能的线程池，使用方便简单。</li></ol><h4 id="线程池用法"><a href="#线程池用法" class="headerlink" title="线程池用法"></a>线程池用法</h4><h5 id="newCachedThreadPool"><a href="#newCachedThreadPool" class="headerlink" title="newCachedThreadPool"></a>newCachedThreadPool</h5><p>创建一个可缓存的无界线程池，该方法无参数。当线程池中的线程空闲时间超过60s则会自动回收该线程，当任务超过线程池的线程数则创建新线程。线程池的大小上限为 <code>Integer.MAX_VALUE</code>，可看做是无限大。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public void cachedThreadPoolDemo()&#123;</span><br><span class="line">    ExecutorService cachedThreadPool &#x3D; Executors.newCachedThreadPool();</span><br><span class="line">    for (int i &#x3D; 0; i &lt; 5; i++) &#123;</span><br><span class="line">        final int index &#x3D; i;</span><br><span class="line"></span><br><span class="line">        cachedThreadPool.execute(new Runnable() &#123;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+&quot;, index&#x3D;&quot;+index);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(1000);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>运行结果：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pool-1-thread-1, index&#x3D;0</span><br><span class="line">pool-1-thread-1, index&#x3D;1</span><br><span class="line">pool-1-thread-1, index&#x3D;2</span><br><span class="line">pool-1-thread-1, index&#x3D;3</span><br><span class="line">pool-1-thread-1, index&#x3D;4</span><br></pre></td></tr></table></figure></div><p>从运行结果可以看出，整个过程都在同一个线程pool-1-thread-1中运行，后面线程复用前面的线程。</p><h5 id="newFixedThreadPool"><a href="#newFixedThreadPool" class="headerlink" title="newFixedThreadPool"></a>newFixedThreadPool</h5><p>创建一个固定大小的线程池，该方法可指定线程池的固定大小，对于超出的线程会在 <code>LinkedBlockingQueue</code> 队列中等待。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public void fixedThreadPoolDemo()&#123;</span><br><span class="line">    ExecutorService fixedThreadPool &#x3D; Executors.newFixedThreadPool(3);</span><br><span class="line">    for (int i &#x3D; 0; i &lt; 6; i++) &#123;</span><br><span class="line">        final int index &#x3D; i;</span><br><span class="line"></span><br><span class="line">        fixedThreadPool.execute(new Runnable() &#123;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+&quot;, index&#x3D;&quot;+index);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(1000);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>运行结果：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pool-1-thread-1, index&#x3D;0</span><br><span class="line">pool-1-thread-2, index&#x3D;1</span><br><span class="line">pool-1-thread-3, index&#x3D;2</span><br><span class="line">pool-1-thread-1, index&#x3D;3</span><br><span class="line">pool-1-thread-2, index&#x3D;4</span><br><span class="line">pool-1-thread-3, index&#x3D;5</span><br></pre></td></tr></table></figure></div><p>从运行结果可以看出，线程池大小为3，每休眠1s后将任务提交给线程池的各个线程轮番交错地执行。线程池的大小设置，可参数 <code>Runtime.getRuntime().availableProcessors()</code>。</p><h5 id="newSingleThreadExecutor"><a href="#newSingleThreadExecutor" class="headerlink" title="newSingleThreadExecutor"></a>newSingleThreadExecutor</h5><p>创建只有一个线程的线程池，该方法无参数，所有任务都保存队列LinkedBlockingQueue中，等待唯一的单线程来执行任务，并保证所有任务按照指定顺序(FIFO或优先级)执行。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public void singleThreadExecutorDemo()&#123;</span><br><span class="line">    ExecutorService singleThreadExecutor &#x3D; Executors.newSingleThreadExecutor();</span><br><span class="line">    for (int i &#x3D; 0; i &lt; 3; i++) &#123;</span><br><span class="line">        final int index &#x3D; i;</span><br><span class="line"></span><br><span class="line">        singleThreadExecutor.execute(new Runnable() &#123;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+&quot;, index&#x3D;&quot;+index);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(1000);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>运行结果：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pool-1-thread-1, index&#x3D;0</span><br><span class="line">pool-1-thread-1, index&#x3D;1</span><br><span class="line">pool-1-thread-1, index&#x3D;2</span><br></pre></td></tr></table></figure></div><p>从运行结果可以看出，所有任务都是在单一线程运行的。</p><h5 id="newScheduledThreadPool"><a href="#newScheduledThreadPool" class="headerlink" title="newScheduledThreadPool"></a>newScheduledThreadPool</h5><p>创建一个可定时执行或周期执行任务的线程池，该方法可指定线程池的核心线程个数。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public void scheduledThreadPoolDemo()&#123;</span><br><span class="line">    ScheduledExecutorService scheduledThreadPool &#x3D; Executors.newScheduledThreadPool(3);</span><br><span class="line">    &#x2F;&#x2F;定时执行一次的任务，延迟1s后执行</span><br><span class="line">    scheduledThreadPool.schedule(new Runnable() &#123;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+&quot;, delay 1s&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, 1, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;周期性地执行任务，延迟2s后，每3s一次地周期性执行任务</span><br><span class="line">    scheduledThreadPool.scheduleAtFixedRate(new Runnable() &#123;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+&quot;, every 3s&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, 2, 3, TimeUnit.SECONDS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>运行结果：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pool-1-thread-1, delay 1s</span><br><span class="line">pool-1-thread-1, every 3s</span><br><span class="line">pool-1-thread-2, every 3s</span><br><span class="line">pool-1-thread-2, every 3s</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div><ul><li><code>schedule(Runnable command, long delay, TimeUnit unit)</code>: 延迟一定时间后执行 <code>Runnable</code> 任务；</li><li><code>schedule(Callable callable, long delay, TimeUnit unit)</code>: 延迟一定时间后执行 <code>Callable</code> 任务；</li><li><code>scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit)</code>: 延迟一定时间后，以间隔period时间的频率周期性地执行任务；</li><li><code>scheduleWithFixedDelay(Runnable command, long initialDelay, long delay,TimeUnit unit)</code>: 与 <code>scheduleAtFixedRate()</code> 方法很类似， 但是不同的是scheduleWithFixedDelay()方法的周期时间间隔是以上一个任务执行结束到下一个任务开始执行的间隔， 而scheduleAtFixedRate()方法的周期时间间隔是以上一个任务开始执行到下一个任务开始执行的间隔，也就是这一些任务系列的触发时间都是可预知的。</li></ul><blockquote><p>ScheduledExecutorService 功能强大，对于定时执行的任务，建议多采用该方法。</p></blockquote><p><strong>方法对比</strong></p><table><thead><tr><th>工厂方法</th><th>corePoolSize</th><th>maximumPoolSize</th><th>keepAliveTime</th><th>workQueue</th></tr></thead><tbody><tr><td><code>newCachedThreadPool</code></td><td>0</td><td>Integer.MAX_VALUE</td><td>60s<code>SynchronousQueue</code></td><td></td></tr><tr><td><code>newFixedThreadPool</code></td><td>nThreads</td><td>nThreads</td><td>0</td><td><code>LinkedBlockingQueue</code></td></tr><tr><td><code>newSingleThreadExecutor</code></td><td>1</td><td>1</td><td>0</td><td><code>LinkedBlockingQueue</code></td></tr><tr><td><code>newScheduledThreadPool</code></td><td>corePoolSize</td><td>Integer.MAX_VALUE</td><td>0</td><td><code>DelayedWorkQueue</code></td></tr></tbody></table><p>其他参数都相同，其中线程工厂的默认类为 <code>DefaultThreadFactory</code>，线程饱和的默认策略为 <code>ThreadPoolExecutor.AbortPolicy</code>。</p><h3 id="简单使用-Lock-锁"><a href="#简单使用-Lock-锁" class="headerlink" title="简单使用 Lock 锁"></a>简单使用 Lock 锁</h3><p>Java 5 中引入了新的锁机制——java.util.concurrent.locks 中的显式的互斥锁：Lock 接口，它提供了比 <code>synchronized</code> 更加广泛的锁定操作。 Lock 接口有 3 个实现它的类：ReentrantLock、ReetrantReadWriteLock.ReadLock 和 ReetrantReadWriteLock.WriteLock，即重入锁、读锁和写锁。 lock 必须被显式地创建、锁定和释放，为了可以使用更多的功能，一般用 ReentrantLock 为其实例化。为了保证锁最终一定会被释放（可能会有异常发生），要把互斥区放在 try 语句块内，并在 finally 语句块中释放锁，尤其当有 return 语句时，return 语句必须放在 try 字句中，以确保 unlock()不会过早发生，从而将数据暴露给第二个任务。因此，采用 lock 加锁和释放锁的一般形式如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认使用非公平锁，如果要使用公平锁，需要传入参数true</span></span><br><span class="line">Lock lock = <span class="keyword">new</span> ReentrantLock();  </span><br><span class="line">lock.lock();  </span><br><span class="line"><span class="keyword">try</span> &#123;  </span><br><span class="line">    <span class="comment">// 更新对象的状态  </span></span><br><span class="line">    <span class="comment">// 捕获异常，必要时恢复到原来的不变约束  </span></span><br><span class="line">    <span class="comment">// 如果有return语句，放在这里  </span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;  </span><br><span class="line">    <span class="comment">//锁必须在finally块中释放</span></span><br><span class="line">    lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>可重入锁，也叫做递归锁，指的是同一线程外层函数获得锁之后，内层递归函数仍然有获取该锁的代码，但不受影响。 在JAVA环境下 <code>ReentrantLock</code> 和 <code>synchronized</code> 都是可重入锁。</p><h4 id="ReentrantReadWriteLock"><a href="#ReentrantReadWriteLock" class="headerlink" title="ReentrantReadWriteLock"></a>ReentrantReadWriteLock</h4><p>读写锁：分为读锁和写锁，多个读锁不互斥，读锁与写锁互斥，这是由jvm自己控制的，你只要上好相应的锁即可。 如果你的代码只读数据，可以很多人同时读，但不能同时写，那就上读锁；如果你的代码修改数据，只能有一个人在写，且不能同时读取，那就上写锁。 总之，读的时候上读锁，写的时候上写锁！</p><p><code>ReentrantReadWriteLock</code> 会使用两把锁来解决问题，一个读锁，一个写锁</p><ul><li>线程进入读锁的前提条件<ul><li>没有其他线程的写锁</li><li>没有写请求或者有写请求，但调用线程和持有锁的线程是同一个</li></ul></li><li>线程进入写锁的前提条件<ul><li>没有其他线程的读锁</li><li>没有其他线程的写锁</li></ul></li></ul><h3 id="StampedLock"><a href="#StampedLock" class="headerlink" title="StampedLock"></a>StampedLock</h3><p><code>StampedLock</code> 是 java 8 在 <code>java.util.concurrent.locks</code> 新增的一个API。</p><p><code>ReentrantReadWriteLock</code> 在沒有任何读锁和写锁时，才可以取得写入锁，这可用于实现了悲观读取。 然而，如果读取很多，写入很少的情况下，使用 <code>ReentrantReadWriteLock</code> 可能会使写入线程遭遇饥饿问题，也就是写入线程无法竞争到锁定而一直处于等待状态。 <code>StampedLock</code> 有三种模式的锁，用于控制读取/写入访问，StampedLock 的状态由版本和模式组成。 锁获取操作返回一个用于展示和访问锁状态的票据（stamp）变量，它用相应的锁状态表示并控制访问，数字0表示没有写锁被授权访问。 在读锁上分为悲观锁和乐观锁，锁释放以及其他相关方法需要使用邮戳（stamps）变量作为参数，如果他们和当前锁状态不符则失败，这三种模式为：</p><ul><li>写入：方法writeLock可能为了获取独占访问而阻塞当前线程，返回一个stamp变量，能够在unlockWrite方法中使用从而释放锁。也提供了tryWriteLock。 当锁被写模式所占有，没有读或者乐观的读操作能够成功。</li><li>读取：方法readLock可能为了获取非独占访问而阻塞当前线程，返回一个stamp变量，能够在unlockRead方法中用于释放锁。也提供了tryReadLock。</li><li>乐观读取：方法 <code>tryOptimisticRead</code> 返回一个非 0 邮戳变量，仅在当前锁没有以写入模式被持有。如果在获得stamp变量之后没有被写模式持有，方法validate将返回true。 这种模式可以被看做一种弱版本的读锁，可以被一个写入者在任何时间打断。乐观读取模式仅用于短时间读取操作时经常能够降低竞争和提高吞吐量。</li></ul><blockquote><p>悲观锁（Pessimistic Lock），顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。 悲观锁：假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作。 Java synchronized 就属于悲观锁的一种实现，每次线程要修改数据时都先获得锁，保证同一时刻只有一个线程能操作数据，其他线程则会被block。</p></blockquote><blockquote><p>乐观锁（Optimistic Lock），顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在提交更新的时候会判断一下在此期间别人有没有去更新这个数据。 乐观锁适用于读多写少的应用场景，这样可以提高吞吐量。 乐观锁：假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性。</p></blockquote><h3 id="AtomicInteger"><a href="#AtomicInteger" class="headerlink" title="AtomicInteger"></a>AtomicInteger</h3><p>JDK1.5之后的java.util.concurrent.atomic包里，多了一批原子处理类。 AtomicBoolean、AtomicInteger、AtomicLong、AtomicReference。 主要用于在高并发环境下的高效程序处理,来帮助我们简化同步处理.</p><p>AtomicInteger，一个提供原子操作的Integer的类。 在Java语言中，++i和i++操作并不是线程安全的，在使用的时候，不可避免的会用到synchronized关键字。 而AtomicInteger则通过一种线程安全的加减操作接口。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public final int get()                  &#x2F;&#x2F;获取当前的值</span><br><span class="line">public final int getAndSet(int newValue)&#x2F;&#x2F;获取当前的值，并设置新的值</span><br><span class="line">public final int getAndIncrement()      &#x2F;&#x2F;获取当前的值，并自增</span><br><span class="line">public final int getAndDecrement()      &#x2F;&#x2F;获取当前的值，并自减</span><br><span class="line">public final int getAndAdd(int delta)   &#x2F;&#x2F;获取当前的值，并加上预期的值</span><br></pre></td></tr></table></figure></div><h3 id="LongAccumulator"><a href="#LongAccumulator" class="headerlink" title="LongAccumulator"></a>LongAccumulator</h3><p><code>LongAdder</code> 是jdk1.8提供的累加器，基于 <code>Striped64</code> 实现。 它常用于状态采集、统计等场景。 AtomicLong也可以用于这种场景，但在线程竞争激烈的情况下，LongAdder要比AtomicLong拥有更高的吞吐量，但会耗费更多的内存空间。</p><p><code>LongAccumulator</code> 和 <code>LongAdder</code> 类似，也基于Striped64实现。但要比LongAdder更加灵活(要传入一个函数接口)， LongAdder相当于是LongAccumulator的一种特例。</p><h3 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h3><p>Semaphore（信号量）是用来控制同时访问特定资源的线程数量，它通过协调各个线程，以保证合理的使用公共资源。 很多年以来，我都觉得从字面上很难理解Semaphore所表达的含义，只能把它比作是控制流量的红绿灯，比如XX马路要限制流量，只允许同时有一百辆车在这条路上行使， 其他的都必须在路口等待，所以前一百辆车会看到绿灯，可以开进这条马路，后面的车会看到红灯，不能驶入XX马路， 但是如果前一百辆中有五辆车已经离开了XX马路，那么后面就允许有5辆车驶入马路，这个例子里说的车就是线程，驶入马路就表示线程在执行， 离开马路就表示线程执行完成，看见红灯就表示线程被阻塞，不能执行。</p><p><strong>应用场景</strong></p><p>Semaphore可以用于做流量控制，特别公用资源有限的应用场景，比如数据库连接。 假如有一个需求，要读取几万个文件的数据，因为都是IO密集型任务，我们可以启动几十个线程并发的读取， 但是如果读到内存后，还需要存储到数据库中，而数据库的连接数只有10个， 这时我们必须控制只有十个线程同时获取数据库连接保存数据，否则会报错无法获取数据库连接。 这个时候，我们就可以使用Semaphore来做流控。</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="Time-API"><a href="#Time-API" class="headerlink" title="Time API"></a>Time API</h2><h3 id="ZoneId"><a href="#ZoneId" class="headerlink" title="ZoneId"></a>ZoneId</h3><p>Java 8中的时区操作被很大程度上简化了，新的时区类 <code>java.time.ZoneId</code> 是原有的 <code>java.util.TimeZone</code> 类的替代品。 ZoneId对象可以通过 <code>ZoneId.of()</code> 方法创建，也可以通过 <code>ZoneId.systemDefault()</code> 获取系统默认时区：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ZoneId shanghaiZoneId = ZoneId.of(<span class="string">&quot;Asia/Shanghai&quot;</span>);</span><br><span class="line">ZoneId systemZoneId = ZoneId.systemDefault();</span><br></pre></td></tr></table></figure></div><p><code>of()</code> 方法接收一个“区域/城市”的字符串作为参数，你可以通过 <code>getAvailableZoneIds()</code> 方法获取所有合法的“区域/城市”字符串：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;String&gt; zoneIds = ZoneId.getAvailableZoneIds();</span><br></pre></td></tr></table></figure></div><p>对于老的时区类 <code>TimeZone</code>，Java 8也提供了转化方法：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZoneId oldToNewZoneId = TimeZone.getDefault().toZoneId();</span><br></pre></td></tr></table></figure></div><p>有了 <code>ZoneId</code>，我们就可以将一个 <code>LocalDate</code>、<code>LocalTime</code> 或 <code>LocalDateTime</code> 对象转化为 <code>ZonedDateTime</code> 对象：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime localDateTime = LocalDateTime.now();</span><br><span class="line">ZonedDateTime zonedDateTime = ZonedDateTime.of(localDateTime, shanghaiZoneId);</span><br></pre></td></tr></table></figure></div><p><code>ZonedDateTime</code> 对象由两部分构成，<code>LocalDateTime</code> 和 <code>ZoneId</code>，其中 <code>2018-03-03T15:26:56.147</code> 部分为 <code>LocalDateTime</code>，<code>+08:00[Asia/Shanghai]</code> 部分为ZoneId。</p><p>另一种表示时区的方式是使用 <code>ZoneOffset</code>，它是以当前时间和 <strong>世界标准时间（UTC）/格林威治时间（GMT）</strong> 的偏差来计算，例如：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ZoneOffset zoneOffset = ZoneOffset.of(<span class="string">&quot;+09:00&quot;</span>);</span><br><span class="line">LocalDateTime localDateTime = LocalDateTime.now();</span><br><span class="line">OffsetDateTime offsetDateTime = OffsetDateTime.of(localDateTime, zoneOffset);</span><br></pre></td></tr></table></figure></div><h3 id="Instant"><a href="#Instant" class="headerlink" title="Instant"></a>Instant</h3><p>Instant类在Java日期与时间功能中，表示了时间线上一个确切的点，定义为距离初始时间的时间差（初始时间为GMT 1970年1月1日00:00）经测量一天有86400秒，从初始时间开始不断向前移动。</p><p><strong>创建一个Instant实例</strong></p><p>你可以通过Instant类的工厂方法创建一个Instant实例，例如你可以调用instant.now()来创建一个确切的表达当前时间的Instant对象：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Instant now = Instant.now();</span><br></pre></td></tr></table></figure></div><p>另外也有一些其它方法能创建Instant，具体请查阅Java官方文档。</p><p><strong>访问Instant的时间</strong></p><p>一个Instant对象里有两个域：距离初始时间的秒钟数、在当前一秒内的第几纳秒，他们的组合表达了当前时间点。你可以通过以下两个方法得到它们的值：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> seconds =  getEpochSecond()</span><br><span class="line"><span class="keyword">int</span> nanos   =   getNano()</span><br></pre></td></tr></table></figure></div><p><strong>Instant的计算</strong></p><p>Instant类有一些方法，可以用于获得另一Instant的值，例如：</p><ul><li><code>plusSeconds()</code></li><li><code>plusMillis()</code></li><li><code>plusNanos()</code></li><li><code>minusSeconds()</code></li><li><code>minusMillis()</code></li><li><code>minusNanos()</code></li></ul><p>我下面将向你展示两个例子，来说明这些方法如何使用：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Instant now     = Instant.now();</span><br><span class="line">Instant later   = now.plusSeconds(<span class="number">3</span>);</span><br><span class="line">Instant earlier = now.minusSeconds(<span class="number">3</span>);</span><br></pre></td></tr></table></figure></div><p>第一行获得了一个Instant对象，表示当前时间。第二行创建了一个Instant表示三秒后，第三行创建了一个Instant表示三秒前。</p><blockquote><p>seconds 表示从 <code>1970-01-01 00:00:00</code> 开始到现在的秒数，nanos 表示纳秒部分（nanos的值不会超过999,999,999）</p></blockquote><h3 id="Clock"><a href="#Clock" class="headerlink" title="Clock"></a>Clock</h3><p>Clock类提供了访问当前日期和时间的方法，Clock是时区敏感的，可以用来取代 <code>System.currentTimeMillis()</code> 来获取当前的微秒数。 某一个特定的时间点也可以使用Instant类来表示，Instant 类也可以用来创建老的 <code>java.util.Date</code> 对象。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Clock clock = Clock.systemDefaultZone();  </span><br><span class="line"><span class="keyword">long</span> millis = clock.millis();    </span><br><span class="line">Instant instant = clock.instant();  </span><br><span class="line">Date legacyDate = Date.from(instant);   <span class="comment">// legacy java.util.Date  </span></span><br></pre></td></tr></table></figure></div><h3 id="LocalDate"><a href="#LocalDate" class="headerlink" title="LocalDate"></a>LocalDate</h3><p>LocalDate类是Java 8中日期时间功能里表示一个本地日期的类，它的日期是无时区属性的。 可以用来表示生日、节假日期等等。这个类用于表示一个确切的日期，而不是这个日期所在的时间（如java.util.Date中的2000.01.01表示的实际是这一天的00:00这个瞬间）。</p><p>LocalDate类位于java.time包下，名叫java.time.LocalDate，创建出来的实例也是不可变对象，所以涉及它的计算方法将返回一个新的LocalDate。</p><p><strong>创建一个LocalDate实例</strong></p><p>我们有多种方式可以创建出 <code>LocalDate</code> 实例。第一种方法是使用 <code>now()</code> 方法获得值为今天当日的 <code>LocalDate</code> 对象：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LocalDate localDate = LocalDate.now();</span><br></pre></td></tr></table></figure></div><p>另一种方法是使用年月日信息构造出LocalDate对象：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LocalDate localDate2 = LocalDate.of(<span class="number">2018</span>, <span class="number">3</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure></div><p>LocalDate 的 <code>of()</code> 方法创建出一个指定年月日的日期，并且没有时区信息。</p><p><strong>访问日期信息</strong></p><p>可以用如下方法访问LocalDate中的日期信息：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>   year       = localDate.getYear();</span><br><span class="line">Month month      = localDate.getMonth();</span><br><span class="line"><span class="keyword">int</span>   dayOfMonth = localDate.getDayOfMonth();</span><br><span class="line"><span class="keyword">int</span>   dayOfYear  = localDate.getDayOfYear();</span><br><span class="line">DayOfWeek dayOfWeek = localDate.getDayOfWeek();</span><br></pre></td></tr></table></figure></div><p>可以注意到getMonth()与getDayOfWeek()方法返回了一个枚举类型代替一个int。你可以通过枚举类型中的getValue()来获得信息。</p><p><strong>LocalDate计算</strong></p><p>你可以进行一堆简单的日期计算，只要使用如下的方法：</p><ul><li><code>plusDays()</code></li><li><code>plusWeeks()</code></li><li><code>plusMonths()</code></li><li><code>plusYears()</code></li><li><code>minusDays()</code></li><li><code>minusWeeks()</code></li><li><code>minusMonths()</code></li><li><code>minusYears()</code></li></ul><p>以下举几个使用的例子来帮助理解使用：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LocalDate d  = LocalDate.of(<span class="number">2018</span>, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">LocalDate d1 = localDate.plusYears(<span class="number">3</span>);</span><br><span class="line">LocalDate d2 = localDate.minusYears(<span class="number">3</span>);</span><br></pre></td></tr></table></figure></div><ol><li>第一行创建出一个新的LocalDate对象d，表示2018.3.5。</li><li>第二行创建了值等于d日期3年后的LocalDate对象，第三行也是一样，只是值改为d日期的三年前。</li></ol><h3 id="LocalTime"><a href="#LocalTime" class="headerlink" title="LocalTime"></a>LocalTime</h3><p>LocalTime类是Java 8中日期时间功能里表示一整天中某个时间点的类，它的时间是无时区属性的（早上10点等等）。比如你需要描述学校几点开学，这个时间不涉及在什么城市，这个描述是对任何国家城市都适用的，此时使用无时区的LocalTime就足够了。 LocalTime类的对象也是不可变的，所以计算方法会返回一个新的LocalTime实例。</p><p><strong>创建一个LocatTime实例</strong></p><p>有多种方式可以新建LocalTime实例。比如使用当前时间作为值新建对象：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LocalTime localTime = LocalTime.now();</span><br></pre></td></tr></table></figure></div><p>另一种方式是使用指定的时分秒和纳秒来新建对象：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LocalTime localTime2 = LocalTime.of(<span class="number">21</span>, <span class="number">30</span>, <span class="number">59</span>, <span class="number">11001</span>);</span><br></pre></td></tr></table></figure></div><p>也有另一种版本的 <code>of()</code> 方法只需要小时分钟两项，或时分秒三项值作为参数。</p><p><strong>访问LocalTime对象的时间</strong></p><p>你可以通过这些方法访问其时、分、秒、纳秒：</p><ul><li><code>getHour()</code></li><li><code>getMinute()</code></li><li><code>getSecond()</code></li><li><code>getNano()</code></li></ul><p><strong>LocalTime的计算</strong></p><p>LocalTime类包含一系列方法，能帮你完成时间计算：</p><ul><li><code>plusHours()</code></li><li><code>plusMinutes()</code></li><li><code>plusSeconds()</code></li><li><code>plusNanos()</code></li><li><code>minusHours()</code></li><li><code>minusMinutes()</code></li><li><code>minusSeconds()</code></li><li><code>minusNanos()</code></li></ul><p>以下举一个例子：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LocalTime localTime2 = LocalTime.of(<span class="number">21</span>, <span class="number">30</span>, <span class="number">59</span>, <span class="number">11001</span>);</span><br><span class="line">LocalTime localTimeLater   = localTime.plusHours(<span class="number">3</span>);</span><br><span class="line">LocalTime localTimeEarlier = localTime.minusHours(<span class="number">3</span>);</span><br></pre></td></tr></table></figure></div><ol><li>第一行新建一个LocalTime实例，表示21:30:50的第11001纳秒。</li><li>第二行新建了一个LocalTime实例表示这个时间的三小时后，第三行表示三小时前。</li><li>LocalTime类是Java 8中日期时间功能里表示一整天中某个时间点的类，它的时间是无时区属性的（早上10点等等）。比如你需要描述学校几点开学，这个时间不涉及在什么城市，这个描述是对任何国家城市都适用的，此时使用无时区的LocalTime就足够了。</li></ol><p>LocalTime类的对象也是不可变的，所以计算方法会返回一个新的LocalTime实例。</p><h3 id="LocalDateTime"><a href="#LocalDateTime" class="headerlink" title="LocalDateTime"></a>LocalDateTime</h3><p>LocalDateTime类是Java 8中日期时间功能里，用于表示当地的日期与时间的类，它的值是无时区属性的。你可以将其视为Java 8中LocalDate与LocalTime两个类的结合。</p><p>LocalDateTime类的值是不可变的，所以其计算方法会返回一个新的LocalDateTime实例。</p><p><strong>创建一个LocatDateTime实例</strong></p><p>可以通过LocalDateTime的静态工厂方法来创建LocalDateTime实例。以下举例使用 <code>now()</code> 方法创建：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime localDateTime = LocalDateTime.now();</span><br></pre></td></tr></table></figure></div><p>另一种方式是使用指定的年月日、时分秒、纳秒来新建对象：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime localDateTime2 = LocalDateTime.of(<span class="number">2018</span>, <span class="number">11</span>, <span class="number">26</span>, <span class="number">13</span>, <span class="number">55</span>, <span class="number">36</span>, <span class="number">123</span>);</span><br></pre></td></tr></table></figure></div><p><strong>访问LocalDateTime对象的时间</strong></p><p>你可以通过这些方法访问其日期时间：</p><ul><li><code>getYear()</code></li><li><code>getMonth()</code></li><li><code>getDayOfMonth()</code></li><li><code>getDayOfWeek()</code></li><li><code>getDayOfYear()</code></li><li><code>getHour()</code></li><li><code>getMinute()</code></li><li><code>getSecond()</code></li><li><code>getNano()</code></li></ul><p>这些方法中有一些返回int有一些返回枚举类型，你可以通过枚举类型中的 <code>getValue()</code> 方法来获得int值。</p><p><strong>LocalDateTime的计算</strong></p><p>LocalDateTime 类包含一系列方法，能帮你完成时间计算：</p><ul><li><code>plusYears()</code></li><li><code>plusMonths()</code></li><li><code>plusDays()</code></li><li><code>plusHours()</code></li><li><code>plusMinutes()</code></li><li><code>plusSeconds()</code></li><li><code>plusNanos()</code></li><li><code>minusYears()</code></li><li><code>minusMonths()</code></li><li><code>minusDays()</code></li><li><code>minusHours()</code></li><li><code>minusMinutes()</code></li><li><code>minusSeconds()</code></li><li><code>minusNanos()</code></li></ul><p>以下举一个例子：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime localDateTime  &#x3D; LocalDateTime.now();</span><br><span class="line">LocalDateTime localDateTime1 &#x3D; localDateTime.plusYears(3);</span><br><span class="line">LocalDateTime localDateTime2 &#x3D; localDateTime.minusYears(3);</span><br></pre></td></tr></table></figure></div><ol><li>第一行新建一个LocalDateTime实例表示当前这个时间。</li><li>第二行新建了一个LocalDateTime实例表示三年后。</li><li>第三行也新建了一个LocalDateTime实例表示三小时前。</li></ol><h3 id="ZonedDateTime"><a href="#ZonedDateTime" class="headerlink" title="ZonedDateTime"></a>ZonedDateTime</h3><p>ZonedDateTime类是Java 8中日期时间功能里，用于表示带时区的日期与时间信息的类。可以用于表示一个真实事件的开始时间，如某火箭升空时间等等。</p><p>ZonedDateTime 类的值是不可变的，所以其计算方法会返回一个新的ZonedDateTime 实例。</p><p><strong>创建一个ZonedDateTime实例</strong></p><p>有多种方式可以新建ZonedDateTime实例。比如使用当前时间作为值新建对象：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZonedDateTime dateTime = ZonedDateTime.now();</span><br></pre></td></tr></table></figure></div><p>另一种方式是使用指定的年月日、时分秒、纳秒以及时区ID来新建对象：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ZoneId zoneId = ZoneId.of(<span class="string">&quot;UTC+1&quot;</span>);</span><br><span class="line">ZonedDateTime dateTime2 = ZonedDateTime.of(<span class="number">2015</span>, <span class="number">11</span>, <span class="number">30</span>, <span class="number">23</span>, <span class="number">45</span>, <span class="number">59</span>, <span class="number">1234</span>, zoneId);</span><br></pre></td></tr></table></figure></div><p><strong>访问ZonedDateTime对象的时间</strong></p><p>你可以通过这些方法访问其日期时间：</p><ul><li><code>getYear()</code></li><li><code>getMonth()</code></li><li><code>getDayOfMonth()</code></li><li><code>getDayOfWeek()</code></li><li><code>getDayOfYear()</code></li><li><code>getHour()</code></li><li><code>getMinute()</code></li><li><code>getSecond()</code></li><li><code>getNano()</code></li></ul><p>这些方法中有一些返回int有一些返回枚举类型，但可以通过枚举类型中的getValue()方法来获得int值。</p><p><strong>ZonedDateTime的计算</strong></p><p>ZonedDateTime类包含一系列方法，能帮你完成时间计算：</p><ul><li><code>plusYears()</code></li><li><code>plusMonths()</code></li><li><code>plusDays()</code></li><li><code>plusHours()</code></li><li><code>plusMinutes()</code></li><li><code>plusSeconds()</code></li><li><code>plusNanos()</code></li><li><code>minusYears()</code></li><li><code>minusMonths()</code></li><li><code>minusDays()</code></li><li><code>minusHours()</code></li><li><code>minusMinutes()</code></li><li><code>minusSeconds()</code></li><li><code>minusNanos()</code></li></ul><p>但注意计算时，若不巧跨越了夏令时（会补一小时或减一小时），可能得不到希望的结果。一个替代的正确做法是使用Period：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZonedDateTime zoneDateTime = previousDateTime.plus(Period.ofDays(<span class="number">3</span>));</span><br></pre></td></tr></table></figure></div><p><strong>时区</strong></p><p>时区是用ZoneId类表示的，你可以使用ZoneId.now()或ZoneId.of(“xxx”)来实例化：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZoneId zoneId &#x3D; ZoneId.of(&quot;UTC+1&quot;);</span><br></pre></td></tr></table></figure></div><p>传给 <code>of()</code> 方法的参数是时区的ID，如“UTC+1”指距离UTC（格林威治时间）有一小时的时差，你可以使用你想要的时差来表示ZoneId（如+1与-5等等） 你也可以使用另一种方式表示zone id，即使用地区名字，也是可以的：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ZoneId zoneId2 = ZoneId.of(<span class="string">&quot;Europe/Copenhagen&quot;</span>);</span><br><span class="line">ZoneId zoneId3 = ZoneId.of(<span class="string">&quot;Europe/Paris&quot;</span>);</span><br></pre></td></tr></table></figure></div><h3 id="DateTimeFormatter"><a href="#DateTimeFormatter" class="headerlink" title="DateTimeFormatter"></a>DateTimeFormatter</h3><p>DateTimeFormatter类是Java 8中日期时间功能里，用于解析和格式化日期时间的类，位于 <code>java.time.format</code> 包下。</p><p><strong>预定义的DateTimeFormatter实例</strong></p><p>DateTimeFormatter类包含一系列预定义（常量）的实例，可以解析和格式化一些标准时间格式。这将让你免除麻烦的时间格式定义，类中包含如下预定义的实例：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">BASIC_ISO_DATE</span><br><span class="line"></span><br><span class="line">ISO_LOCAL_DATE</span><br><span class="line">ISO_LOCAL_TIME</span><br><span class="line">ISO_LOCAL_DATE_TIME</span><br><span class="line"></span><br><span class="line">ISO_OFFSET_DATE</span><br><span class="line">ISO_OFFSET_TIME</span><br><span class="line">ISO_OFFSET_DATE_TIME</span><br><span class="line"></span><br><span class="line">ISO_ZONED_DATE_TIME</span><br><span class="line"></span><br><span class="line">ISO_INSTANT</span><br><span class="line"></span><br><span class="line">ISO_DATE</span><br><span class="line">ISO_TIME</span><br><span class="line">ISO_DATE_TIME</span><br><span class="line"></span><br><span class="line">ISO_ORDINAL_TIME</span><br><span class="line">ISO_WEEK_DATE</span><br><span class="line"></span><br><span class="line">RFC_1123_DATE_TIME</span><br></pre></td></tr></table></figure></div><p>每个预定义的DateTimeFormatter实例都有不同的日期格式，我就不解释全部的了。具体的可以查阅Java官方文档，但我在这篇的后续中会解释其中几个，以方便理解。</p><p><strong>它的格式化日期</strong></p><p>当你获取一个DateTimeFormatter实例后，就可以用format()方便来将一个日期格式化为某种字符串，例如：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DateTimeFormatter formatter = DateTimeFormatter.BASIC_ISO_DATE;</span><br><span class="line">String formattedDate = formatter.format(LocalDate.now());</span><br><span class="line">System.out.println(formattedDate);</span><br></pre></td></tr></table></figure></div><p>这个样例把LocalDate对象格式化了，并输出20150703，这个输出表示现在2018年，3月5日。 再举一个关于ZonedDateTime的例子：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DateTimeFormatter formatter = DateTimeFormatter.BASIC_ISO_DATE;</span><br><span class="line">String formattedZonedDate = formatter.format(ZonedDateTime.now());</span><br><span class="line">System.out.println(<span class="string">&quot;formattedZonedDate = &quot;</span> + formattedZonedDate);</span><br></pre></td></tr></table></figure></div><p>这个例子会输出：20180305+0800 表示今年2018年，3月5日，位于UTC+8时区。</p><h3 id="Duration"><a href="#Duration" class="headerlink" title="Duration"></a>Duration</h3><p>一个Duration对象表示两个Instant间的一段时间，是在Java 8中加入的新功能。</p><p>一个Duration实例是不可变的，当创建出对象后就不能改变它的值了。你只能通过Duration的计算方法，来创建出一个新的Durtaion对象。你会在之后的教程中见到的。</p><p><strong>创建Duration实例</strong></p><p>使用 <code>Duration</code> 类的工厂方法来创建一个 <code>Duration</code> 对象，以下是一个使用 <code>between()</code> 的例子：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Instant first = Instant.now();</span><br><span class="line"><span class="comment">// wait some time while something happens</span></span><br><span class="line">Instant second = Instant.now();</span><br><span class="line">Duration duration = Duration.between(first, second);</span><br></pre></td></tr></table></figure></div><p><strong>访问Duration的时间</strong></p><p>一个Duration对象里有两个域：纳秒值（小于一秒的部分），秒钟值（一共有几秒），他们的组合表达了时间长度。注意屯使用System.getCurrentTimeMillis()时不同，Duration不包含毫秒这个属性。 你可以通过以下两个方法得到它们的值：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">long seconds &#x3D;  getSeconds()</span><br><span class="line">int nanos   &#x3D;   getNano()</span><br></pre></td></tr></table></figure></div><p>你也可以转换整个时间到其它单位如纳秒、分钟、小时、天：</p><ul><li><code>toNanos()</code></li><li><code>toMillis()</code></li><li><code>toMinutes()</code></li><li><code>toHours()</code></li><li><code>toDays()</code></li></ul><p>举例而言：<code>toNanos()</code> 与 <code>getNano()</code> 不同，<code>toNanos()</code> 获得的是 <code>Duration</code> 整个时间共有多少纳秒， 而 <code>getNano()</code> 只是获得这段时间中小于一秒的部分。</p><p>你也许会问，为什么没有 <code>toSeconds()</code> 方法，因为已经有 <code>getSeconds()</code> 这个方法能达到同样的功能了。</p><p><strong>Duration计算</strong></p><p>Duration类包含一系列的计算方法：</p><ul><li><code>plusNanos()</code></li><li><code>plusMillis()</code></li><li><code>plusSeconds()</code></li><li><code>plusMinutes()</code></li><li><code>plusHours()</code></li><li><code>plusDays()</code></li><li><code>minusNanos()</code></li><li><code>minusMillis()</code></li><li><code>minusSeconds()</code></li><li><code>minusMinutes()</code></li><li><code>minusHours()</code></li><li><code>minusDays()</code></li></ul><p>这些方法所做的事都是相似的，我在这儿也不展示内部实现细节了，就展示一个加减的例子吧：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Duration start = ... <span class="comment">//obtain a start duration</span></span><br><span class="line">Duration added      = start.plusDays(<span class="number">3</span>);</span><br><span class="line">Duration subtracted = start.minusDays(<span class="number">3</span>);</span><br></pre></td></tr></table></figure></div><ol><li>第一行创建了一个Duration对象叫start，具体怎么创建可以参考前面的代码。</li><li>第二三行样例创建了两个新的Duration，通过调用start的加减操作，使得added对象表示的时间比start多三天，而substracted则少三天。</li></ol><p>所有的计算方法都会返回一个新的Duration，以保证Duration的不可变属性。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> days = duration.toDays();              <span class="comment">// 这段时间的总天数</span></span><br><span class="line"><span class="keyword">long</span> hours = duration.toHours();            <span class="comment">// 这段时间的小时数</span></span><br><span class="line"><span class="keyword">long</span> minutes = duration.toMinutes();        <span class="comment">// 这段时间的分钟数</span></span><br><span class="line"><span class="keyword">long</span> seconds = duration.getSeconds();       <span class="comment">// 这段时间的秒数</span></span><br><span class="line"><span class="keyword">long</span> milliSeconds = duration.toMillis();    <span class="comment">// 这段时间的毫秒数</span></span><br><span class="line"><span class="keyword">long</span> nanoSeconds = duration.toNanos();      <span class="comment">// 这段时间的纳秒数</span></span><br></pre></td></tr></table></figure></div><h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h3><p><strong>增加和减少日期</strong></p><p>Java 8中的日期/时间类都是不可变的，这是为了保证线程安全。当然，新的日期/时间类也提供了方法用于创建对象的可变版本，比如增加一天或者减少一天：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">LocalDate date = LocalDate.of(<span class="number">2017</span>, <span class="number">1</span>, <span class="number">5</span>);          <span class="comment">// 2017-01-05</span></span><br><span class="line"></span><br><span class="line">LocalDate date1 = date.withYear(<span class="number">2016</span>);              <span class="comment">// 修改为 2016-01-05</span></span><br><span class="line">LocalDate date2 = date.withMonth(<span class="number">2</span>);                <span class="comment">// 修改为 2017-02-05</span></span><br><span class="line">LocalDate date3 = date.withDayOfMonth(<span class="number">1</span>);           <span class="comment">// 修改为 2017-01-01</span></span><br><span class="line"></span><br><span class="line">LocalDate date4 = date.plusYears(<span class="number">1</span>);                <span class="comment">// 增加一年 2018-01-05</span></span><br><span class="line">LocalDate date5 = date.minusMonths(<span class="number">2</span>);              <span class="comment">// 减少两个月 2016-11-05</span></span><br><span class="line">LocalDate date6 = date.plus(<span class="number">5</span>, ChronoUnit.DAYS);    <span class="comment">// 增加5天 2017-01-10</span></span><br></pre></td></tr></table></figure></div><p>上面例子中对于日期的操作比较简单，但是有些时候我们要面临更复杂的时间操作，比如将时间调到下一个工作日， 或者是下个月的最后一天，这时候我们可以使用 <code>with()</code> 方法的另一个重载方法，它接收一个TemporalAdjuster参数， 可以使我们更加灵活的调整日期：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LocalDate date7 = date.with(nextOrSame(DayOfWeek.SUNDAY));      <span class="comment">// 返回下一个距离当前时间最近的星期日</span></span><br><span class="line">LocalDate date9 = date.with(lastInMonth(DayOfWeek.SATURDAY));   <span class="comment">// 返回本月最后一个星期六</span></span><br></pre></td></tr></table></figure></div><p>要使上面的代码正确编译，你需要使用静态导入 <code>TemporalAdjusters</code> 对象：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.time.temporal.TemporalAdjusters.*;</span><br></pre></td></tr></table></figure></div><p><code>TemporalAdjusters</code> 类中包含了很多静态方法可以直接使用，下面的表格列出了一些方法：</p><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td><code>dayOfWeekInMonth</code></td><td>返回同一个月中每周的第几天</td></tr><tr><td><code>firstDayOfMonth</code></td><td>返回当月的第一天</td></tr><tr><td><code>firstDayOfNextMonth</code></td><td>返回下月的第一天</td></tr><tr><td><code>firstDayOfNextYear</code></td><td>返回下一年的第一天</td></tr><tr><td><code>firstDayOfYear</code></td><td>返回本年的第一天</td></tr><tr><td><code>firstInMonth</code></td><td>返回同一个月中第一个星期几</td></tr><tr><td><code>lastDayOfMonth</code></td><td>返回当月的最后一天</td></tr><tr><td><code>lastDayOfNextMonth</code></td><td>返回下月的最后一天</td></tr><tr><td><code>lastDayOfNextYear</code></td><td>返回下一年的最后一天</td></tr><tr><td><code>lastDayOfYear</code></td><td>返回本年的最后一天</td></tr><tr><td><code>lastInMonth</code></td><td>返回同一个月中最后一个星期几</td></tr><tr><td><code>next / previous</code></td><td>返回后一个/前一个给定的星期几</td></tr><tr><td><code>nextOrSame / previousOrSame</code></td><td>返回后一个/前一个给定的星期几，如果这个值满足条件，直接返回</td></tr></tbody></table><p>如果上面表格中列出的方法不能满足你的需求，你还可以创建自定义的 <code>TemporalAdjuster</code> 接口的实现，<code>TemporalAdjuster</code> 也是一个函数式接口，所以我们可以使用Lambda表达式：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TemporalAdjuster</span> </span>&#123;</span><br><span class="line">    <span class="function">Temporal <span class="title">adjustInto</span><span class="params">(Temporal temporal)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>比如给定一个日期，计算该日期的下一个工作日（不包括星期六和星期天）：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">LocalDate date = LocalDate.of(<span class="number">2017</span>, <span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">date.with(temporal -&gt; &#123;</span><br><span class="line">    <span class="comment">// 当前日期</span></span><br><span class="line">    DayOfWeek dayOfWeek = DayOfWeek.of(temporal.get(ChronoField.DAY_OF_WEEK));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 正常情况下，每次增加一天</span></span><br><span class="line">    <span class="keyword">int</span> dayToAdd = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果是星期五，增加三天</span></span><br><span class="line">    <span class="keyword">if</span> (dayOfWeek == DayOfWeek.FRIDAY) &#123;</span><br><span class="line">        dayToAdd = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果是星期六，增加两天</span></span><br><span class="line">    <span class="keyword">if</span> (dayOfWeek == DayOfWeek.SATURDAY) &#123;</span><br><span class="line">        dayToAdd = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> temporal.plus(dayToAdd, ChronoUnit.DAYS);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><h3 id="其他历法"><a href="#其他历法" class="headerlink" title="其他历法"></a>其他历法</h3><p>Java中使用的历法是ISO 8601日历系统，它是世界民用历法，也就是我们所说的公历。平年有365天，闰年是366天。闰年的定义是：非世纪年，能被4整除；世纪年能被400整除。为了计算的一致性，公元1年的前一年被当做公元0年，以此类推。</p><p>此外Java 8还提供了4套其他历法（很奇怪为什么没有汉族人使用的农历），每套历法都包含一个日期类，分别是：</p><ul><li><code>ThaiBuddhistDate</code>：泰国佛教历</li><li><code>MinguoDate</code>：中华民国历</li><li><code>JapaneseDate</code>：日本历</li><li><code>HijrahDate</code>：伊斯兰历</li></ul><p>每个日期类都继承 <code>ChronoLocalDate</code> 类，所以可以在不知道具体历法的情况下也可以操作。不过这些历法一般不常用，除非是有某些特殊需求情况下才会使用。</p><p>这些不同的历法也可以用于向公历转换：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LocalDate date = LocalDate.now();</span><br><span class="line">JapaneseDate jpDate = JapaneseDate.from(date);</span><br></pre></td></tr></table></figure></div><p>由于它们都继承ChronoLocalDate类，所以在不知道具体历法情况下，可以通过ChronoLocalDate类操作日期：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Chronology jpChronology = Chronology.ofLocale(Locale.JAPANESE);</span><br><span class="line">ChronoLocalDate jpChronoLocalDate = jpChronology.dateNow();</span><br></pre></td></tr></table></figure></div><p>我们在开发过程中应该尽量避免使用 <code>ChronoLocalDate</code>，尽量用与历法无关的方式操作时间，因为不同的历法计算日期的方式不一样， 比如开发者会在程序中做一些假设，假设一年中有12个月，如果是中国农历中包含了闰月，一年有可能是13个月， 但开发者认为是12个月，多出来的一个月属于明年的。 再比如假设年份是累加的，过了一年就在原来的年份上加一，但日本天皇在换代之后需要重新纪年，所以过了一年年份可能会从1开始计算。</p><p>在实际开发过程中建议使用 <code>LocalDate</code>，包括存储、操作、业务规则的解读；除非需要将程序的输入或者输出本地化， 这时可以使用 <code>ChronoLocalDate</code> 类。</p><h2 id="Nashorn"><a href="#Nashorn" class="headerlink" title="Nashorn"></a>Nashorn</h2><p>个人感觉用的不是很多，不感兴趣的可以直接略过。</p><p><a href="https://winterbe.com/posts/2014/04/05/java8-nashorn-tutorial/">原文地址</a></p><h3 id="使用-Nashron"><a href="#使用-Nashron" class="headerlink" title="使用 Nashron"></a>使用 Nashron</h3><p>Nashorn JavaScript引擎可以在Java代码中编程调用，也可以通过命令行工具<code>jjs</code>使用，它在<code>$JAVA_HOME/bin</code>中。如果打算使用<code>jjs</code>，你可能希望设置符号链接来简化访问：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Bash"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/bin</span><br><span class="line">$ ln -s <span class="variable">$JAVA_HOME</span>/bin/jjs jjs</span><br><span class="line">$ jjs</span><br><span class="line">jjs&gt; <span class="built_in">print</span>(<span class="string">&#x27;Hello World&#x27;</span>);</span><br></pre></td></tr></table></figure></div><p>这个教程专注于在Java代码中调用Nashron，所以让我们先跳过<code>jjs</code>。Java代码中简单的<strong>HelloWorld</strong> 如下所示：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ScriptEngine engine = <span class="keyword">new</span> ScriptEngineManager().getEngineByName(<span class="string">&quot;nashorn&quot;</span>);</span><br><span class="line">engine.eval(<span class="string">&quot;print(&#x27;Hello World!&#x27;);&quot;</span>);</span><br></pre></td></tr></table></figure></div><p>为了在Java中执行JavaScript，你首先要通过<code>javax.script</code>包创建脚本引擎。这个包已经在<a href="http://link.zhihu.com/?target=https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Rhino">Rhino</a>（来源于Mozilla、Java中的遗留JS引擎）中使用了。</p><p>JavaScript代码既可以通过传递JavaScript代码字符串，也可以传递指向你的JS脚本文件的<code>FileReader</code>来执行：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ScriptEngine engine = <span class="keyword">new</span> ScriptEngineManager().getEngineByName(<span class="string">&quot;nashorn&quot;</span>);</span><br><span class="line">engine.eval(<span class="keyword">new</span> FileReader(<span class="string">&quot;script.js&quot;</span>));</span><br></pre></td></tr></table></figure></div><p>Nashorn JavaScript基于<a href="http://link.zhihu.com/?target=http://es5.github.io/">ECMAScript 5.1</a>，但是它的后续版本会对ES6提供支持：</p><blockquote><p><em>Nashorn的当前策略遵循ECMAScript规范。当我们在JDK8中发布它时，它将基于ECMAScript 5.1。Nashorn未来的主要发布基于ECMAScript 6。</em></p></blockquote><p>Nashorn定义了大量对<strong>ECMAScript</strong>标准的语言和API扩展。但是首先让我们看一看Java和JavaScript代码如何交互。</p><h3 id="在Java中调用JavaScript函数"><a href="#在Java中调用JavaScript函数" class="headerlink" title="在Java中调用JavaScript函数"></a>在Java中调用JavaScript函数</h3><p>Nashorn 支持从Java代码中直接调用定义在脚本文件中的JavaScript函数。你可以将Java对象传递为函数参数，并且从函数返回数据来调用Java方法。</p><p>下面的JavaScript函数稍后会在Java端调用：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Js"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fun1 = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    print(<span class="string">&#x27;Hi there from Javascript, &#x27;</span> + name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;greetings from javascript&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> fun2 = <span class="function"><span class="keyword">function</span> (<span class="params">object</span>) </span>&#123;</span><br><span class="line">    print(<span class="string">&quot;JS Class Definition: &quot;</span> + <span class="built_in">Object</span>.prototype.toString.call(object));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><p>为了调用函数，你首先需要将脚本引擎转换为<code>Invocable</code>。<code>Invocable</code>接口由<code>NashornScriptEngine</code>实现，并且定义了<code>invokeFunction</code>方法来调用指定名称的JavaScript函数。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ScriptEngine engine = <span class="keyword">new</span> ScriptEngineManager().getEngineByName(<span class="string">&quot;nashorn&quot;</span>);</span><br><span class="line">engine.eval(<span class="keyword">new</span> FileReader(<span class="string">&quot;script.js&quot;</span>));</span><br><span class="line">Invocable invocable = (Invocable) engine;</span><br><span class="line">Object result = invocable.invokeFunction(<span class="string">&quot;fun1&quot;</span>, <span class="string">&quot;Peter Parker&quot;</span>);</span><br><span class="line">System.out.println(result);</span><br><span class="line">System.out.println(result.getClass());</span><br><span class="line"><span class="comment">// Hi there from Javascript, Peter Parker</span></span><br><span class="line"><span class="comment">// greetings from javascript</span></span><br><span class="line"><span class="comment">// class java.lang.String</span></span><br></pre></td></tr></table></figure></div><p>执行这段代码会在控制台产生三行结果。调用函数<code>print</code>将结果输出到<code>System.out</code>，所以我们会首先看到JavaScript输出。</p><p>现在让我们通过传入任意Java对象来调用第二个函数：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">invocable.invokeFunction(<span class="string">&quot;fun2&quot;</span>, <span class="keyword">new</span> Date());</span><br><span class="line"><span class="comment">// [object java.util.Date]</span></span><br><span class="line">invocable.invokeFunction(<span class="string">&quot;fun2&quot;</span>, LocalDateTime.now());</span><br><span class="line"><span class="comment">// [object java.time.LocalDateTime]</span></span><br><span class="line">invocable.invokeFunction(<span class="string">&quot;fun2&quot;</span>, <span class="keyword">new</span> Person());</span><br><span class="line"><span class="comment">// [object com.winterbe.java8.Person]</span></span><br></pre></td></tr></table></figure></div><p>Java对象在传入时不会在JavaScript端损失任何类型信息。由于脚本在JVM上原生运行，我们可以在Nashron上使用Java API或外部库的全部功能。</p><h3 id="在JavaScript中调用Java方法"><a href="#在JavaScript中调用Java方法" class="headerlink" title="在JavaScript中调用Java方法"></a>在JavaScript中调用Java方法</h3><p>在JavaScript中调用Java方法十分容易。我们首先需要定义一个Java静态方法。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> String <span class="title">fun1</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    System.out.format(<span class="string">&quot;Hi there from Java, %s&quot;</span>, name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;greetings from java&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>Java类可以通过<code>Java.type</code>API扩展在JavaScript中引用。它就和Java代码中的<code>import</code>类似。只要定义了Java类型，我们就可以自然地调用静态方法<code>fun1()</code>，然后像<code>sout</code>打印信息。由于方法是静态的，我们不需要首先创建实例。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyJavaClass = Java.type(<span class="string">&#x27;my.package.MyJavaClass&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> result = MyJavaClass.fun1(<span class="string">&#x27;John Doe&#x27;</span>);</span><br><span class="line">print(result);</span><br><span class="line"><span class="comment">// Hi there from Java, John Doe</span></span><br><span class="line"><span class="comment">// greetings from java</span></span><br></pre></td></tr></table></figure></div><p>在使用JavaScript原生类型调用Java方法时，Nashorn 如何处理类型转换？让我们通过简单的例子来弄清楚。</p><p>下面的Java方法简单打印了方法参数的实际类型：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun2</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">    System.out.println(object.getClass());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>为了理解背后如何处理类型转换，我们使用不同的JavaScript类型来调用这个方法：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">MyJavaClass.fun2(<span class="number">123</span>);</span><br><span class="line"><span class="comment">// class java.lang.Integer</span></span><br><span class="line">MyJavaClass.fun2(<span class="number">49.99</span>);</span><br><span class="line"><span class="comment">// class java.lang.Double</span></span><br><span class="line">MyJavaClass.fun2(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// class java.lang.Boolean</span></span><br><span class="line">MyJavaClass.fun2(<span class="string">&quot;hi there&quot;</span>)</span><br><span class="line"><span class="comment">// class java.lang.String</span></span><br><span class="line">MyJavaClass.fun2(<span class="keyword">new</span> Number(<span class="number">23</span>));</span><br><span class="line"><span class="comment">// class jdk.nashorn.internal.objects.NativeNumber</span></span><br><span class="line">MyJavaClass.fun2(<span class="keyword">new</span> Date());</span><br><span class="line"><span class="comment">// class jdk.nashorn.internal.objects.NativeDate</span></span><br><span class="line">MyJavaClass.fun2(<span class="keyword">new</span> RegExp());</span><br><span class="line"><span class="comment">// class jdk.nashorn.internal.objects.NativeRegExp</span></span><br><span class="line">MyJavaClass.fun2(&#123;foo: <span class="string">&#x27;bar&#x27;</span>&#125;);</span><br><span class="line"><span class="comment">// class jdk.nashorn.internal.scripts.JO4</span></span><br></pre></td></tr></table></figure></div><p>JavaScript原始类型转换为合适的Java包装类，而JavaScript原生对象会使用内部的适配器类来表示。要记住<code>jdk.nashorn.internal</code>中的类可能会有所变化，所以不应该在客户端面向这些类来编程。</p><blockquote><p><em>任何标记为“内部”的东西都可能会从你那里发生改变。</em></p></blockquote><h3 id="ScriptObjectMirror"><a href="#ScriptObjectMirror" class="headerlink" title="ScriptObjectMirror"></a>ScriptObjectMirror</h3><p>在向Java传递原生JavaScript对象时，你可以使用<code>ScriptObjectMirror</code>类，它实际上是底层JavaScript对象的Java表示。<code>ScriptObjectMirror</code>实现了<code>Map</code>接口，位于<code>jdk.nashorn.api</code>中。这个包中的类可以用于客户端代码。</p><p>下面的例子将参数类型从<code>Object</code>改为<code>ScriptObjectMirror</code>，所以我们可以从传入的JavaScript对象中获得一些信息。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun3</span><span class="params">(ScriptObjectMirror mirror)</span> </span>&#123;</span><br><span class="line">    System.out.println(mirror.getClassName() + <span class="string">&quot;: &quot;</span> +</span><br><span class="line">        Arrays.toString(mirror.getOwnKeys(<span class="keyword">true</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>当向这个方法传递对象（哈希表）时，在Java端可以访问其属性：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MyJavaClass.fun3(&#123;</span><br><span class="line">    foo: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">    bar: <span class="string">&#x27;foo&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Object: [foo, bar]</span></span><br></pre></td></tr></table></figure></div><p>我们也可以在Java中调用JavaScript的成员函数。让我们首先定义JavaScript <code>Person</code>类型，带有属性<code>firstName</code> 和 <code>lastName</code>，以及方法<code>getFullName</code>。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Js"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">firstName, lastName</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.firstName = firstName;</span><br><span class="line">    <span class="built_in">this</span>.lastName = lastName;</span><br><span class="line">    <span class="built_in">this</span>.getFullName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&quot; &quot;</span> + <span class="built_in">this</span>.lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>JavaScript方法<code>getFullName</code>可以通过<code>callMember()</code>在<code>ScriptObjectMirror</code>上调用。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun4</span><span class="params">(ScriptObjectMirror person)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Full Name is: &quot;</span> + person.callMember(<span class="string">&quot;getFullName&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>当向Java方法传递新的<code>Person</code>时，我们会在控制台看到预期的结果：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Js"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">&quot;Peter&quot;</span>, <span class="string">&quot;Parker&quot;</span>);</span><br><span class="line">MyJavaClass.fun4(person1);</span><br><span class="line"><span class="comment">// Full Name is: Peter Parker</span></span><br></pre></td></tr></table></figure></div><h3 id="语言扩展"><a href="#语言扩展" class="headerlink" title="语言扩展"></a>语言扩展</h3><p>Nashorn定义了多种对ECMAScript标准的语言和API扩展。让我们看一看最新的特性：</p><h4 id="类型数组"><a href="#类型数组" class="headerlink" title="类型数组"></a>类型数组</h4><p>JavaScript的原生数组是无类型的。Nashron允许你在JavaScript中使用Java的类型数组：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Js"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> IntArray = Java.type(<span class="string">&quot;int[]&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> array = <span class="keyword">new</span> IntArray(<span class="number">5</span>);</span><br><span class="line">array[<span class="number">0</span>] = <span class="number">5</span>;</span><br><span class="line">array[<span class="number">1</span>] = <span class="number">4</span>;</span><br><span class="line">array[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">array[<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line">array[<span class="number">4</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    array[<span class="number">5</span>] = <span class="number">23</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    print(e.message);  <span class="comment">// Array index out of range: 5</span></span><br><span class="line">&#125;</span><br><span class="line">array[<span class="number">0</span>] = <span class="string">&quot;17&quot;</span>;</span><br><span class="line">print(array[<span class="number">0</span>]);  <span class="comment">// 17</span></span><br><span class="line">array[<span class="number">0</span>] = <span class="string">&quot;wrong type&quot;</span>;</span><br><span class="line">print(array[<span class="number">0</span>]);  <span class="comment">// 0</span></span><br><span class="line">array[<span class="number">0</span>] = <span class="string">&quot;17.3&quot;</span>;</span><br><span class="line">print(array[<span class="number">0</span>]);  <span class="comment">// 17</span></span><br></pre></td></tr></table></figure></div><p><code>int[]</code>数组就像真实的Java整数数组那样。但是此外，在我们试图向数组添加非整数时，Nashron在背后执行了一些隐式的转换。字符串会自动转换为整数，这十分便利。</p><h4 id="集合和范围遍历"><a href="#集合和范围遍历" class="headerlink" title="集合和范围遍历"></a>集合和范围遍历</h4><p>我们可以使用任何Java集合，而避免使用数组瞎折腾。首先需要通过<code>Java.type</code>定义Java类型，之后创建新的实例。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Js"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ArrayList = Java.type(<span class="string">&#x27;java.util.ArrayList&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">list.add(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">list.add(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">list.add(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> each (<span class="keyword">var</span> el <span class="keyword">in</span> list) print(el);  <span class="comment">// a, b, c</span></span><br></pre></td></tr></table></figure></div><p>为了迭代集合和数组，Nashron引入了<code>for each</code>语句。它就像Java的范围遍历那样工作。</p><p>下面是另一个集合的范围遍历示例，使用<code>HashMap</code>：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Js"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> java.util.HashMap();</span><br><span class="line">map.put(<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;val1&#x27;</span>);</span><br><span class="line">map.put(<span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;val2&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> each (<span class="keyword">var</span> e <span class="keyword">in</span> map.keySet()) print(e);  <span class="comment">// foo, bar</span></span><br><span class="line"><span class="keyword">for</span> each (<span class="keyword">var</span> e <span class="keyword">in</span> map.values()) print(e);  <span class="comment">// val1, val2</span></span><br></pre></td></tr></table></figure></div><h4 id="Lambda表达式和数据流"><a href="#Lambda表达式和数据流" class="headerlink" title="Lambda表达式和数据流"></a>Lambda表达式和数据流</h4><p>每个人都热爱lambda和数据流 — Nashron也一样！虽然ECMAScript 5.1没有Java8 lmbda表达式的简化箭头语法，我们可以在任何接受lambda表达式的地方使用函数字面值。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Js"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list2 = <span class="keyword">new</span> java.util.ArrayList();</span><br><span class="line">list2.add(<span class="string">&quot;ddd2&quot;</span>);</span><br><span class="line">list2.add(<span class="string">&quot;aaa2&quot;</span>);</span><br><span class="line">list2.add(<span class="string">&quot;bbb1&quot;</span>);</span><br><span class="line">list2.add(<span class="string">&quot;aaa1&quot;</span>);</span><br><span class="line">list2.add(<span class="string">&quot;bbb3&quot;</span>);</span><br><span class="line">list2.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">list2.add(<span class="string">&quot;bbb2&quot;</span>);</span><br><span class="line">list2.add(<span class="string">&quot;ddd1&quot;</span>);</span><br><span class="line">list2</span><br><span class="line">    .stream()</span><br><span class="line">    .filter(<span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> el.startsWith(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .sorted()</span><br><span class="line">    .forEach(<span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">        print(el);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// aaa1, aaa2</span></span><br></pre></td></tr></table></figure></div><h4 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h4><p>Java类型可以由<code>Java.extend</code>轻易扩展。就像你在下面的例子中看到的那样，你甚至可以在你的脚本中创建多线程的代码：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Js"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Runnable = Java.type(<span class="string">&#x27;java.lang.Runnable&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> Printer = Java.extend(Runnable, &#123;</span><br><span class="line">    run: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        print(<span class="string">&#x27;printed from a separate thread&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> Thread = Java.type(<span class="string">&#x27;java.lang.Thread&#x27;</span>);</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Printer()).start();</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    print(<span class="string">&#x27;printed from another thread&#x27;</span>);</span><br><span class="line">&#125;).start();</span><br><span class="line"><span class="comment">// printed from a separate thread</span></span><br><span class="line"><span class="comment">// printed from another thread</span></span><br></pre></td></tr></table></figure></div><h4 id="参数重载"><a href="#参数重载" class="headerlink" title="参数重载"></a>参数重载</h4><p>方法和函数可以通过点运算符或方括号运算符来调用：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Js"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> System = Java.type(<span class="string">&#x27;java.lang.System&#x27;</span>);</span><br><span class="line">System.out.println(<span class="number">10</span>);              <span class="comment">// 10</span></span><br><span class="line">System.out[<span class="string">&quot;println&quot;</span>](<span class="number">11.0</span>);         <span class="comment">// 11.0</span></span><br><span class="line">System.out[<span class="string">&quot;println(double)&quot;</span>](<span class="number">12</span>);   <span class="comment">// 12.0</span></span><br></pre></td></tr></table></figure></div><p>当使用重载参数调用方法时，传递可选参数类型<code>println(double)</code>会指定所调用的具体方法。</p><h4 id="Java-Beans"><a href="#Java-Beans" class="headerlink" title="Java Beans"></a>Java Beans</h4><p>你可以简单地使用属性名称来向Java Beans获取或设置值，不需要显式调用读写器：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Js"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">Date</span> = Java.type(<span class="string">&#x27;java.util.Date&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">date.year += <span class="number">1900</span>;</span><br><span class="line">print(date.year);  <span class="comment">// 2014</span></span><br></pre></td></tr></table></figure></div><h4 id="函数字面值"><a href="#函数字面值" class="headerlink" title="函数字面值"></a>函数字面值</h4><p>对于简单的单行函数，我们可以去掉花括号：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Js"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sqr</span>(<span class="params">x</span>) <span class="title">x</span> * <span class="title">x</span></span>;</span><br><span class="line">print(sqr(<span class="number">3</span>));    <span class="comment">// 9</span></span><br></pre></td></tr></table></figure></div><h4 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h4><p>两个不同对象的属性可以绑定到一起：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Js"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> o2 = &#123; <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span>&#125;;</span><br><span class="line"><span class="built_in">Object</span>.bindProperties(o1, o2);</span><br><span class="line">print(o1.foo);    <span class="comment">// bar</span></span><br><span class="line">o1.foo = <span class="string">&#x27;BAM&#x27;</span>;</span><br><span class="line">print(o2.foo);    <span class="comment">// BAM</span></span><br></pre></td></tr></table></figure></div><h4 id="字符串去空白"><a href="#字符串去空白" class="headerlink" title="字符串去空白"></a>字符串去空白</h4><p>我喜欢去掉空白的字符串：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Js"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&quot;   hehe&quot;</span>.trimLeft());            <span class="comment">// hehe</span></span><br><span class="line">print(<span class="string">&quot;hehe    &quot;</span>.trimRight() + <span class="string">&quot;he&quot;</span>);   <span class="comment">// hehehe</span></span><br></pre></td></tr></table></figure></div><h4 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h4><p>以防你忘了自己在哪里：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Js"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(__FILE__, __LINE__, __DIR__);</span><br></pre></td></tr></table></figure></div><h4 id="导入作用域"><a href="#导入作用域" class="headerlink" title="导入作用域"></a>导入作用域</h4><p>有时一次导入多个Java包会很方便。我们可以使用<code>JavaImporter</code>类，和<code>with</code>语句一起使用。所有被导入包的类文件都可以在<code>with</code>语句的局部域中访问到。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Js"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> imports = <span class="keyword">new</span> JavaImporter(java.io, java.lang);</span><br><span class="line"><span class="keyword">with</span> (imports) &#123;</span><br><span class="line">    <span class="keyword">var</span> file = <span class="keyword">new</span> File(__FILE__);</span><br><span class="line">    System.out.println(file.getAbsolutePath());</span><br><span class="line">    <span class="comment">// /path/to/my/script.js</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="数组转换"><a href="#数组转换" class="headerlink" title="数组转换"></a>数组转换</h4><p>一些类似<code>java.util</code>的包可以不使用<code>java.type</code>或<code>JavaImporter</code>直接访问：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Js"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="keyword">new</span> java.util.ArrayList();</span><br><span class="line">list.add(<span class="string">&quot;s1&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;s2&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;s3&quot;</span>);</span><br></pre></td></tr></table></figure></div><p>下面的代码将Java列表转换为JavaScript原生数组：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Js"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsArray = Java.from(list);</span><br><span class="line">print(jsArray);                                  <span class="comment">// s1,s2,s3</span></span><br><span class="line">print(<span class="built_in">Object</span>.prototype.toString.call(jsArray));  <span class="comment">// [object Array]</span></span><br></pre></td></tr></table></figure></div><p>下面的代码执行相反操作：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Js"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> javaArray = Java.to([<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>], <span class="string">&quot;int[]&quot;</span>);</span><br></pre></td></tr></table></figure></div><h4 id="访问超类"><a href="#访问超类" class="headerlink" title="访问超类"></a>访问超类</h4><p>在JavaScript中访问被覆盖的成员通常比较困难，因为Java的<code>super</code>关键字在ECMAScript中并不存在。幸运的是，Nashron有一套补救措施。</p><p>首先我们需要在Java代码中定义超类：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperRunner</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;super run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>下面我在JavaScript中覆盖了<code>SuperRunner</code>。要注意创建新的<code>Runner</code>实例时的Nashron语法：覆盖成员的语法取自Java的匿名对象。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Js"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> SuperRunner = Java.type(<span class="string">&#x27;com.winterbe.java8.SuperRunner&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> Runner = Java.extend(SuperRunner);</span><br><span class="line"><span class="keyword">var</span> runner = <span class="keyword">new</span> <span class="function"><span class="title">Runner</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    run: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        Java.super(runner).run();</span><br><span class="line">        print(<span class="string">&#x27;on my run&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">runner.run();</span><br><span class="line"><span class="comment">// super run</span></span><br><span class="line"><span class="comment">// on my run</span></span><br></pre></td></tr></table></figure></div><p>我们通过<code>Java.super()</code>扩展调用了被覆盖的<code>SuperRunner.run()</code>方法。</p><h3 id="加载脚本"><a href="#加载脚本" class="headerlink" title="加载脚本"></a>加载脚本</h3><p>在JavaScript中加载额外的脚本文件非常方便。我们可以使用<code>load</code>函数加载本地或远程脚本。</p><p>我在我的Web前端中大量使用<a href="http://link.zhihu.com/?target=http://underscorejs.org/">Underscore.js</a>，所以让我们在Nashron中复用它：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Js"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">load(<span class="string">&#x27;http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.6.0/underscore-min.js&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> odds = _.filter([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], <span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num % <span class="number">2</span> == <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line">print(odds);  <span class="comment">// 1, 3, 5</span></span><br></pre></td></tr></table></figure></div><p>外部脚本会在相同JavaScript上下文中被执行，所以我们可以直接访问underscore 的对象。要记住当变量名称互相冲突时，脚本的加载可能会使你的代码崩溃。</p><p>这一问题可以通过把脚本文件加载到新的全局上下文来绕过：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Js"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loadWithNewGlobal(<span class="string">&#x27;script.js&#x27;</span>);</span><br></pre></td></tr></table></figure></div><h3 id="命令行脚本"><a href="#命令行脚本" class="headerlink" title="命令行脚本"></a>命令行脚本</h3><p>如果你对编写命令行（shell）脚本感兴趣，来试一试<a href="http://link.zhihu.com/?target=https://github.com/winterbe/nake">Nake</a>吧。Nake是一个Java 8 Nashron的简化构建工具。你只需要在项目特定的<code>Nakefile</code>中定义任务，之后通过在命令行键入<code>nake -- myTask</code>来执行这些任务。任务编写为JavaScript，并且在Nashron的脚本模式下运行，所以你可以使用你的终端、JDK8 API和任意Java库的全部功能。</p><p>对Java开发者来说，编写命令行脚本是前所未有的简单…</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="Optional-1"><a href="#Optional-1" class="headerlink" title="Optional"></a>Optional</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>empty</code></td><td>返回一个空的 Optional 实例</td></tr><tr><td><code>filter</code></td><td>如果值存在并且满足提供的断言， 就返回包含该值的 Optional 对象；否则返回一个空的 Optional 对象</td></tr><tr><td><code>map</code></td><td>如果值存在，就对该值执行提供的 mapping 函数调用</td></tr><tr><td><code>flatMap</code></td><td>如果值存在，就对该值执行提供的 mapping 函数调用，返回一个 Optional 类型的值，否则就返 回一个空的 Optional 对象</td></tr><tr><td><code>get</code></td><td>如果该值存在，将该值用 Optional 封装返回，否则抛出一个 NoSuchElementException 异常</td></tr><tr><td><code>ifPresent</code></td><td>如果值存在，就执行使用该值的方法调用，否则什么也不做</td></tr><tr><td><code>isPresent</code></td><td>如果值存在就返回 true，否则返回 false</td></tr><tr><td><code>of</code></td><td>将指定值用 Optional 封装之后返回，如果该值为 null，则抛出一个 NullPointerException 异常</td></tr><tr><td><code>ofNullable</code></td><td>将指定值用 Optional 封装之后返回，如果该值为 null，则返回一个空的 Optional 对象</td></tr><tr><td><code>orElse</code></td><td>如果有值则将其返回，否则返回一个默认值</td></tr><tr><td><code>orElseGet</code></td><td>如果有值则将其返回，否则返回一个由指定的 Supplier 接口生成的值</td></tr><tr><td><code>orElseThrow</code></td><td>如果有值则将其返回，否则抛出一个由指定的 Supplier 接口生成的异常</td></tr></tbody></table><p>Optional 可以很优雅地避免了 <code>NullPointerException</code> ，这里我们简单举个例子，</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ptional&lt;String&gt; optional = Optional.of(<span class="string">&quot;bam&quot;</span>);</span><br><span class="line"></span><br><span class="line">optional.isPresent();<span class="comment">// true</span></span><br><span class="line">optional.get();                 <span class="comment">// &quot;bam&quot;</span></span><br><span class="line">optional.orElse(<span class="string">&quot;fallback&quot;</span>);    <span class="comment">// &quot;bam&quot;</span></span><br><span class="line"></span><br><span class="line">optional.ifPresent((s) -&gt; System.out.println(s.charAt(<span class="number">0</span>)));     <span class="comment">// &quot;b&quot;</span></span><br></pre></td></tr></table></figure></div><h3 id="Base64-1"><a href="#Base64-1" class="headerlink" title="Base64"></a>Base64</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Encoding a string to base 64</span></span><br><span class="line">Base64.Encoder encoder = Base64.getEncoder();</span><br><span class="line">String normalString = <span class="string">&quot;username:password&quot;</span>;</span><br><span class="line">String encodedString = encoder.encodeToString(</span><br><span class="line">        normalString.getBytes(StandardCharsets.UTF_8) );</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Decoding a base 64 encoded string</span></span><br><span class="line">String encodedString = <span class="string">&quot;dXNlcm5hbWU6cGFzc3dvcmQ=&quot;</span>;</span><br><span class="line">Base64.Decoder decoder = Base64.getDecoder();</span><br><span class="line"><span class="keyword">byte</span>[] decodedByteArray = decoder.decode(encodedString);</span><br><span class="line"><span class="comment">//Verify the decoded string</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> String(decodedByteArray));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Wrap to a base 64 encoded output stream</span></span><br><span class="line">Path originalPath = Paths.get(<span class="string">&quot;c:/temp&quot;</span>, <span class="string">&quot;mail.txt&quot;</span>);</span><br><span class="line">Path targetPath = Paths.get(<span class="string">&quot;c:/temp&quot;</span>, <span class="string">&quot;encoded.txt&quot;</span>);</span><br><span class="line">Base64.Encoder mimeEncoder = Base64.getMimeEncoder();</span><br><span class="line"><span class="keyword">try</span>(OutputStream output = Files.newOutputStream(targetPath))&#123;</span><br><span class="line">    <span class="comment">//Copy the encoded file content to target file</span></span><br><span class="line">    Files.copy(originalPath, mimeEncoder.wrap(output));</span><br><span class="line">    <span class="comment">//Or simply use the encoded output stream</span></span><br><span class="line">    OutputStream encodedStrem = mimeEncoder.wrap(output);</span><br><span class="line">&#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure></div><h3 id="Annotation"><a href="#Annotation" class="headerlink" title="Annotation"></a>Annotation</h3><p><a href="https://www.jianshu.com/p/1a46570920da">原文链接</a></p><p>Java 8在两个方面对注解机制进行了改进，分别为:</p><p>你现在可以定义重复注解</p><p>你可以为任何目标添加注解</p><p>Java中的注解是一种对程序元素进行配置，提供附加信息的机制。</p><h4 id="重复注解"><a href="#重复注解" class="headerlink" title="重复注解"></a>重复注解</h4><p>之前版本的Java禁止对同样的注解类型声明多次。由于这个原因，下面的第二句代码是无效的。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@interface</span> Author &#123;</span><br><span class="line"> <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Author(name=&quot;Raoul&quot;)</span> </span><br><span class="line"><span class="meta">@Author(name=&quot;Mario&quot;)</span> <span class="meta">@Author(name=&quot;Alan&quot;)</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Book</span></span>&#123; &#125;</span><br></pre></td></tr></table></figure></div><p>Java程序员经常通过一些惯用法绕过这一限制。例如可以声明一个新的注解，它包含了你希望重复的注解数组。这种方法的形式如下:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@interface</span> Author &#123;</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@interface</span> Authors &#123;</span><br><span class="line">    Author[] value();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Authors(</span></span><br><span class="line"><span class="meta">&#123;</span></span><br><span class="line"><span class="meta">@Author(name=&quot;Raoul&quot;), </span></span><br><span class="line"><span class="meta">@Author(name=&quot;Mario&quot;) , </span></span><br><span class="line"><span class="meta">@Author(name=&quot;Alan&quot;)</span></span><br><span class="line"><span class="meta">&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></div><p>Book类的嵌套注解相当难看。这就是Java 8想要从根本上移除这一限制的原因，去掉这一限制后，代码的可读性会好很多。</p><p>现在，如果你的配置允许重复注解，你可以毫无顾虑地一次声明 多个同一种类型的注解。它目前还不是默认行为，你需要显式地要求进行重复注解。</p><p>创建一个重复注解</p><p>如果一个注解在设计之初就是可重复的，你可以直接使用它。但是，如果你提供的注解是为用户提供的，那么就需要做一些工作，说明该注解可以重复。下面是你需要执行的两个步骤:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repeatable(Authors.class)</span></span><br><span class="line"><span class="meta">@interface</span> Author &#123; </span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@interface</span> Authors &#123;</span><br><span class="line">    Author[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>完成了这样的定义之后，Book类可以通过多个@Author注解进行注释，如下所示:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Author(name=&quot;Raoul&quot;)</span> </span><br><span class="line"><span class="meta">@Author(name=&quot;Mario&quot;)</span> </span><br><span class="line"><span class="meta">@Author(name=&quot;Alan&quot;)</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span></span>&#123; &#125;</span><br></pre></td></tr></table></figure></div><p>编译时，Book会被认为使用了</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Authors(&#123;@Author(name=&quot;Raoul&quot;), </span></span><br><span class="line"><span class="meta">@Author(name =”Mario”), </span></span><br><span class="line"><span class="meta">@Author(name=”Alan”)&#125;)</span></span><br></pre></td></tr></table></figure></div><p>这样的形式进行了注解，所以，你可以把这种新的机 制看成是一种语法糖，它提供了Java程序员之前利用的惯用法类似的功能。为了确保与反射方法 在行为上的一致性，注解会被封装到一个容器中。Java API中的getAnnotation(Class<T> annotation-Class)方法会为注解元素返回类型为T的注解。如果实际情况有多个类型为T的注解，该方法的返回到底是哪一个呢?</p><p>类Class提供了一个新的getAnnotationsByType 方法，它可以帮助我们更好地使用重复注解。比如，你可以像下面这样打印输出Book类的所有Author注解:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Author[] authors = Book.class.getAnnotationsByType(Author.class); </span><br><span class="line"><span class="comment">//java8提供的循环及lambda表达式</span></span><br><span class="line">Arrays.asList(authors).forEach(a -&gt;</span><br><span class="line"> &#123; </span><br><span class="line">    System.out.println(a.name());</span><br><span class="line"> &#125;</span><br><span class="line"> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="类型注解"><a href="#类型注解" class="headerlink" title="类型注解"></a>类型注解</h4><p>从Java 8开始，注解已经能应用于任何目标。这其中包括new操作符、类型转换、instanceof检查、泛型类型参数，以及implements和throws子句。</p><p>这里，我们举了一个例子，这个例子中 类型为String的变量name不能为空，所以我们使用了@NonNull对其进行注解:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NonNull</span> String name = person.getName();</span><br></pre></td></tr></table></figure></div><p>类似地，你可以对列表中的元素类型进行注解:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="meta">@NonNull</span> Car&gt; cars = <span class="keyword">new</span> ArrayList&lt;&gt;(); </span><br></pre></td></tr></table></figure></div><p>利用好对类型的注解非常有利于我们对程序进行分析。这两个例子中，通过这一工具我们可以确保getName不返回空，cars列表中的元素总是非空值。这会 极大地帮助你减少代码中不期而至的错误。</p><p>Java 8并未提供官方的注解或者一种工具能以开箱即用的方式使用它们。它仅仅提供了一种功能，你使用它可以对不同的类型添加注解。</p><h4 id="泛型类型推断"><a href="#泛型类型推断" class="headerlink" title="泛型类型推断"></a>泛型类型推断</h4><p>Java 8对泛型参数的推断进行了增强。相信你对Java 8之前版本中的类型推断已经比较熟了。</p><p>比如，Java中的方法emptyList方法定义如下:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">emptyList</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></div><p>emptyList方法使用了类型参数T进行参数化。你可以像下面这样为该类型参数提供一个显式的类型进行函数调用:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Car&gt; cars = Collections.&lt;Car&gt;emptyList();</span><br></pre></td></tr></table></figure></div><p>不过Java也可以推断泛型参数的类型。上面的代码和下面这段代码是等价的:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Car&gt; cars = Collections.emptyList();</span><br></pre></td></tr></table></figure></div><p>Java 8出现之前，这种推断机制依赖于程序的上下文(即目标类型)，具有一定的局限性。</p><p>Java 8中，目标类型包括向方法传递的参数，因此你不再需要提供显式的泛型参数</p><h3 id="Regex"><a href="#Regex" class="headerlink" title="Regex"></a>Regex</h3><h4 id="Convert-Regex-to-Predicate"><a href="#Convert-Regex-to-Predicate" class="headerlink" title="Convert Regex to Predicate"></a>Convert Regex to Predicate</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> count = Stream.of(<span class="string">&quot;bob@gmail.com&quot;</span>, <span class="string">&quot;alice@hotmail.com&quot;</span>)</span><br><span class="line">    .filter(Pattern.compile(<span class="string">&quot;.*@gmail\\.com&quot;</span>).asPredicate())</span><br><span class="line">    .count();</span><br><span class="line">System.out.println(count);</span><br></pre></td></tr></table></figure></div><h4 id="Using-Regex-using-Pattern-matcher"><a href="#Using-Regex-using-Pattern-matcher" class="headerlink" title="Using Regex using Pattern.matcher()"></a>Using Regex using Pattern.matcher()</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Pattern pattern = Pattern.compile(<span class="string">&quot;^(.+)@example.com$&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Input list</span></span><br><span class="line">        List&lt;String&gt; emails = Arrays.asList(<span class="string">&quot;alex@example.com&quot;</span>, <span class="string">&quot;bob@yahoo.com&quot;</span>,</span><br><span class="line">                <span class="string">&quot;cat@google.com&quot;</span>, <span class="string">&quot;david@example.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(String email : emails)</span><br><span class="line">        &#123;</span><br><span class="line">            Matcher matcher = pattern.matcher(email);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(matcher.matches())</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(email);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></div><h3 id="File"><a href="#File" class="headerlink" title="File"></a>File</h3><h4 id="Read"><a href="#Read" class="headerlink" title="Read"></a>Read</h4><h5 id="Read-file-line-by-line-–-Java-8-Stream"><a href="#Read-file-line-by-line-–-Java-8-Stream" class="headerlink" title="Read file line by line – Java 8 Stream"></a>Read file line by line – Java 8 Stream</h5><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> Path path = Paths.get(<span class="string">&quot;c:/temp&quot;</span>, <span class="string">&quot;data.txt&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//The stream hence file will also be closed here</span></span><br><span class="line"><span class="keyword">try</span>(Stream&lt;String&gt; lines = Files.lines(path))</span><br><span class="line">&#123;</span><br><span class="line">    Optional&lt;String&gt; hasPassword = lines.filter(s -&gt; s.contains(<span class="string">&quot;password&quot;</span>)).findFirst();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(hasPassword.isPresent())&#123;</span><br><span class="line">        System.out.println(hasPassword.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"> Path path = Paths.get(<span class="string">&quot;c:/temp&quot;</span>, <span class="string">&quot;data.txt&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// When filteredLines is closed, it closes underlying stream as well as underlying file.</span></span><br><span class="line"><span class="keyword">try</span>(Stream&lt;String&gt; filteredLines = Files.lines(path).filter(s -&gt; s.contains(<span class="string">&quot;password&quot;</span>)))</span><br><span class="line">&#123;</span><br><span class="line">    Optional&lt;String&gt; hasPassword = filteredLines.findFirst();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(hasPassword.isPresent())&#123;</span><br><span class="line">        System.out.println(hasPassword.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="Read-file-line-by-line-–-FileReader"><a href="#Read-file-line-by-line-–-FileReader" class="headerlink" title="Read file line by line – FileReader"></a>Read file line by line – FileReader</h5><p>Till java 7, you could read a file using FileReader in various ways. There may be other effective and better variations of this code but that is not the man point of this post. I am giving just as reminder.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">File file = <span class="keyword">new</span> File(<span class="string">&quot;c:/temp/data.txt&quot;</span>);</span><br><span class="line"> </span><br><span class="line">FileReader fr = <span class="keyword">new</span> FileReader(file);</span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(fr);</span><br><span class="line"></span><br><span class="line">String line;</span><br><span class="line"><span class="keyword">while</span>((line = br.readLine()) != <span class="keyword">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(line.contains(<span class="string">&quot;password&quot;</span>))&#123;</span><br><span class="line">        System.out.println(line);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">br.close();</span><br><span class="line">fr.close();</span><br></pre></td></tr></table></figure></div><h4 id="Write"><a href="#Write" class="headerlink" title="Write"></a>Write</h4><h5 id="Java-8-write-to-file-using-BufferedWriter"><a href="#Java-8-write-to-file-using-BufferedWriter" class="headerlink" title="Java 8 write to file using BufferedWriter"></a>Java 8 write to file using BufferedWriter</h5><p><a href="https://docs.oracle.com/javase/8/docs/api/java/io/BufferedWriter.html">BufferedWriter</a> is used to write text to a character or byte stream. Before printing the characters, it stores the characters in buffer and print in bunches. Without buffering, each invocation of a print() method would cause characters to be converted into bytes that would then be written immediately to the file, which can be very inefficient.</p><p>Java program to <em>write content to file using Java 8</em> APIs is –</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Get the file reference</span></span><br><span class="line">Path path = Paths.get(<span class="string">&quot;c:/output.txt&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//Use try-with-resource to get auto-closeable writer instance</span></span><br><span class="line"><span class="keyword">try</span> (BufferedWriter writer = Files.newBufferedWriter(path))</span><br><span class="line">&#123;</span><br><span class="line">    writer.write(<span class="string">&quot;Hello World !!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="Write-to-file-using-Files-write"><a href="#Write-to-file-using-Files-write" class="headerlink" title="Write to file using Files.write()"></a>Write to file using Files.write()</h5><p>Using <a href="https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#write-java.nio.file.Path-byte:A-java.nio.file.OpenOption...-">Files.write()</a> method is also pretty much clean code.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String content = <span class="string">&quot;Hello World !!&quot;</span>;</span><br><span class="line"> </span><br><span class="line">Files.write(Paths.get(<span class="string">&quot;c:/output.txt&quot;</span>), content.getBytes());</span><br></pre></td></tr></table></figure></div><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://github.com/winterbe/java8-tutorial">java8-tutorial</a></p><p><a href="https://howtodoinjava.com/java8/">howtodoinjava java8</a> </p><p><a href="https://github.com/CarpenterLee/JavaLambdaInternals">JavaLambdaInternals</a></p><p><a href="https://martinfowler.com/articles/collection-pipeline/">collection-pipeline</a></p><p><a href="https://github.com/biezhi/learn-java8">learn-java8</a></p><p><a href="https://zq99299.github.io/java-tutorial/">java8官网笔记教程</a></p><p><a href="https://github.com/jianchengwang/todo-java/tree/master/java8">示例代码</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> JAVA-SE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gradle</title>
      <link href="2020/12/26/gradle/"/>
      <url>2020/12/26/gradle/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>软件行业的蓬勃发展，新旧交替，版本构建工具从 <strong>ant -&gt; maven -&gt; gradle</strong> 进行演变，个人不喜欢 maven 的 xml 的配置文件，基于  <strong>Groovy</strong> 语言作为构建脚本语言，相对于 JAVA 开发人员来说比较容易上手，动态语言也比 xml 配置文件更灵活，构建速度也更加的快速，所以入了 gradle 的坑。当然，目前，很多公司还是使用 maven 作为构建工具，所以建议maven 还是要懂点的。</p><p>本文仅供自己学习 gradle 的记录笔记，如果你想深入的学习，请戳 <a href="https://docs.gradle.org/current/userguide/userguide.html"><strong>官方文档</strong></a></p><p>个人觉得，官方文档是最好的学习文档，我简单过了一遍，感觉官方文档的例子都很精炼，总结得很到位，底下很多代码实例也是来自官方文档。</p><a id="more"></a><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>每一次  Gradle  构建都是由一个或者多个 <strong>projects</strong> 组成，</p><p>比如一个  <strong>root projects</strong>  依赖多个 <strong>sub projects</strong> <strong>(module)</strong> 项目，每个 projects 又由编译，打包，生成javadoc，发布等多个 <strong>tasks</strong> 组成。<strong>tasks</strong> 之间也可以相互依赖，形成一个依赖关系图以确保他们的执行顺序。</p><h3 id="项目-Projects"><a href="#项目-Projects" class="headerlink" title="项目 Projects"></a>项目 Projects</h3><p>一个项目代表一个正在构建的组件，比如一个jar文件，当构建启动的时候，<strong>Gradle</strong> 会基于 <strong>build.gradle</strong> 实例化一个 <strong>org.gradle.api.Project</strong> 类，并且能够通过 project 变量使其隐式可用。</p><p>属性: <strong>group name version</strong></p><p>方法: <strong>apply denpendencies repositories task</strong></p><p>其他配置方式: <strong>ext gradle.properties</strong></p><h3 id="任务-Tasks"><a href="#任务-Tasks" class="headerlink" title="任务 Tasks"></a>任务 Tasks</h3><p>任务对应 <strong>org.gradle.api.Task</strong> ，主要包括任务动作和任务依赖。任务工作定义了一个最小的工作单元，可以定义依赖其他任务，动作序列和动作执行条件等。</p><p>方法: <strong>dependsOn doFirst do Last(&lt;&lt;)</strong>  </p><h3 id="构建生命周期-Build-Lifecycle"><a href="#构建生命周期-Build-Lifecycle" class="headerlink" title="构建生命周期 Build Lifecycle"></a>构建生命周期 Build Lifecycle</h3><p>A Gradle build has three distinct phases.</p><ul><li><p>Initialization</p><p>Gradle supports single and multi-project builds. During the initialization phase, Gradle determines which projects are going to take part in the build, and creates a <a href="https://docs.gradle.org/current/dsl/org.gradle.api.Project.html">Project</a> instance for each of these projects.</p></li><li><p>Configuration</p><p>During this phase the project objects are configured. The build scripts of <em>all</em> projects which are part of the build are executed.</p></li><li><p>Execution</p><p>Gradle determines the subset of the tasks, created and configured during the configuration phase, to be executed. The subset is determined by the task name arguments passed to the <code>gradle</code> command and the current directory. Gradle then executes each of the selected tasks.</p></li></ul><h3 id="配置文件-Settings-file"><a href="#配置文件-Settings-file" class="headerlink" title="配置文件 Settings file"></a>配置文件 Settings file</h3><p>简要概述，就是如果你是多项目，那么你要在 root project 里创建 <strong>settings.gradle</strong> 里去定义跟 sub project的关系，这个文件会在所有 project build.gradle 执行前执行。</p><p>每个 project 都有一个构建脚本 <strong>build.gradle</strong> 来完成每个 project 的构建。</p><p>在构建的时候，你如果需要对 gradle 运行一些通用的构建配置，你可以定义在 <strong>gradle.properties</strong> 里，比如全局的 group 跟 name 等。</p><p>另外，gradle 是插件配置，你可以通过 <strong>apply</strong> 引入各种现成的或者自定义的插件构建脚本。</p><p>关于 gradle 项目的几种构建脚本或者配置文件描述如下</p><h4 id="settings-gradle"><a href="#settings-gradle" class="headerlink" title="settings.gradle"></a>settings.gradle</h4><p>This is executed during the <strong>initialization</strong> phase.</p><p>The main role of settings.gradle is to define all included submodules and to mark the directory root of a tree of modules, so you can only have one <code>settings.gradle</code> file in a multi-module project.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rootProject.name = <span class="string">&#x27;project-x&#x27;</span></span><br><span class="line"></span><br><span class="line">include <span class="string">&#x27;sub-a&#x27;</span>, <span class="string">&#x27;sub-b&#x27;</span></span><br></pre></td></tr></table></figure></div><p>The settings file is also written in groovy, and submodule lookup can be adapted alot.</p><h4 id="build-gradle"><a href="#build-gradle" class="headerlink" title="build.gradle"></a>build.gradle</h4><p>This is executed during the <strong>configuration</strong> phase.</p><p>There is one such file per module, it contains the build logic for this module.</p><p>In the <code>build.gradle</code> file of the <strong>main module</strong>, you can use <code>allprojects &#123;&#125;</code> or <code>subprojects &#123;&#125;</code>to define settings for all other modules.</p><p>In the <code>build.gradle</code> file of the submodules, you can use <code>compile project(&#39;:sub-a&#39;)</code> to make one submodule depend on the other.</p><h4 id="gradle-properties"><a href="#gradle-properties" class="headerlink" title="gradle.properties"></a>gradle.properties</h4><p>This is optional, it’s main purpose is to provide startup options to use for running gradle itself, e.g.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.gradle.jvmargs=-Dfile.encoding=UTF-<span class="number">8</span> ...</span><br><span class="line">org.gradle.configureondemand=<span class="keyword">true</span></span><br></pre></td></tr></table></figure></div><h4 id="gradle-utils-gradle"><a href="#gradle-utils-gradle" class="headerlink" title="gradle/utils.gradle"></a>gradle/utils.gradle</h4><p>(Any name of folder or file is possible.) You can define additional custom gradle files to reuse definitions, and include them in other gradle files via</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply from: <span class="string">&quot;$rootDir/gradle/utils.gradle&quot;</span></span><br></pre></td></tr></table></figure></div><h2 id="Groovy-基础"><a href="#Groovy-基础" class="headerlink" title="Groovy 基础"></a>Groovy 基础</h2><p>Groovy是一门jvm语言，它最终是要编译成class文件然后在jvm上执行，所以Java语言的特性Groovy都支持，我们完全可以混写Java和Groovy。</p><p>既然如此，那Groovy的优势是什么呢？简单来说，Groovy提供了更加灵活简单的语法，大量的语法糖以及闭包特性可以让你用更少的代码来实现和Java同样的功能。比如解析xml文件，Groovy就非常方便，只需要几行代码就能搞定，而如果用Java则需要几十行代码。</p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>深入学习或者有问题请戳 <a href="http://docs.groovy-lang.org/latest/html/groovy-jdk/index-all.html"><strong>Groovy Api文档</strong></a></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Groovy"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 完全兼容 java 的语法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 分号可选</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类，方法默认都是 public</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译器给属性自动添加 getter/setter 方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 属性可以直接通过 . 号获取 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// == 调用 equals 方法，判断对象是否同一个使用.is()</span></span><br><span class="line">Object a = <span class="keyword">new</span> Object()</span><br><span class="line">Object b = a.clone()</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> a == b</span><br><span class="line"><span class="keyword">assert</span> !a.is(b)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 弱类型语言，可以直接用 def 定义</span></span><br><span class="line"><span class="keyword">def</span> version = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// assert 语句</span></span><br><span class="line">version = <span class="literal">null</span></span><br><span class="line"><span class="keyword">assert</span> version == <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 括号可选</span></span><br><span class="line">println version</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法返回值可省略</span></span><br><span class="line"><span class="keyword">def</span> hello() &#123;</span><br><span class="line">    <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// .1 单引号仅仅表示字符</span></span><br><span class="line"><span class="keyword">def</span> s1 = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// .2 双引号可以引用变量</span></span><br><span class="line"><span class="keyword">def</span> world = <span class="string">&#x27;world&#x27;</span></span><br><span class="line"><span class="keyword">def</span> s2 = <span class="string">&quot;hello $&#123;world&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// .3 三个引号可以换行</span></span><br><span class="line"><span class="keyword">def</span> s3 = <span class="string">&#x27;&#x27;&#x27; hello </span></span><br><span class="line"><span class="string">world</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环</span></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.5</span>)&#123;</span><br><span class="line">    println(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">4.</span>times &#123;</span><br><span class="line">    println it</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 集合api</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// .1 list -&gt; ArrayList</span></span><br><span class="line"><span class="keyword">def</span> buildTools = [<span class="string">&#x27;ant&#x27;</span>, <span class="string">&#x27;maven&#x27;</span>]</span><br><span class="line">buildTools &lt;&lt; <span class="string">&#x27;gradle&#x27;</span></span><br><span class="line"><span class="keyword">assert</span> buildTools.getClass() == ArrayList</span><br><span class="line"><span class="keyword">assert</span> buildTools.size</span><br><span class="line"></span><br><span class="line"><span class="comment">// .2 map -&gt; LinkedHashMap</span></span><br><span class="line"><span class="keyword">def</span> map = <span class="string">&#x27;a&#x27;</span>:<span class="string">&#x27;b&#x27;</span></span><br><span class="line"><span class="keyword">def</span> buildYears = [<span class="string">&#x27;ant&#x27;</span>: <span class="number">2000</span>, <span class="string">&#x27;maven&#x27;</span>: <span class="number">2004</span>]</span><br><span class="line">buildYears.gradle = <span class="number">2009</span></span><br><span class="line">println buildYears.ant</span><br><span class="line">println buildYears[<span class="string">&#x27;ant&#x27;</span>]</span><br><span class="line">println buildYears.getClass()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 闭包 -&gt; 类似于c语言的函数指针，可以作为方法的参数和返回值，也可以作为一个变量而存在。</span></span><br><span class="line"><span class="keyword">def</span> c1 = &#123;</span><br><span class="line">    v -&gt;</span><br><span class="line">    println v</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">def</span> c2 = &#123;</span><br><span class="line">    println <span class="string">&#x27;world&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">def</span> method1(Closure closure) &#123;方法: apply denpendencies repositories task</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    closure(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">def</span> method2(Closure closure) &#123;</span><br><span class="line">    closure()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c1.call(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">c1(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">c2.call()</span><br><span class="line">method1(c1)</span><br><span class="line">method2(c2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// io</span></span><br><span class="line"><span class="keyword">def</span> file = <span class="keyword">new</span> File(<span class="string">&quot;a.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line">println <span class="string">&quot;read file using two parameters&quot;</span></span><br><span class="line">file.eachLine &#123; line, lineNo -&gt;</span><br><span class="line"></span><br><span class="line">    println <span class="string">&quot;$&#123;lineNo&#125; $&#123;line&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">println <span class="string">&quot;read file using one parameters&quot;</span></span><br><span class="line">file.eachLine &#123; line -&gt;</span><br><span class="line"></span><br><span class="line">    println <span class="string">&quot;$&#123;line&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">file.eachLine(<span class="string">&quot;utf-8&quot;</span>) &#123;</span><br><span class="line">    println it</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// wich 操作符</span></span><br><span class="line">Book bk = <span class="keyword">new</span> Book()</span><br><span class="line">bk.id = <span class="number">1</span></span><br><span class="line">bk.name = <span class="string">&quot;android art&quot;</span></span><br><span class="line">bk.press = <span class="string">&quot;china press&quot;</span></span><br><span class="line"></span><br><span class="line">Book bk = <span class="keyword">new</span> Book() </span><br><span class="line">bk.with &#123;</span><br><span class="line">    id = <span class="number">1</span></span><br><span class="line">    name = <span class="string">&quot;android art&quot;</span></span><br><span class="line">    press = <span class="string">&quot;china press&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否为真</span></span><br><span class="line"><span class="keyword">if</span> (name) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 三元表达式</span></span><br><span class="line"><span class="keyword">def</span> result = name ?: <span class="string">&quot;Unknown&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 非空判断</span></span><br><span class="line">println order?.customer?.address</span><br><span class="line"></span><br><span class="line"><span class="comment">// switch</span></span><br><span class="line">def x = <span class="number">1.23</span></span><br><span class="line">def result = <span class="string">&quot;&quot;</span></span><br><span class="line">switch (x) &#123;</span><br><span class="line">    case <span class="string">&quot;foo&quot;</span>: result = <span class="string">&quot;found foo&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// lets fall through</span></span><br><span class="line"></span><br><span class="line">    case <span class="string">&quot;bar&quot;</span>: result += <span class="string">&quot;bar&quot;</span></span><br><span class="line">    <span class="keyword">case</span> [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="string">&#x27;inList&#x27;</span>]: result = <span class="string">&quot;list&quot;</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="number">12.</span><span class="number">.30</span>: result = <span class="string">&quot;range&quot;</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="attr">Integer:</span> result = <span class="string">&quot;integer&quot;</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="attr">Number:</span> result = <span class="string">&quot;number&quot;</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> &#123; it &gt; <span class="number">3</span> &#125;: result = <span class="string">&quot;number &gt; 3&quot;</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="symbol">default:</span> result = <span class="string">&quot;default&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">assert</span> result == <span class="string">&quot;number&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h3 id="构建脚本解析"><a href="#构建脚本解析" class="headerlink" title="构建脚本解析"></a>构建脚本解析</h3><p>详细介绍或者想深入了解请戳 <a href="https://docs.gradle.org/current/javadoc/org/gradle/api/Project.html#apply(java.util.Map)"><strong>官方api</strong></a></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Groovy"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//  PluginAware.apply(java.util.Map) </span></span><br><span class="line">apply <span class="attr">plugin:</span><span class="string">&#x27;java&#x27;</span></span><br><span class="line"></span><br><span class="line">version = <span class="string">&#x27;0.1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// voidrepositories​(Closure configureClosure)</span></span><br><span class="line"><span class="comment">// Configures the repositories for this project.</span></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// void dependencies​(Closure configureClosure)</span></span><br><span class="line"><span class="comment">// Configures the dependencies for this project.</span></span><br><span class="line">dependencies &#123;</span><br><span class="line">    <span class="comment">// https://mvnrepository.com/artifact/com.google.guava/guava</span></span><br><span class="line">compile <span class="attr">group:</span> <span class="string">&#x27;com.google.guava&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;guava&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;27.1-jre&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h2><h3 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h3><p>Gradle的设计理念是，所有有用的特性都由<a href="http://www.gradle.org/docs/current/userguide/plugins.html">Gradle插件</a>提供，一个Gradle插件能够：</p><ul><li><p>在项目中添加新任务</p></li><li><p>为新加入的任务提供默认配置，这个默认配置会在项目中注入新的约定（如源文件位置）。</p></li><li><p>加入新的属性，可以覆盖插件的默认配置属性。</p></li><li><p>为项目加入新的依赖。</p></li></ul><p>Gradle 用户手册提供了 <a href="https://docs.gradle.org/current/userguide/plugin_reference.html"><strong>一系列标准的gradle插件</strong></a>  </p><h4 id="The-Java-Plugin"><a href="#The-Java-Plugin" class="headerlink" title="The Java Plugin"></a>The Java Plugin</h4><p>比如 <strong>The Java Plugin</strong>， 提供了 java 相关的目录结构，属性配置，构建任务等等</p><p>如果我们使用标准的gradle插件，</p><p>注意这个不能在配置在 <strong>multi-project configurations(subprojects<code>, </code>allprojects)</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Groovy"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">plugins:</span> &#123;</span><br><span class="line">    <span class="symbol">id:</span> <span class="string">&#x27;java&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>当然我们也可以使用 <strong>apply</strong> 方法，就比较灵活了</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Groovy"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;java&#x27;</span></span><br></pre></td></tr></table></figure></div><p>我们还可以定义 jvm 的编译级别</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Groovy"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sourceCompatibility:</span> <span class="number">1.8</span></span><br><span class="line"><span class="attr">targetCompatibility:</span> <span class="number">1.8</span></span><br></pre></td></tr></table></figure></div><h5 id="Project-Layout"><a href="#Project-Layout" class="headerlink" title="Project Layout"></a>Project Layout</h5><p>当我们使用 java 这个插件的时候，它默认的项目结构是</p><ul><li><p><code>src/main/java</code></p><p>Production Java source.</p></li><li><p><code>src/main/resources</code></p><p>Production resources, such as XML and properties files.</p></li><li><p><code>src/test/java</code></p><p>Test Java source.</p></li><li><p><code>src/test/resources</code></p><p>Test resources.</p></li><li><p><code>src/*sourceSet*/java</code></p><p>Java source for the source set named <em>sourceSet</em>.</p></li><li><p><code>src/*sourceSet*/resources</code></p><p>Resources for the source set named <em>sourceSet</em>.</p></li></ul><p>当然我们也可以更改它</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Groovy"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sourceSets &#123;</span><br><span class="line">    main &#123;</span><br><span class="line">        java &#123;</span><br><span class="line">            srcDirs = [<span class="string">&#x27;src/java&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        resources &#123;</span><br><span class="line">            srcDirs = [<span class="string">&#x27;src/resources&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="Dependency-management"><a href="#Dependency-management" class="headerlink" title="Dependency management"></a>Dependency management</h5><ul><li><p><code>compile</code>(Deprecated)</p><p>Compile time dependencies. Superseded by <code>implementation</code>.</p></li><li><p><code>implementation</code> extends <code>compile</code></p><p>Implementation only dependencies.</p></li><li><p><code>compileOnly</code></p><p>Compile time only dependencies, not used at runtime.</p></li><li><p><code>compileClasspath</code> extends <code>compile, compileOnly, implementation</code></p><p>Compile classpath, used when compiling source. Used by task <code>compileJava</code>.</p></li><li><p><code>annotationProcessor</code></p><p>Annotation processors used during compilation.</p></li><li><p><code>runtime</code>(Deprecated) extends <code>compile</code></p><p>Runtime dependencies. Superseded by <code>runtimeOnly</code>.</p></li><li><p><code>runtimeOnly</code></p><p>Runtime only dependencies.</p></li><li><p><code>runtimeClasspath</code> extends <code>runtimeOnly, runtime, implementation</code></p><p>Runtime classpath contains elements of the implementation, as well as runtime only elements.</p></li><li><p><code>testCompile</code>(Deprecated) extends <code>compile</code></p><p>Additional dependencies for compiling tests. Superseded by <code>testImplementation</code>.</p></li><li><p><code>testImplementation</code> extends <code>testCompile, implementation</code></p><p>Implementation only dependencies for tests.</p></li><li><p><code>testCompileOnly</code></p><p>Additional dependencies only for compiling tests, not used at runtime.</p></li><li><p><code>testCompileClasspath</code> extends <code>testCompile, testCompileOnly, testImplementation</code></p><p>Test compile classpath, used when compiling test sources. Used by task <code>compileTestJava</code>.</p></li><li><p><code>testRuntime</code>(Deprecated) extends <code>runtime, testCompile</code></p><p>Additional dependencies for running tests only. Used by task <code>test</code>. Superseded by <code>testRuntimeOnly</code>.</p></li><li><p><code>testRuntimeOnly</code> extends <code>runtimeOnly</code></p><p>Runtime only dependencies for running tests. Used by task <code>test</code>.</p></li><li><p><code>testRuntimeClasspath</code> extends <code>testRuntimeOnly, testRuntime, testImplementation</code></p><p>Runtime classpath for running tests.</p></li><li><p><code>archives</code></p><p>Artifacts (e.g. jars) produced by this project. Used by tasks <code>uploadArchives</code>.</p></li><li><p><code>default</code> extends <code>runtime</code></p><p>The default configuration used by a project dependency on this project. Contains the artifacts and dependencies required by this project at runtime.</p></li></ul><h5 id="jar"><a href="#jar" class="headerlink" title="jar"></a>jar</h5><p>插件也会提供很多构建任务，比如 <strong>compileJava</strong> ， <strong>processResources</strong>，<strong>classes</strong>，<strong>jar</strong>，<strong>clean</strong>，<strong>test</strong> 等等，这里只简要地提一下 <strong>jar</strong> 构建的 <strong>Manifest</strong></p><p>Each jar or war object has a <code>manifest</code> property with a separate instance of <a href="https://docs.gradle.org/current/javadoc/org/gradle/api/java/archives/Manifest.html">Manifest</a>. When the archive is generated, a corresponding <code>MANIFEST.MF</code> file is written into the archive.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Groovy"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">jar &#123;</span><br><span class="line">    from &#123; configurations.compile.collect &#123; it.isDirectory() ? it : zipTree(it) &#125; &#125;</span><br><span class="line">    manifest &#123;</span><br><span class="line">        attributes <span class="string">&#x27;Main-Class&#x27;</span>: <span class="string">&#x27;cn.jianchengwang.todo.gradle.HelloWorld&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="The-War-Plugin"><a href="#The-War-Plugin" class="headerlink" title="The War Plugin"></a>The War Plugin</h4><p>The War plugin extends the Java plugin to add support for assembling web application WAR files. It disables the default JAR archive generation of the Java plugin and adds a default WAR archive task.</p><p>这里只显示一些简单的配置脚本</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Groovy"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;war&#x27;</span></span><br><span class="line"></span><br><span class="line">configurations &#123;</span><br><span class="line">   moreLibs</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">   flatDir &#123; dirs <span class="string">&quot;lib&quot;</span> &#125;</span><br><span class="line">   jcenter()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation module(<span class="string">&quot;:compile:1.0&quot;</span>) &#123;</span><br><span class="line">        dependency <span class="string">&quot;:compile-transitive-1.0@jar&quot;</span></span><br><span class="line">        dependency <span class="string">&quot;:providedCompile-transitive:1.0@jar&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    providedCompile <span class="string">&quot;javax.servlet:servlet-api:2.5&quot;</span></span><br><span class="line">    providedCompile module(<span class="string">&quot;:providedCompile:1.0&quot;</span>) &#123;</span><br><span class="line">        dependency <span class="string">&quot;:providedCompile-transitive:1.0@jar&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    runtimeOnly <span class="string">&quot;:runtime:1.0&quot;</span></span><br><span class="line">    providedRuntime <span class="string">&quot;:providedRuntime:1.0@jar&quot;</span></span><br><span class="line">    testImplementation <span class="string">&quot;junit:junit:4.12&quot;</span></span><br><span class="line">    moreLibs <span class="string">&quot;:otherLib:1.0&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">war &#123;</span><br><span class="line">    from <span class="string">&#x27;src/rootContent&#x27;</span> <span class="comment">// adds a file-set to the root of the archive</span></span><br><span class="line">    webInf &#123; from <span class="string">&#x27;src/additionalWebInf&#x27;</span> &#125; <span class="comment">// adds a file-set to the WEB-INF dir.</span></span><br><span class="line">    classpath fileTree(<span class="string">&#x27;additionalLibs&#x27;</span>) <span class="comment">// adds a file-set to the WEB-INF/lib dir.</span></span><br><span class="line">    classpath configurations.moreLibs <span class="comment">// adds a configuration to the WEB-INF/lib dir.</span></span><br><span class="line">    webXml = file(<span class="string">&#x27;src/someWeb.xml&#x27;</span>) <span class="comment">// copies a file to WEB-INF/web.xml</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>其他还有很多官方标准插件这里就不都叙述了，还有怎么编写 gradle 插件，官方文档里有详细的介绍，有兴趣可以去了解下。</p><h3 id="自定义任务"><a href="#自定义任务" class="headerlink" title="自定义任务"></a>自定义任务</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Groovy"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">task hello &#123;</span><br><span class="line">    doLast -&gt; &#123;</span><br><span class="line">        println <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task count &#123;</span><br><span class="line">    &lt;&lt; &#123;</span><br><span class="line">        <span class="number">4.</span>times &#123; print <span class="string">&quot;$it &quot;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Task dependencies</span></span><br><span class="line">task intro &#123;</span><br><span class="line">    dependsOn hello</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">&quot;I&#x27;m Gradle&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dynamic tasks</span></span><br><span class="line"><span class="number">4.</span>times &#123; counter -&gt;</span><br><span class="line">    task <span class="string">&quot;task$counter&quot;</span> &#123;</span><br><span class="line">        doLast &#123;</span><br><span class="line">            println <span class="string">&quot;I&#x27;m task number $counter&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Manipulating existing tasks</span></span><br><span class="line">hello.doFirst &#123;</span><br><span class="line">    println <span class="string">&#x27;Hello Venus&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">hello.configure &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">&#x27;Hello Mars&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">hello.configure &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">&#x27;Hello Jupiter&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Extra task properties</span></span><br><span class="line">task myTask &#123;</span><br><span class="line">    ext.myProperty = <span class="string">&quot;myValue&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task printTaskProperties &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println myTask.myProperty</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Default tasks</span></span><br><span class="line"><span class="comment">// Gradle allows you to define one or more default tasks that are executed if no other tasks are specified.</span></span><br><span class="line">defaultTasks <span class="string">&#x27;clean&#x27;</span>, <span class="string">&#x27;run&#x27;</span></span><br><span class="line"></span><br><span class="line">task clean &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">&#x27;Default Cleaning!&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task run &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">&#x27;Default Running!&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task other &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">&quot;I&#x27;m not a default task!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// working with files</span></span><br><span class="line"><span class="comment">// .1 Copy</span></span><br><span class="line">task copyReport(<span class="attr">type:</span> Copy) &#123;</span><br><span class="line">    from file(<span class="string">&quot;$buildDir/reports/my-report.pdf&quot;</span>)</span><br><span class="line">    into file(<span class="string">&quot;$buildDir/toArchive&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task copyReportsForArchiving(<span class="attr">type:</span> Copy) &#123;</span><br><span class="line">    from <span class="string">&quot;$buildDir/reports/my-report.pdf&quot;</span>, <span class="string">&quot;src/docs/manual.pdf&quot;</span></span><br><span class="line">    into <span class="string">&quot;$buildDir/toArchive&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task copyPdfReportsForArchiving(<span class="attr">type:</span> Copy) &#123;</span><br><span class="line">    from <span class="string">&quot;$buildDir/reports&quot;</span></span><br><span class="line">    include <span class="string">&quot;*.pdf&quot;</span></span><br><span class="line">    into <span class="string">&quot;$buildDir/toArchive&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// .2 Archive or UnPack</span></span><br><span class="line">task packageDistribution(<span class="attr">type:</span> Zip) &#123;</span><br><span class="line">    archiveFileName = <span class="string">&quot;my-distribution.zip&quot;</span></span><br><span class="line">    destinationDirectory = file(<span class="string">&quot;$buildDir/dist&quot;</span>)</span><br><span class="line"></span><br><span class="line">    from <span class="string">&quot;$buildDir/toArchive&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task unpackFiles(<span class="attr">type:</span> Copy) &#123;</span><br><span class="line">    from zipTree(<span class="string">&quot;src/resources/thirdPartyResources.zip&quot;</span>)</span><br><span class="line">    into <span class="string">&quot;$buildDir/resources&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// .3 Creating &quot;uber&quot; or &quot;fat&quot; JARs</span></span><br><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;java&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">version = <span class="string">&#x27;1.0.0&#x27;</span></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;commons-io:commons-io:2.6&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task uberJar(<span class="attr">type:</span> Jar) &#123;</span><br><span class="line">    archiveClassifier = <span class="string">&#x27;uber&#x27;</span></span><br><span class="line"></span><br><span class="line">    from sourceSets.main.output</span><br><span class="line"></span><br><span class="line">    dependsOn configurations.runtimeClasspath</span><br><span class="line">    from &#123;</span><br><span class="line">        configurations.runtimeClasspath.findAll &#123; it.name.endsWith(<span class="string">&#x27;jar&#x27;</span>) &#125;.collect &#123; zipTree(it) &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="管理依赖"><a href="#管理依赖" class="headerlink" title="管理依赖"></a>管理依赖</h3><h4 id="依赖类型"><a href="#依赖类型" class="headerlink" title="依赖类型"></a>依赖类型</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Groovy"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// module dependencies</span></span><br><span class="line">dependencies &#123;</span><br><span class="line">    runtime <span class="attr">group:</span> <span class="string">&#x27;org.springframework&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;spring-core&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;2.5&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;org.springframework:spring-web:5.+&#x27;</span></span><br><span class="line">    implementation(<span class="string">&#x27;org.ow2.asm:asm:6.0&#x27;</span>) &#123;</span><br><span class="line">        because <span class="string">&#x27;we require a JDK 9 compatible bytecode generator&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// file dependencies</span></span><br><span class="line">dependencies &#123;</span><br><span class="line">    runtime files(<span class="string">&#x27;libs/a.jar&#x27;</span>, <span class="string">&#x27;libs/b.jar&#x27;</span>)</span><br><span class="line">    runtime fileTree(<span class="string">&#x27;libs&#x27;</span>) &#123; include <span class="string">&#x27;*.jar&#x27;</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// project dependencies</span></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation project(<span class="string">&#x27;:shared&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="仓库类型"><a href="#仓库类型" class="headerlink" title="仓库类型"></a>仓库类型</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Groovy"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// flat dir</span></span><br><span class="line">repositories &#123;</span><br><span class="line">    flatDir &#123;</span><br><span class="line">        dirs <span class="string">&#x27;lib&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    flatDir &#123;</span><br><span class="line">        dirs <span class="string">&#x27;lib1&#x27;</span>, <span class="string">&#x27;lib2&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// maven repo</span></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">  jcenter()</span><br><span class="line">google()</span><br><span class="line">    mavenLocal()</span><br><span class="line">    maven &#123;</span><br><span class="line">        url <span class="string">&quot;http://repo.mycompany.com/maven2&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    maven &#123;</span><br><span class="line">        url <span class="string">&quot;http://repo.mycompany.com/snapshots&quot;</span></span><br><span class="line">        mavenContent &#123;</span><br><span class="line">            snapshotsOnly()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    maven &#123;</span><br><span class="line">        url <span class="string">&quot;sftp://repo.mycompany.com:22/maven2&quot;</span></span><br><span class="line">        credentials &#123;</span><br><span class="line">            username <span class="string">&quot;user&quot;</span></span><br><span class="line">            password <span class="string">&quot;password&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="版本冲突"><a href="#版本冲突" class="headerlink" title="版本冲突"></a>版本冲突</h4><p>如果存在依赖的版本冲突，那么 gradle 默认会选择最高版本的的依赖以解决依赖冲突，当然我们也可以手动解决，比如排除依赖，或者手动设置一个版本。当然，一般使用 gradle 默认的处理就可以了。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Groovy"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  Excluding transitive dependency for a particular dependency declaration</span></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation(<span class="string">&#x27;log4j:log4j:1.2.15&#x27;</span>) &#123;</span><br><span class="line">        exclude <span class="attr">group:</span> <span class="string">&#x27;javax.jms&#x27;</span>, <span class="attr">module:</span> <span class="string">&#x27;jms&#x27;</span></span><br><span class="line">        exclude <span class="attr">group:</span> <span class="string">&#x27;com.sun.jdmk&#x27;</span>, <span class="attr">module:</span> <span class="string">&#x27;jmxtools&#x27;</span></span><br><span class="line">        exclude <span class="attr">group:</span> <span class="string">&#x27;com.sun.jmx&#x27;</span>, <span class="attr">module:</span> <span class="string">&#x27;jmxri&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Excluding transitive dependency for a particular configuration</span></span><br><span class="line">configurations &#123;</span><br><span class="line">    implementation &#123;</span><br><span class="line">        exclude <span class="attr">group:</span> <span class="string">&#x27;javax.jms&#x27;</span>, <span class="attr">module:</span> <span class="string">&#x27;jms&#x27;</span></span><br><span class="line">        exclude <span class="attr">group:</span> <span class="string">&#x27;com.sun.jdmk&#x27;</span>, <span class="attr">module:</span> <span class="string">&#x27;jmxtools&#x27;</span></span><br><span class="line">        exclude <span class="attr">group:</span> <span class="string">&#x27;com.sun.jmx&#x27;</span>, <span class="attr">module:</span> <span class="string">&#x27;jmxri&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;log4j:log4j:1.2.15&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Enforcing a dependency version</span></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;org.apache.httpcomponents:httpclient:4.5.4&#x27;</span></span><br><span class="line">    implementation(<span class="string">&#x27;commons-codec:commons-codec:1.9&#x27;</span>) &#123;</span><br><span class="line">        force = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="多项目构建"><a href="#多项目构建" class="headerlink" title="多项目构建"></a>多项目构建</h3><p>多项目构建就是在 <strong>root project</strong>配置一个 <strong>settings.gradle</strong> 引入需要的子项目即可，</p><p>比如我这边 <strong>root project</strong> 为  todo-gradle，有三个 <strong>sub project</strong> ，</p><p>则 <strong>settings.gradle</strong> 配置如下</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Groovy"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rootProject.name = <span class="string">&#x27;todo-gradle&#x27;</span></span><br><span class="line">include <span class="string">&#x27;web&#x27;</span></span><br><span class="line">include <span class="string">&#x27;model&#x27;</span></span><br><span class="line">include <span class="string">&#x27;dao&#x27;</span></span><br></pre></td></tr></table></figure></div><p>如果，<strong>sub project</strong> 很多配置项一样，那我们可以在 <strong>root project</strong> 的 <strong>build.gradle</strong> 构建脚本里进行通用的配置，使其对子项目生效，</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Groovy"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line"></span><br><span class="line">    apply <span class="attr">plugin:</span> <span class="string">&#x27;java&#x27;</span></span><br><span class="line"></span><br><span class="line">    sourceCompatibility = <span class="number">1.8</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">subprojects &#123;</span><br><span class="line"></span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    dependencies &#123;</span><br><span class="line">        testCompile <span class="attr">group:</span> <span class="string">&#x27;junit&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;junit&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;4.12&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>如果自定义的配置的任务或者选项，则在每个 <strong>project</strong> 的 <strong>build.gradle</strong> 构建脚本里配置即可，比如我 <strong>web sub project</strong> 还引入了 <strong>The War Plugin</strong>，那么我在 <strong>web sub project</strong> 的<strong>build.gradle</strong> 构建脚本可以配置如下</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Groovy"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;war&#x27;</span></span><br></pre></td></tr></table></figure></div><p>最后就是项目依赖配置了，比如我 <strong>dao sub project</strong> 依赖 <strong>model sub project</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Groovy"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation project(<span class="string">&#x27;:model&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>因为依赖是可以传递的，所以假如我 <strong>web sub project</strong> 依赖 <strong>dao sub project</strong> 跟 <strong>model sub project</strong>，而 <strong>dao sub project</strong> 又依赖 <strong>model sub project</strong>，实际上我只要在 <strong>web sub projec</strong>t 构建脚本里面依赖 <strong>dao sub project</strong> 即可</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Groovy"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation project(<span class="string">&#x27;:dao&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>如果存在依赖关系，显而易见，那么被依赖的项目或者任务都会先执行。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>一般只要类继承 <strong>junit.framework.TestCase</strong> 或者 <strong>groovy.util.GroovyTestCase</strong> </p><p>或是假如使用 springboot 框架，带有 <strong>@RunWith</strong> 注解的类</p><p>最常见的就是任何至少一个包含 <strong>@Test</strong> 注解的类</p><p>当然，不同测试框架使用大同小异，你可以具体使用的时候查阅下资料即可，</p><p>下面官方的代码实例就显示了 <strong>test task</strong> 的相关配置。 </p><p>Executes JUnit (3.8.x, 4.x or 5.x) or TestNG tests. Test are always run in (one or more) separate JVMs. The sample below shows various configuration options.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Groovy"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;java&#x27;</span> <span class="comment">// adds &#x27;test&#x27; task</span></span><br><span class="line"></span><br><span class="line">test &#123;</span><br><span class="line">  <span class="comment">// enable TestNG support (default is JUnit)</span></span><br><span class="line">  useTestNG()</span><br><span class="line">  <span class="comment">// enable JUnit Platform (a.k.a. JUnit 5) support</span></span><br><span class="line">  useJUnitPlatform()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set a system property for the test JVM(s)</span></span><br><span class="line">  systemProperty <span class="string">&#x27;some.prop&#x27;</span>, <span class="string">&#x27;value&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// explicitly include or exclude tests</span></span><br><span class="line">  include <span class="string">&#x27;org/foo/**&#x27;</span></span><br><span class="line">  exclude <span class="string">&#x27;org/boo/**&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// show standard out and standard error of the test JVM(s) on the console</span></span><br><span class="line">  testLogging.showStandardStreams = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// set heap size for the test JVM(s)</span></span><br><span class="line">  minHeapSize = <span class="string">&quot;128m&quot;</span></span><br><span class="line">  maxHeapSize = <span class="string">&quot;512m&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// set JVM arguments for the test JVM(s)</span></span><br><span class="line">  jvmArgs <span class="string">&#x27;-XX:MaxPermSize=256m&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// listen to events in the test execution lifecycle</span></span><br><span class="line">  beforeTest &#123; descriptor -&gt;</span><br><span class="line">     logger.lifecycle(<span class="string">&quot;Running test: &quot;</span> + descriptor)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Fail the &#x27;test&#x27; task on the first test failure</span></span><br><span class="line">  failFast = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// listen to standard out and standard error of the test JVM(s)</span></span><br><span class="line">  onOutput &#123; descriptor, event -&gt;</span><br><span class="line">     logger.lifecycle(<span class="string">&quot;Test: &quot;</span> + descriptor + <span class="string">&quot; produced standard out/err: &quot;</span> + event.message )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>一般测试的最终结果，会显示在 <strong>project</strong> 的 <strong>build/reports</strong> 目录里面</p><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p>假如我们开发完一个功能模块，打包成一个 jar 包，需要提供给他人依赖引用，那么我们就可以发布出去了，一般 gradle 没有自己的仓库，如果是java 项目的话一般都是发布到 <strong>maven</strong> 仓库，因为 <strong>lvh</strong> 现在用的人比较少了，这里就简单的介绍一下怎么发布到 maven 仓库</p><h4 id="Maven-Publish-Pluging"><a href="#Maven-Publish-Pluging" class="headerlink" title="Maven Publish Pluging"></a>Maven Publish Pluging</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Groovy"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;maven-publish&#x27;</span></span><br><span class="line"></span><br><span class="line">publishing &#123;</span><br><span class="line">    </span><br><span class="line">    publications &#123;</span><br><span class="line">        maven(MavenPublication) &#123;</span><br><span class="line">            groupId = <span class="string">&#x27;org.gradle.sample&#x27;</span></span><br><span class="line">            artifactId = <span class="string">&#x27;project1-sample&#x27;</span></span><br><span class="line">            version = <span class="string">&#x27;1.1&#x27;</span></span><br><span class="line"></span><br><span class="line">            from components.java</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven &#123;</span><br><span class="line">            name = <span class="string">&#x27;myRepo&#x27;</span></span><br><span class="line">            <span class="keyword">def</span> releasesRepoUrl = <span class="string">&quot;$buildDir/repos/releases&quot;</span></span><br><span class="line">            <span class="keyword">def</span> snapshotsRepoUrl = <span class="string">&quot;$buildDir/repos/snapshots&quot;</span></span><br><span class="line">            url = version.endsWith(<span class="string">&#x27;SNAPSHOT&#x27;</span>) ? snapshotsRepoUrl : releasesRepoUrl</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://docs.gradle.org/current/userguide/userguide.html"><strong>官方用户手册</strong></a></p><p><a href="https://www.imooc.com/learn/833"><strong>慕课网新一代构建工具gradle</strong></a></p><p><a href="https://github.com/jianchengwang/todo-java"><strong>TODO 代码</strong></a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="2020/12/26/git/"/>
      <url>2020/12/26/git/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[<strong>Git</strong>][<a href="https://en.wikipedia.org/wiki/Git]">https://en.wikipedia.org/wiki/Git]</a> 是一个分布式的管理系统，作者 <a href="https://en.wikipedia.org/wiki/Linus_Torvalds">Linus Torvalds</a>  2005 创建它，主要是维护linux内核，现在很多人用它作为大型项目的版本控制软件，来管理源代码，或是一些纯文本的笔记或者文档。本篇文字，很多的文本描述，或者图片资源来自互联网，我只是互联网的搬运工，本文仅作为个人学习的一个记录跟总结。我将在最下方列出部分链接，感兴趣的朋友可以去看看。</p><a id="more"></a><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>Git 有如下几个特点：</p><p>1.<strong>直接记录快照，而非差异比较</strong></p><p>2.<strong>近乎所有操作都是本地执行</strong>，所以速度很快</p><p>3.时刻保持<strong>数据的完整性</strong>，在保存到 Git 之前，所有数据都要进行内容的校验和（checksum）计算，并将此结果作为数据的唯一标识和索引。换句话说，不可能在你修改了文件或目录之后，Git 一无所知。这项特性作为 Git 的设计哲学，建在整体架构的最底层。所以如果文件在传输时变得不完整，或者磁盘损坏导致文件数据缺失，Git 都能立即察觉。</p><p>Git 使用 <strong>SHA-1</strong> 算法计算数据的校验和，通过对文件的内容或目录的结构计算出一个 SHA-1 哈希值，作为指纹字符串。该字串由 40 个十六进制字符（0-9 及 a-f）组成，看起来就像是：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24b9da6552252987aa493b52f8696cd6d3b00373</span><br></pre></td></tr></table></figure></div><p>Git 的工作完全依赖于这类指纹字串，所以你会经常看到这样的哈希值。实际上，所有保存在 Git 数据库中的东西都是用此哈希值来作索引的，而不是靠文件名。</p><p>4.<strong>多数操作仅添加数据</strong>，不用担心数据丢失</p><p>5.<strong>文件的三种状态</strong>，对于任何一个文件，在 Git 内都只有三种状态：已提交（<strong>committed</strong>），已修改（<strong>modified</strong>）和已暂存（<strong>staged</strong>）。已提交表示该文件已经被安全地保存在本地数据库中了；已修改表示修改了某个文件，但还没有提交保存；已暂存表示把已修改的文件放在下次提交时要保存的清单中。</p><p>由此我们看到 Git 管理项目时，文件流转的三个工作区域：Git 的工作目录，暂存区域，以及本地仓库。</p><p><img src="https://git-scm.com/figures/18333fig0106-tn.png" alt="工作目录，暂存区域，以及本地仓库"></p><p>每个项目都有一个 Git 目录（如果 <code>git clone</code> 出来的话，就是其中 <code>.git</code> 的目录；如果 <code>git clone --bare</code> 的话，新建的目录本身就是 Git 目录。），它是 Git 用来保存元数据和对象数据库的地方。该目录非常重要，每次克隆镜像仓库的时候，实际拷贝的就是这个目录里面的数据。</p><p>从项目中取出某个版本的所有文件和目录，用以开始后续工作的叫做工作目录。这些文件实际上都是从 Git 目录中的压缩对象数据库中提取出来的，接下来就可以在工作目录中对这些文件进行编辑。</p><p>所谓的暂存区域只不过是个简单的文件，一般都放在 Git 目录中。有时候人们会把这个文件叫做索引文件，不过标准说法还是叫暂存区域。</p><h4 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h4><p>基本的 Git 工作流程如下：</p><ol><li>在工作目录中修改某些文件。</li><li>对修改后的文件进行快照，然后保存到暂存区域。</li><li>提交更新，将保存在暂存区域的文件快照永久转储到 Git 目录中。</li></ol><p>所以，我们可以从文件所处的位置来判断状态：如果是 Git 目录中保存着的特定版本文件，就属于已提交状态；如果作了修改并已放入暂存区域，就属于已暂存状态；如果自上次取出后，作了修改但还没有放到暂存区域，就是已修改状态。</p><h4 id="技术说明"><a href="#技术说明" class="headerlink" title="技术说明"></a>技术说明</h4><p>文件内容并没有真正存储在索引(<em>.git/index</em>)或者提交对象中，而是以blob的形式分别存储在数据库中(<em>.git/objects</em>)，并用SHA-1值来校验。 索引文件用识别码列出相关的blob文件以及别的数据。对于提交来说，以树(<em>tree</em>)的形式存储，同样用对于的哈希值识别。树对应着工作目录中的文件夹，树中包含的 树或者blob对象对应着相应的子目录和文件。每次提交都存储下它的上一级树的识别码。</p><p>如果用detached HEAD提交，那么最后一次提交会被the reflog for HEAD引用。但是过一段时间就失效，最终被回收，与<code>git commit --amend</code>或者<code>git rebase</code>很像。</p><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><p>Git 命令是一些命令行工具的集合，它可以用来跟踪，记录文件的变动。比如你可以进行保存，比对，分析，合并等等，这个过程被称之为版本控制。</p><h4 id="git-config"><a href="#git-config" class="headerlink" title="git config"></a>git config</h4><p>git的基本配置，配置文件在用户目录下的**.gitconfig**</p><p><strong>user</strong> 设置当前系统的git用户的名称跟邮件</p><p><strong>alias</strong> 设置一些别名，简化命令，提高效率，当然本文档为了介绍git的命令的使用，在下文的shell中都没有使用别名。</p><p><strong>http</strong> 跟 <strong>https</strong> 设置shadowsocks的http代理，避免有的仓库被GWF墙，拉取不了。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;jianchengwang&quot;</span><br><span class="line">git config --global user.email &quot;jiancheng_wang@yahoo.com&quot;</span><br><span class="line"></span><br><span class="line">git config --global https.proxy socks5://127.0.0.1:1080</span><br><span class="line">git config --global https.proxy socks5://127.0.0.1:1080</span><br><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br><span class="line"></span><br><span class="line">vim ~/.gitconfig</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#</span></span></span><br><span class="line">[user]</span><br><span class="line">name = jianchengwang</span><br><span class="line">email = jiancheng_wang@yahoo.com</span><br><span class="line"></span><br><span class="line">[alias]</span><br><span class="line">co = checkout</span><br><span class="line">br = branch</span><br><span class="line">ci = commit</span><br><span class="line">st = status</span><br><span class="line">unstage = reset HEAD --</span><br><span class="line">dog = log --all --decorate --oneline --graph</span><br><span class="line"></span><br><span class="line">[http]</span><br><span class="line">proxy = socks5://127.0.0.1:1080</span><br><span class="line"></span><br><span class="line">[https]</span><br><span class="line">proxt = socks5://127.0.0.1:1080</span><br></pre></td></tr></table></figure></div><h4 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h4><p>Initialized empty Git repository， 在目录下为出现一个**.git**目录文件夹，是为你的项目存储所有历史和元信息的目录 - 包括所有的对象(commits,trees,blobs,tags)，这些对象指向不同的分支。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir git-tutorial</span><br><span class="line">cd git-tutorial</span><br><span class="line">git init</span><br></pre></td></tr></table></figure></div><h4 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h4><p>可以看到当前目录的git状态，比如所处分支，提交记录，未追踪的文件等，还有一个很好的命令提示作用，提示你可以使用哪些命令进行操作。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#</span></span></span><br><span class="line">n branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line"></span><br><span class="line">README.md</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use &quot;git add&quot; to track)</span><br></pre></td></tr></table></figure></div><h4 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h4><p>未追踪的文件，我们通过这个命令告诉git将这个文件进行版本控制，添加到暂存区 <strong>staged</strong>，暂存区的记录在**.git/index**</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">git add README.md</span><br><span class="line"></span><br><span class="line">git status</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#</span></span></span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">new file:   README.md</span><br><span class="line"></span><br><span class="line">git rm --cached README.md</span><br><span class="line"></span><br><span class="line">git add -A</span><br></pre></td></tr></table></figure></div><h4 id="git-mv"><a href="#git-mv" class="headerlink" title="git mv"></a>git mv</h4><p>移动或者重命名文件，目录，或符号链接，类比<code>linux mv</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git mv a.txt dir</span><br></pre></td></tr></table></figure></div><p>如果是<code>window，mac</code>系统对大小写不敏感，一般<code>git config ignorecase true</code>，这时候也可以用<code>git mv</code>修正文件大小写问题，</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git mv -f a.js A.js</span><br></pre></td></tr></table></figure></div><h4 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h4><p>通过以下命令将暂存区的内容提交到本地仓库，会生成一个版本快照。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;add README.md&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#</span></span></span><br><span class="line">[master (root-commit) 65f838e] add README.md</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 README.md</span><br></pre></td></tr></table></figure></div><h4 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h4><p>如果我们需要跟别人进行协作开发，就要把本地的代码推送到远程的服务器的仓库上，比如这里我在github上创建一个远程仓库，然后将本地仓库添加一个远程仓库地址，名字命名为<strong>origin</strong> 一般，这个名字是约定俗称的，不建议去修改，但是假如你有多个远程仓库，可以自定义命名。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 添加远程仓库</span></span></span><br><span class="line">git remote add origin https://github.com/jianchengwang/git-tutorial.git</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 查看远程仓库</span></span></span><br><span class="line">git remote -v</span><br><span class="line">originhttps://github.com/jianchengwang/git-tutorial.git (fetch)</span><br><span class="line">originhttps://github.com/jianchengwang/git-tutorial.git (push)</span><br><span class="line"></span><br><span class="line">git remote -help</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h4 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h4><p>我们可以将本地仓库当前分支的代码推送到远程仓库的分支上，**-u** 表示set upstream for git pull/status 即设置当前远程分支为默认上游仓库，下次直接使用git push即可</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 格式</span></span><br><span class="line">git push &lt;远程仓库名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 省略远程分支名，则表示将本地分支推送与之存在”追踪关系”的远程分支(通常两者同名)，如果该远程分支不存在，则会被新建</span></span><br><span class="line">git push -u origin master</span><br><span class="line">git push origin master:master</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。</span></span><br><span class="line">git push origin :master</span><br><span class="line">git push origin --delete master</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。</span></span><br><span class="line">git push origin</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果当前分支只有一个追踪分支，那么主机名都可以省略。</span></span><br><span class="line">git push</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 推送本地所有分支到远程仓库</span></span><br><span class="line">git push --all origin</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果远程主机的版本比本地版本更新，推送时Git会报错，要求先在本地做git pull合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用–force选项。使用–force选项，结果导致在远程主机产生一个”非直进式”的合并(non-fast-forward merge)。除非你很确定要这样做，否则应该尽量避免使用–force选项。</span></span><br><span class="line">git push --force origin</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> git push不会推送标签(tag)，除非使用–tags选项。</span></span><br><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure></div><h4 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h4><p>克隆远程仓库到本地文件夹git-demo，然后进行一些简单的修改，然后推送到远程仓库，现在我们有两个本地仓库了，其中git-demo的代码已经发生改变，并且推送到远程仓库，远程仓库的代码也发生改变，但是之前的本地的git-tutorial代码还是旧的，这时候我们切换到之前的git-tutorial文件目录，拉取远程仓库的代码。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/jianchengwang/git-tutorial.git git-demo</span><br><span class="line">cd git-demo</span><br><span class="line">echo &quot;hello git&quot; &gt; README.md</span><br><span class="line">git add README.md </span><br><span class="line">git commit -m &#x27;modify README.md&#x27;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure></div><h4 id="git-fetch-pull"><a href="#git-fetch-pull" class="headerlink" title="git fetch | pull"></a>git fetch | pull</h4><p>取回远程主机某个分支的更新，再与本地的指定分支合并</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">git pull &lt;远程仓库&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br><span class="line"></span><br><span class="line">git pull origin master:master</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果远程分支与当前分支进行合并，则冒号后面的本地分支可以省略</span></span><br><span class="line">git pull origin master</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 等同于</span></span><br><span class="line">git fetch origin</span><br><span class="line">git merge origin/master</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果当前分支与远程分支存在追踪关系</span></span><br><span class="line">git branch --set-upstream master origin/master</span><br><span class="line">git pull origin</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果当前分支只有一个追踪分支</span></span><br><span class="line">git pull</span><br></pre></td></tr></table></figure></div><h4 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h4><p>在实现一些新功能或者修复 BUG 的时候，我们希望所有的修改环境都是独立的，Git 给我们提供了分支，它可以保证稳定版本的代码不会被破坏、不同的功能可以由不同开发者同时开发、开发者可以专注于自己的分支，不用担心被其他人破坏了环境。</p><p><strong>HEAD</strong> -&gt; 当前分支的最后一次更新，通常默认是指向master的最后一次提交。我们可以移动这个指针或者叫坐标，就可以变更使用的分支。</p><p>提交时使用<del>(tilde)和^(caret)就可以指定某个提交的相对位置。最常用的就是相对于HEAD的位置。HEAD后面加上</del>(tilde）可以指定HEAD之前的提交记录。合并分支会有多个根节点，您可以用^(caret) 来指定使用哪个为根节点。</p><p><img src="https://backlog.com/git-tutorial/cn/img/post/stepup/capture_stepup1_3_2.png" alt="用tilde和caret指定提交的相对位置"></p><p><strong>STASH</strong> -&gt; 还未提交的修改内容以及新添加的文件，留在索引区域或工作树的情况下切换到其他的分支时，修改内容会从原来的分支移动到目标分支。</p><p>但是如果在checkout的目标分支中相同的文件也有修改，checkout会失败的。这时要么先提交修改内容，要么用stash暂时保存修改内容后再checkout。</p><p>stash是临时保存文件修改内容的区域。stash可以暂时保存工作树和索引里还没提交的修改内容，您可以事后再取出暂存的修改，应用到原先的分支或其他的分支上。</p><p><img src="https://backlog.com/git-tutorial/cn/img/post/stepup/capture_stepup1_3_3.png" alt="stash"></p><p>我们在所在分支创建一个分支的时候，新建的分支会拥有当前分支的一份拷贝。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建分支</span></span><br><span class="line">git branch feature1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换分支</span></span><br><span class="line">git checkout feature1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建并切换</span></span><br><span class="line">git checkout -b feature2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> checkout 后面跟文件名，会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到暂存区的改动以及新文件都不会受到影响。</span></span><br><span class="line">git checkout -- &lt;filename&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看当前分支，q键退出</span></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看远程分支</span></span><br><span class="line">git branch -r</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除分支，如果当前分支处于feature2则不允许删除</span></span><br><span class="line">git branch -d feature2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果我们分支有进行版本的改变，跟master分支不一致，那么我么将分支的内容merge到master分支上，或是直接使用-D 进行强制删除</span></span><br><span class="line">git branch -D feature2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 推送分支到远程仓库并创建一个跟本地分支同名的分支</span></span><br><span class="line">git push origin feature1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 推送分支到远程仓库并创建一个名为f1的分支</span></span><br><span class="line">git push origin feature1:f1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除远程仓库的分支</span></span><br><span class="line">git push origin :feature1</span><br></pre></td></tr></table></figure></div><h4 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a>git tag</h4><p>为软件发布创建标签是推荐的。这个概念早已存在，在 SVN 中也有。你可以执行如下命令创建一个叫做 <em>1.0.0</em> 的标签</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag 1.0.0 1b2e1d63ff</span><br></pre></td></tr></table></figure></div><h4 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h4><p>通过日志，我们可以很方便的查看并且追溯各个版本快照，并且stackoverflow有人展示了很多漂亮的日志格式，我们可以借鉴下</p><p><a href="https://stackoverflow.com/questions/1057564/pretty-git-branch-graphs">https://stackoverflow.com/questions/1057564/pretty-git-branch-graphs</a></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 只看某人的提交日志</span></span><br><span class="line">git log --author=bob</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 一行显示</span></span><br><span class="line">git log --online</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示前10条</span></span><br><span class="line">git log --oneline -10</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某一次日志详情</span></span><br><span class="line">git show a2f5b8c</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 因为命令很长，所以我们可以在.gitconfig里设置别名</span></span><br><span class="line">git log --all --decorate --oneline --graph</span><br><span class="line">git dog</span><br></pre></td></tr></table></figure></div><h4 id="git-merge-rebase"><a href="#git-merge-rebase" class="headerlink" title="git merge | rebase"></a>git merge | rebase</h4><p>在做一些新特性或者修复 bug 的时候，我们通常会建立一个新的分支，而完成后我们需要做一个合并分支的操作。</p><p>合并分支默认使用fast-forward(<strong>–ff</strong>)模式，这种模式不会产生一个新的commit提交，如果你要使用**–no-ff**，如果是与他人协作开发，建议采用这种模式，因为它会原有的开发分支整个提交链的完整性。</p><p>使用<strong>rebase</strong> 会重写项目历史，能让我们的项目提交日志保持一条竖线，但是这破坏协作的工作流，所以有一条黄金法则，<strong>绝对不要在公共分支上使用rebase</strong></p><p><strong>merge</strong> 是合并操作，它会将两个分支的操作合并在一起，它关注点在真实的提交历史记录上</p><p><strong>rebase</strong> 没有合并操作，它只是将当前分支的修改复制到目标分支的最后一次提交上面，它的关注点在开发的过程上面</p><p>如果两个分支同时对一个文件进行修改，并且commit，那么合并的时候会产生<strong>conflict</strong> ，我们要解决冲突后才能进行合并操作。解决冲突一般会使用一些可视化的工具进行解决，命令行的话即使是使用vimdiff感觉也比较麻烦。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> merge</span></span><br><span class="line">git checkout master</span><br><span class="line">git merge feature1 </span><br><span class="line">git merge feature1 --no-ff</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将分支issue1的所有提交合并成一个提交并导入到master分支</span></span><br><span class="line">git merge --squash issue1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> rebase</span></span><br><span class="line">git rebase feature1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> conflict</span></span><br></pre></td></tr></table></figure></div><h4 id="git-cherry-pick"><a href="#git-cherry-pick" class="headerlink" title="git cherry-pick"></a>git cherry-pick</h4><p><strong>git cherry-pick</strong> 可以选择某一个分支中的一个或几个commit(s)来进行操作。例如，假设我们有个稳定版本的分支，叫v2.0，另外还有个开发版本的分支v3.0，我们不能直接把两个分支合并，这样会导致稳定版本混乱，但是又想增加一个v3.0中的功能到v2.0中，这里就可以使用cherry-pick了,其实也就是对已经存在的commit 进行再次提交.</p><p>命令集合:</p><ul><li>git cherry-pick <commit id>:单独合并一个提交</li><li>git cherry-pick  -x <commit id>：同上，不同点：保留原提交者信息。<br> <strong>Git从1.7.2版本开始支持批量cherry-pick，就是一次可以cherry-pick一个区间的commit。</strong> </li><li>git cherry-pick <start-commit-id>..<end-commit-id></li><li>git cherry-pick <start-commit-id>^..<end-commit-id></li></ul><p>前者表示把<start-commit-id>到<end-commit-id>之间(左开右闭，不包含start-commit-id)的提交cherry-pick到当前分支；<br> 后者有”^”标志的表示把<start-commit-id>到<end-commit-id>之间(闭区间，包含start-commit-id)的提交cherry-pick到当前分支。<br> 其中，<start-commit-id>到<end-commit-id>只需要commit-id的前6位即可，并且<start-commit-id>在时间上必须早于<end-commit-id><br> 注：以上合并，需要手动push代码。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 从其他分支复制指定的提交，然后导入到现在的分支</span></span><br><span class="line">git cherry-pick 99daed2</span><br><span class="line"></span><br><span class="line">git cherry-pick &lt;commit id&gt;</span><br><span class="line">git cherry-pick --continue</span><br><span class="line">git cherry-pick --quit</span><br><span class="line">git cherry-pick --abo</span><br></pre></td></tr></table></figure></div><h4 id="git-reset-revert"><a href="#git-reset-revert" class="headerlink" title="git reset | revert"></a>git reset | revert</h4><p>时光不能倒流，但是 Git 可以做时光机让你的提交记录回到过去。git revert 撤销某次操作，此次操作之前和之后的 commit 和 history 都会保留，并且把这次撤销作为一次最新的提交。git revert是提交一个新的版本，将需要revert的版本的内容再反向修改回去，版本会递增，不影响之前提交的内容。相比 git reset，它不会改变现在的提交历史。因此，git revert 可以用在公共分支上，git reset 应该用在私有分支上。</p><p>在reset可以遗弃不再使用的提交。执行遗弃时，需要根据影响的范围而指定不同的模式，可以指定是否复原索引或工作树的内容。</p><p><img src="https://backlog.com/git-tutorial/cn/img/post/stepup/capture_stepup6_3_1.png" alt="遗弃提交"></p><p>除了默认的mixed模式，还有soft和hard模式。欲了解受各模式影响的部分，请参照下面的表格。</p><table><thead><tr><th>模式名称</th><th>HEAD的位置</th><th>索引</th><th>工作树</th></tr></thead><tbody><tr><td>soft</td><td>修改</td><td>不修改</td><td>不修改</td></tr><tr><td>mixed</td><td>修改</td><td>修改</td><td>不修改</td></tr><tr><td>hard</td><td>修改</td><td>修改</td><td>修改</td></tr></tbody></table><p><strong>主要使用的场合：</strong></p><ul><li>复原修改过的索引的状态(mixed)</li><li>彻底取消最近的提交(hard)</li><li>只取消提交(soft)</li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 回退到之前一次提交</span></span><br><span class="line">git reset master^</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 回退到之前5次提交</span></span><br><span class="line">git reset master~5</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 回到之前某次提交</span></span><br><span class="line">git reset --hard HEAD~</span><br><span class="line">gti reset --hard 99daed2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在reset之前的提交可以参照ORIG_HEAD。Reset错误的时候，在ORIG_HEAD上reset 就可以还原到reset前的状态。</span></span><br><span class="line">git reset --hard ORIG_HEAD</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 会产生一次新的commit提交</span></span><br><span class="line">git revert --hard HEAD~</span><br></pre></td></tr></table></figure></div><h4 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h4><p>git stash 可用来暂存当前正在进行的工作， 比如想pull 最新代码， 又不想加新commit， 或者另外一种情况，为了fix 一个紧急的bug, 先stash, 使返回到自己上一个commit, 改完bug之后再stash pop, 继续原来的工作。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git statsh</span><br><span class="line">do some work</span><br><span class="line">git statsh pop</span><br><span class="line"></span><br><span class="line">git stash          # save uncommitted changes</span><br><span class="line"><span class="meta">#</span><span class="bash"> pull, edit, etc.</span></span><br><span class="line">git stash list     # list stashed changes in this git</span><br><span class="line">git show stash@&#123;0&#125; # see the last stash </span><br><span class="line">git stash pop      # apply last stash and remove it from the list</span><br><span class="line">git stash --help   # for more info</span><br></pre></td></tr></table></figure></div><h4 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h4><p>记录为.gitignore的文件是Git的非管理对象，但是需要提交.gitignore本身。</p><p>可以到 <a href="www.gitignore.com">Gitignore网站</a>上找忽略模板。</p><h4 id="fock-pull-request"><a href="#fock-pull-request" class="headerlink" title="fock | pull request"></a>fock | pull request</h4><p>我们经常fock其他上游仓库，来pull request做贡献等，首先是保证本地仓库跟上游仓库的同步。关于pr相关操作，可以看相关链接的工作流，这里不多做介绍。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 添加上游仓库</span></span></span><br><span class="line">git remote add upstream https://github.com/jianchengwang/git-tutorial.git</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 查看远程仓库列表</span></span></span><br><span class="line">git remote -v</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 拉取上游仓库dev分支，如果没有分支名，默认拉取master分支的代码</span></span></span><br><span class="line">git fetch upstrem dev</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 合并分支</span></span></span><br><span class="line">git checkout </span><br><span class="line">git rebase upstream/dev</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 提交到我们自己的远程仓库</span></span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure></div><h3 id="SSH-免密登录"><a href="#SSH-免密登录" class="headerlink" title="SSH 免密登录"></a>SSH 免密登录</h3><p>我们会发现每次进行git push的时候都要输入密码，这样比较麻烦，所以我们可以通过<a href="https://en.wikipedia.org/wiki/Secure_Shell">ssh</a>进行免密登录。</p><p>这里只列出了linux的简单命令，其他系统或是更详细的帮助信息请自行查看github的 <a href="https://help.github.com/en/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">相关帮助文档</a></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 创建 ssh key</span></span></span><br><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;jianchengwang@yahoo.com&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 添加 ssh key -&gt; ssh-agent</span></span></span><br><span class="line">eval &quot;$(ssh-agent -s)&quot;</span><br><span class="line">ssh-add ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># add ssh public key to your github account</span></span></span><br><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></div><h3 id="Hub"><a href="#Hub" class="headerlink" title="Hub"></a>Hub</h3><p><a href="https://hub.github.com/">hub</a> is <em>an extension to command-line git</em> that helps you do everyday GitHub tasks without ever leaving the terminal</p><p>我一般比较常用<code>hub create</code>命令，你也可以设置别名 <code>git -&gt; hub</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> indicate that you prefer HTTPS to SSH git <span class="built_in">clone</span> URLs</span></span><br><span class="line">git config --global hub.protocol https</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> create a repo to host a new project on GitHub</span></span><br><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;And so, it begins.&quot;</span><br><span class="line">hub create</span><br><span class="line">→ (creates a new GitHub repository with the name of the current directory)</span><br><span class="line">git push -u origin HEAD</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">clone</span> your own project</span></span><br><span class="line">hub clone dotfiles</span><br><span class="line">→ git clone git://github.com/YOUR_USER/dotfiles.git</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">clone</span> another project</span></span><br><span class="line">hub clone github/hub</span><br><span class="line">→ git clone git://github.com/github/hub.git</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> fast-forward all <span class="built_in">local</span> branches to match the latest state on the remote</span></span><br><span class="line">cd myproject</span><br><span class="line">hub sync</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> share <span class="built_in">log</span> output via Gist</span></span><br><span class="line">hub gist create --copy build.log</span><br><span class="line">→ (the URL of the new private gist copied to clipboard)</span><br></pre></td></tr></table></figure></div><h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><p><a href="https://git-scm.com/docs/">官方文档</a></p><p><a href="https://www.youtube.com/watch?v=lUQl6gZ5Yy0">互联网人都该懂点git</a></p><p><a href="https://backlog.com/git-tutorial/cn/">猴子都能懂的git入门</a></p><p><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">廖雪峰git教程</a></p><p><a href="https://git.io/fpYgR">git工作流</a></p><p><a href="http://gitbook.liuhui998.com/">Git Community Book 中文版</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> soft </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>F-link</title>
      <link href="2020/12/26/flink/"/>
      <url>2020/12/26/flink/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>Apache Flink</strong> 是一个在无界和有界数据流上进行状态计算的框架和分布式处理引擎.Flink 已经可以在所有常见的集群环境中运行,并以 in-memory 的速度和任意的规模进行计算.</p><p>可以类比 <strong>spring batch</strong> 或者<strong>spark</strong>进行学习,基本流程就是<strong>source-&gt;computer/transformation-&gt;sink</strong></p><p>本文章的大部分文字都来源于互联网,最底下会附上链接.</p><a id="more"></a><h3 id="QuickStart"><a href="#QuickStart" class="headerlink" title="QuickStart"></a>QuickStart</h3><h4 id="搭建执行环境"><a href="#搭建执行环境" class="headerlink" title="搭建执行环境"></a>搭建执行环境</h4><p>这边通过 <strong>docker-compose</strong> 构建,当然也可以直接下载编译好的二进制版本了,<a href="https://flink.apache.org/downloads.html">download</a></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Yaml"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">jobmanager:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">flink</span></span><br><span class="line">    <span class="attr">expose:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6123&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8081:8081&quot;</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">jobmanager</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">JOB_MANAGER_RPC_ADDRESS=jobmanager</span></span><br><span class="line">  <span class="attr">taskmanager:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">flink</span></span><br><span class="line">    <span class="attr">expose:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6121&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6122&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">jobmanager</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">taskmanager</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;jobmanager:jobmanager&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">JOB_MANAGER_RPC_ADDRESS=jobmanager</span></span><br></pre></td></tr></table></figure></div><h4 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h4><p>这里根据创建一个<code>WordCount</code>应用</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Groovy"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter() <span class="comment">// this applies only to the Gradle &#x27;Shadow&#x27; plugin</span></span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">&#x27;com.github.jengelman.gradle.plugins:shadow:2.0.4&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;java&#x27;</span></span><br><span class="line">    id <span class="string">&#x27;application&#x27;</span></span><br><span class="line">    <span class="comment">// shadow plugin to produce fat JARs</span></span><br><span class="line">    id <span class="string">&#x27;com.github.johnrengelman.shadow&#x27;</span> version <span class="string">&#x27;2.0.4&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">configurations &#123;</span><br><span class="line">    flinkShadowJar <span class="comment">// dependencies which go into the shadowJar</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// always exclude these (also from transitive dependencies) since they are provided by Flink</span></span><br><span class="line">    flinkShadowJar.exclude <span class="attr">group:</span> <span class="string">&#x27;org.apache.flink&#x27;</span>, <span class="attr">module:</span> <span class="string">&#x27;force-shading&#x27;</span></span><br><span class="line">    flinkShadowJar.exclude <span class="attr">group:</span> <span class="string">&#x27;com.google.code.findbugs&#x27;</span>, <span class="attr">module:</span> <span class="string">&#x27;jsr305&#x27;</span></span><br><span class="line">    flinkShadowJar.exclude <span class="attr">group:</span> <span class="string">&#x27;org.slf4j&#x27;</span></span><br><span class="line">    flinkShadowJar.exclude <span class="attr">group:</span> <span class="string">&#x27;org.apache.logging.log4j&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ext &#123;</span><br><span class="line">    javaVersion = <span class="string">&#x27;1.8&#x27;</span></span><br><span class="line">    flinkVersion = <span class="string">&#x27;1.11.2&#x27;</span></span><br><span class="line">    scalaBinaryVersion = <span class="string">&#x27;2.12&#x27;</span></span><br><span class="line">    slf4jVersion = <span class="string">&#x27;1.7.15&#x27;</span></span><br><span class="line">    log4jVersion = <span class="string">&#x27;2.12.1&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="string">&quot;org.apache.flink:flink-streaming-java_$&#123;scalaBinaryVersion&#125;:$&#123;flinkVersion&#125;&quot;</span></span><br><span class="line">    compile <span class="string">&quot;org.apache.flink:flink-clients_$&#123;scalaBinaryVersion&#125;:$&#123;flinkVersion&#125;&quot;</span></span><br><span class="line">    compile <span class="string">&quot;org.apache.flink:flink-connector-kafka_$&#123;scalaBinaryVersion&#125;:$&#123;fflinkVersion&#125;&quot;</span></span><br><span class="line">    compile <span class="string">&#x27;org.slf4j:slf4j-simple:1.7.21&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// make compileOnly dependencies available for tests:</span></span><br><span class="line">sourceSets &#123;</span><br><span class="line">    main.compileClasspath += configurations.flinkShadowJar</span><br><span class="line">    main.runtimeClasspath += configurations.flinkShadowJar</span><br><span class="line"></span><br><span class="line">    test.compileClasspath += configurations.flinkShadowJar</span><br><span class="line">    test.runtimeClasspath += configurations.flinkShadowJar</span><br><span class="line"></span><br><span class="line">    javadoc.classpath += configurations.flinkShadowJar</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run.classpath = sourceSets.main.runtimeClasspath</span><br><span class="line"></span><br><span class="line">jar &#123;</span><br><span class="line">    manifest &#123;</span><br><span class="line">        attributes <span class="string">&#x27;Built-By&#x27;</span>: System.getProperty(<span class="string">&#x27;user.name&#x27;</span>),</span><br><span class="line">                <span class="string">&#x27;Build-Jdk&#x27;</span>: System.getProperty(<span class="string">&#x27;java.version&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">shadowJar &#123;</span><br><span class="line">    configurations = [project.configurations.flinkShadowJar]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCount</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取本地执行环境</span></span><br><span class="line">        <span class="keyword">final</span> StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        <span class="comment">// 设置并行数量</span></span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 获取数据流</span></span><br><span class="line">        DataStream&lt;String&gt; stream = env.socketTextStream(<span class="string">&quot;localhost&quot;</span>, <span class="number">9999</span>);</span><br><span class="line">        <span class="comment">// 转换算子处理数据流并输出结果</span></span><br><span class="line">        stream.flatMap(<span class="keyword">new</span> Tokenizer()).keyBy(r -&gt; r.f0).sum(<span class="number">1</span>).print();</span><br><span class="line">        <span class="comment">// 执行</span></span><br><span class="line">        env.execute(<span class="string">&quot;Flink Streaming Java API Skeleton&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Tokenizer</span> <span class="keyword">implements</span> <span class="title">FlatMapFunction</span>&lt;<span class="title">String</span>, <span class="title">Tuple2</span>&lt;<span class="title">String</span>, <span class="title">Integer</span>&gt;&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatMap</span><span class="params">(String value, Collector&lt;Tuple2&lt;String, Integer&gt;&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            String[] stringList = value.split(<span class="string">&quot;\\s&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (String s : stringList) &#123;</span><br><span class="line">                <span class="comment">// 使用out.collect方法向下游发送数据</span></span><br><span class="line">                out.collect(<span class="keyword">new</span> Tuple2(s, <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>如果是在<strong>IDEA</strong>本地运行的话,记得引入依赖<code>flink-clients</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lk 9999</span><br></pre></td></tr></table></figure></div><p>如果，已经搭建好了 <strong>Flink WebUI</strong> 运行环境,上传提交编译好的jar包 <strong>JobGraph</strong> 即可,或者通过命令行运行</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flink run -c todo.lib.flink.WordCount WordCount.jar</span><br></pre></td></tr></table></figure></div><h3 id="DataStream-API"><a href="#DataStream-API" class="headerlink" title="DataStream API"></a>DataStream API</h3><h4 id="DataSource"><a href="#DataSource" class="headerlink" title="DataSource"></a>DataSource</h4><h5 id="内置数据源"><a href="#内置数据源" class="headerlink" title="内置数据源"></a>内置数据源</h5><h6 id="Elements"><a href="#Elements" class="headerlink" title="Elements"></a>Elements</h6><p>从数组或者集合，一般本地调试使用</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String[] elementInput = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;hello Flink&quot;</span>, <span class="string">&quot;Second Line&quot;</span>&#125;;</span><br><span class="line">DataStream&lt;String&gt; stream = env.fromElements(elementInput);</span><br></pre></td></tr></table></figure></div><h6 id="File"><a href="#File" class="headerlink" title="File"></a>File</h6><p>可以使用 <code>readTextFile</code> 方法直接读取文本文件, 这种方式可以用来监控一下 <strong>log</strong> 日志文件, 也可以使用 <code>readFile</code> 方法通过指定 <code>InputFormat</code> 来读取特定数据类型的文件, <code>InputFormat</code>可以是内置类,如 <code>CsvInputFormat</code> 或者用户自定义 <code>InputFormat</code> 接口类.</p><p>在 <code>readFile()</code> 方法中有一项参数为 <code>WatchType</code>, 共有两种模式 (<code>PROCESS_CONTINUOUSLY </code>/ <code>PROCESS_ONCE</code>). 在 <code>PROCESS_CONTINUOUSLY</code> 模式下, 检测到文件变动就会将文件全部内容加载在 <strong>flink</strong>, 在 <code>PROCESS_ONCE</code> 模式下, 只会将文件变动的那部分加载到 <strong>flink</strong>.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加文件源</span></span><br><span class="line"><span class="comment">// 直接读取文本文件</span></span><br><span class="line">DataStream&lt;String&gt; stream = env.readTextFile(logPath);</span><br><span class="line"><span class="comment">// 读取csv</span></span><br><span class="line">CsvInputFormat csvInput = <span class="keyword">new</span> RowCsvInputFormat(</span><br><span class="line">    <span class="keyword">new</span> Path(csvPath),                                        <span class="comment">// 文件路径</span></span><br><span class="line">    <span class="keyword">new</span> TypeInformation[]&#123;Types.STRING, Types.STRING, Types.STRING&#125;,<span class="comment">// 字段类型</span></span><br><span class="line">    <span class="string">&quot;\n&quot;</span>,                                             <span class="comment">// 行分隔符</span></span><br><span class="line">    <span class="string">&quot;,&quot;</span>);                                            <span class="comment">// 字段分隔符</span></span><br><span class="line">csvInput.setSkipFirstLineAsHeader(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 指定 CsvInputFormat, 监控csv文件(两种模式), 时间间隔是10ms</span></span><br><span class="line">DataStream&lt;Row&gt; stream = env.readFile(csvInput, csvPath, FileProcessingMode.PROCESS_CONTINUOUSLY, <span class="number">10</span>);</span><br></pre></td></tr></table></figure></div><h6 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h6><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加Socket作为数据输入源</span></span><br><span class="line"><span class="comment">// 4个参数 -&gt; (hostname:Ip地址, port:端口, delimiter:分隔符, maxRetry:最大重试次数)</span></span><br><span class="line">DataStream&lt;String&gt; stream = env.socketTextStream(<span class="string">&quot;localhost&quot;</span>, <span class="number">9999</span>, <span class="string">&quot;\n&quot;</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure></div><h5 id="外部数据源"><a href="#外部数据源" class="headerlink" title="外部数据源"></a>外部数据源</h5><p>外部数据源是重头戏, 一般来说项目中均是使用外部数据源作为数据的源头.</p><h6 id="第三方数据源"><a href="#第三方数据源" class="headerlink" title="第三方数据源"></a>第三方数据源</h6><p>flink 通过实现 <code>SourceFunction</code> 定义了非常丰富的第三方数据连接器.对于第三方数据源, flink的支持分为三种,有<strong>只读型</strong>(Twitter Streaming API / Netty ), <strong>只写型</strong>( Cassandra / Elasticsearch / hadoop FileSystem), 支持<strong>读写</strong>(Kafka / Amazon Kinesis / RabbitMQ)</p><ul><li>Apache Kafka (Source / Sink)</li><li>Apache Cassandra (Sink)</li><li>Amazon Kinesis Streams (Source / Sink)</li><li>Elasticsearch (Sink)</li><li>Hadoop FileSystem (Sink)</li><li>RabbitMQ (Source / Sink)</li><li>Apache NiFI (Source / Sink)</li><li>Twitter Streaming API (Source)</li><li>Apache Bahir 中的连接器:</li><li>Apache ActiveMQ (Source / Sink)</li><li>Apache Flume (Sink)</li><li>Redis (Sink)</li><li>Akka (Sink)</li><li>Netty (Source)</li></ul><p><strong>以Kafka 为例 做演示</strong></p><p>我这边是远程服务器上<strong>docker-compose</strong>启动<strong>kafka</strong>,主要注意下面的<strong>EN_IP</strong>表示外网的IP地址</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Yaml"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一个 kafka节点 就是一个 broker。一个集群由多个 broker 组成。一个 broker可以容纳多个 topic</span></span><br><span class="line"><span class="attr">KAFKA_BROKER_ID:</span> <span class="number">0</span></span><br><span class="line"><span class="comment"># 配置zookeeper管理kafka的路径</span></span><br><span class="line"><span class="attr">KAFKA_ZOOKEEPER_CONNECT:</span> <span class="string">zookeeper:2181</span> </span><br><span class="line"><span class="comment"># 把kafka的地址端口注册给zookeeper，若远程访问要改成外网IP,千万注意是外网IP</span></span><br><span class="line"><span class="attr">KAFKA_ADVERTISED_LISTENERS:</span> <span class="string">PLAINTEXT://$&#123;EN_IP&#125;:9092</span> </span><br><span class="line"><span class="comment"># 配置kafka的监听端口</span></span><br><span class="line"><span class="attr">KAFKA_LISTENERS:</span> <span class="string">PLAINTEXT://0.0.0.0:9092</span>  </span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">properties.setProperty(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;EN_IP:9092&quot;</span>);</span><br><span class="line">properties.setProperty(<span class="string">&quot;group.id&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">DataStream&lt;String&gt; dataStream = env</span><br><span class="line">    .addSource(<span class="keyword">new</span> FlinkKafkaConsumer&lt;&gt;(<span class="string">&quot;topic&quot;</span>, <span class="keyword">new</span> SimpleStringSchema(), properties));</span><br><span class="line">dataStream.print();</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it kafka_container_id bash</span><br><span class="line">cd /opt/kafka/bin</span><br><span class="line">// 生产数据</span><br><span class="line">./kafka-console-producer.sh --broker-list EN_IP:9092 --topic flink-test</span><br><span class="line">// 消费数据</span><br><span class="line">./kafka-console-consumer.sh --bootstrap-server EN_IP:9092 --topic flink-test --from-beginning</span><br></pre></td></tr></table></figure></div><h6 id="自定义数据源"><a href="#自定义数据源" class="headerlink" title="自定义数据源"></a>自定义数据源</h6><p>用户也可以自己定义连接器, 通过实现 <code>SourceFunction</code> 定义单个线程的接入的数据连接器, 也可以通过实现<code>ParallelSourceFunction</code> 接口或者继承 <code>RichParallelSourceFunction</code> 类定义并发数据源接入器.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SourceFromMySQL</span> <span class="keyword">extends</span> <span class="title">RichSourceFunction</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    PreparedStatement ps;</span><br><span class="line">    <span class="keyword">private</span> Connection connection;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(SourceContext&lt;User&gt; ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ResultSet resultSet = ps.executeQuery();</span><br><span class="line">        <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">            User user = <span class="keyword">new</span> User(</span><br><span class="line">                resultSet.getInt(<span class="string">&quot;id&quot;</span>),</span><br><span class="line">                resultSet.getString(<span class="string">&quot;name&quot;</span>).trim());</span><br><span class="line">            ctx.collect(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ........</span><br></pre></td></tr></table></figure></div><h4 id="Transformation"><a href="#Transformation" class="headerlink" title="Transformation"></a>Transformation</h4><h5 id="基本转换算子"><a href="#基本转换算子" class="headerlink" title="基本转换算子"></a>基本转换算子</h5><p>基本转换算子会针对流中的每一个单独的事件做处理,也就是说每一个输入数据会产生一个输出数据.单值转换,数据的分割,数据的过滤,都是基本转换操作的典型例子.这个有个概念就行,可以跳过.</p><h6 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h6><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;SensorReading&gt; filteredReadings = readings.filter(r -&gt; r.temperature &gt;= <span class="number">25</span>);</span><br></pre></td></tr></table></figure></div><h6 id="map"><a href="#map" class="headerlink" title="map"></a>map</h6><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;String&gt; sensorIds = filteredReadings.map(r -&gt; r.id);</span><br></pre></td></tr></table></figure></div><h6 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h6><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;String&gt; splitIds = sensorIds</span><br><span class="line">    .flatMap((FlatMapFunction&lt;String, String&gt;)</span><br><span class="line">             (id, out) -&gt; &#123; <span class="keyword">for</span> (String s: id.split(<span class="string">&quot;_&quot;</span>)) &#123; out.collect(s);&#125;&#125;)</span><br><span class="line">    <span class="comment">// provide result type because Java cannot infer return type of lambda function</span></span><br><span class="line">    <span class="comment">// 提供结果的类型，因为Java无法推断匿名函数的返回值类型</span></span><br><span class="line">    .returns(Types.STRING);</span><br></pre></td></tr></table></figure></div><h6 id="richFunction"><a href="#richFunction" class="headerlink" title="richFunction"></a>richFunction</h6><p>在函数处理数据之前,需要做一些初始化的工作;或者需要在处理数据时可以获得函数执行上下文的一些信息;以及在处理完数据时做一些清理工作</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFlatMap</span> <span class="keyword">extends</span> <span class="title">RichFlatMapFunction</span>&lt;<span class="title">Integer</span>, <span class="title">Tuple2</span>&lt;<span class="title">Integer</span>, <span class="title">Integer</span>&gt;&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> subTaskIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Configuration configuration)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> subTaskIndex = getRuntimeContext.getIndexOfThisSubtask;</span><br><span class="line">    <span class="comment">// 做一些初始化工作</span></span><br><span class="line">    <span class="comment">// 例如建立一个和HDFS的连接</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatMap</span><span class="params">(Integer in, Collector&lt;Tuple2&lt;Integer, Integer&gt;&gt; out)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (in % <span class="number">2</span> == subTaskIndex) &#123;</span><br><span class="line">      out.collect((subTaskIndex, in));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 清理工作，断开和HDFS的连接。</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="键控流转换算子"><a href="#键控流转换算子" class="headerlink" title="键控流转换算子"></a>键控流转换算子</h5><p>很多流处理程序的一个基本要求就是要能对数据进行分组,分组后的数据共享某一个相同的属性.<strong>DataStream API</strong>提供了一个叫做<code>KeyedStream</code>的抽象,此抽象会从逻辑上对DataStream进行分区,分区后的数据拥有同样的<code>Key</code>值,分区后的流互不相关.</p><h6 id="keyBy"><a href="#keyBy" class="headerlink" title="keyBy"></a>keyBy</h6><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KeyedStream&lt;SensorReading, String&gt; keyed = readings.keyBy(r -&gt; r.id);</span><br></pre></td></tr></table></figure></div><h6 id="fold"><a href="#fold" class="headerlink" title="fold"></a>fold</h6><p>通过将最后一个文件夹流与当前记录组合来推出 KeyedStream.它会发回数据流.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">KeyedStream.fold(<span class="string">&quot;1&quot;</span>, <span class="keyword">new</span> FoldFunction&lt;Integer, String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fold</span><span class="params">(String accumulator, Integer value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accumulator + <span class="string">&quot;=&quot;</span> + value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h6 id="aggregate"><a href="#aggregate" class="headerlink" title="aggregate"></a>aggregate</h6><p>滚动聚合算子由<code>KeyedStream</code>调用,并生成一个聚合以后的DataStream.</p><p>滚动聚合算子只能用在滚动窗口,不能用在滑动窗口.</p><p>滚动聚合操作会对每一个key都保存一个状态。因为状态从来不会被清空，所以我们在使用滚动聚合算子时只能使用在含有有限个key的流上面。</p><p>常见的滚动聚合算子: sum,min,max,minBy,maxBy</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;Tuple3&lt;Integer, Integer, Integer&gt;&gt; resultStream = inputStream</span><br><span class="line">    .keyBy(<span class="number">0</span>) <span class="comment">// key on first field of the tuple</span></span><br><span class="line">    .sum(<span class="number">1</span>);   <span class="comment">// sum the second field of the tuple in place</span></span><br></pre></td></tr></table></figure></div><h6 id="window"><a href="#window" class="headerlink" title="window"></a>window</h6><p>允许按时间或其他条件对现有 KeyedStream 进行分组.以下是以 10 秒的时间窗口聚合:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inputStream.keyBy(<span class="number">0</span>).window(Time.seconds(<span class="number">10</span>));</span><br><span class="line">inputStream.keyBy(<span class="number">0</span>).windowAll(Time.seconds(<span class="number">10</span>));</span><br></pre></td></tr></table></figure></div><h6 id="window-join"><a href="#window-join" class="headerlink" title="window join"></a>window join</h6><p>我们可以通过一些 key 将同一个 window 的两个数据流 join 起来.</p><p>以下示例是在 5 秒的窗口中连接两个流,其中第一个流的第一个属性的连接条件等于另一个流的第二个属性</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">inputStream.join(inputStream1)</span><br><span class="line">           .where(<span class="number">0</span>).equalTo(<span class="number">1</span>)</span><br><span class="line">           .window(Time.seconds(<span class="number">5</span>))     </span><br><span class="line">           .apply (<span class="keyword">new</span> JoinFunction () &#123;...&#125;);</span><br></pre></td></tr></table></figure></div><h6 id="split"><a href="#split" class="headerlink" title="split"></a>split</h6><p>此功能根据条件将流拆分为两个或多个流.当您获得混合流并且您可能希望单独处理每个数据流时,可以使用此方法.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">SplitStream&lt;Integer&gt; split = inputStream.split(<span class="keyword">new</span> OutputSelector&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;String&gt; <span class="title">select</span><span class="params">(Integer value)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; output = <span class="keyword">new</span> ArrayList&lt;String&gt;(); </span><br><span class="line">        <span class="keyword">if</span> (value % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            output.add(<span class="string">&quot;even&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            output.add(<span class="string">&quot;odd&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> output;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><h6 id="select"><a href="#select" class="headerlink" title="select"></a>select</h6><p>此功能允许您从拆分流中选择特定流</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SplitStream&lt;Integer&gt; split;</span><br><span class="line">DataStream&lt;Integer&gt; even = split.select(<span class="string">&quot;even&quot;</span>); </span><br><span class="line">DataStream&lt;Integer&gt; odd = split.select(<span class="string">&quot;odd&quot;</span>); </span><br><span class="line">DataStream&lt;Integer&gt; all = split.select(<span class="string">&quot;even&quot;</span>,<span class="string">&quot;odd&quot;</span>);</span><br></pre></td></tr></table></figure></div><h6 id="project"><a href="#project" class="headerlink" title="project"></a>project</h6><p>Project 函数允许您从事件流中选择属性子集,并仅将所选元素发送到下一个处理流.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;Tuple4&lt;Integer, Double, String, String&gt;&gt; in = <span class="comment">// [...] </span></span><br><span class="line">DataStream&lt;Tuple2&lt;String, String&gt;&gt; out = in.project(<span class="number">3</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure></div><h6 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h6><p>reduce函数可以通过实现接口ReduceFunction来创建一个类.ReduceFunction接口定义了<code>reduce()</code>方法,此方法接收两个输入事件,输入一个相同类型的事件.</p><p>reduce作为滚动聚合的泛化实现,同样也要针对每一个key保存状态.因为状态从来不会清空,所以我们需要将reduce算子应用在一个有限key的流上.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;SensorReading&gt; maxTempPerSensor = keyed</span><br><span class="line">    .reduce((r1, r2) -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (r1.temperature &gt; r2.temperature) &#123;</span><br><span class="line">            <span class="keyword">return</span> r1;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> r2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></div><h5 id="多流转换算子"><a href="#多流转换算子" class="headerlink" title="多流转换算子"></a>多流转换算子</h5><p>许多应用需要摄入多个流并将流合并处理,还可能需要将一条流分割成多条流然后针对每一条流应用不同的业务逻辑.</p><h6 id="union"><a href="#union" class="headerlink" title="union"></a>union</h6><p>合流的方式为FIFO方式,合并流类型要一致.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;SensorReading&gt; parisStream = ...</span><br><span class="line">DataStream&lt;SensorReading&gt; tokyoStream = ...</span><br><span class="line">DataStream&lt;SensorReading&gt; rioStream = ...</span><br><span class="line">DataStream&lt;SensorReading&gt; allCities = parisStream</span><br><span class="line">  .union(tokyoStream, rioStream)</span><br></pre></td></tr></table></figure></div><h6 id="connect-comap-coflatmap"><a href="#connect-comap-coflatmap" class="headerlink" title="connect,comap,coflatmap"></a>connect,comap,coflatmap</h6><p>两个流的数据类型可以不同,会对两个流中的数据应用不同的处理方法.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;Tuple2&lt;Integer, Long&gt;&gt; one = ...</span><br><span class="line">DataStream&lt;Tuple2&lt;Integer, String&gt;&gt; two = ...</span><br><span class="line"><span class="comment">// keyBy two connected streams</span></span><br><span class="line">ConnectedStreams&lt;Tuple2&lt;Int, Long&gt;, Tuple2&lt;Integer, String&gt;&gt; keyedConnect1 = one</span><br><span class="line">  .connect(two)</span><br><span class="line">  .keyBy(<span class="number">0</span>, <span class="number">0</span>); <span class="comment">// key both input streams on first attribute</span></span><br><span class="line"><span class="comment">// alternative: connect two keyed streams</span></span><br><span class="line">ConnectedStreams&lt;Tuple2&lt;Integer, Long&gt;, Tuple2&lt;Integer, String&gt;&gt; keyedConnect2 = one</span><br><span class="line">  .keyBy(<span class="number">0</span>)</span><br><span class="line">  .connect(two.keyBy(<span class="number">0</span>));</span><br></pre></td></tr></table></figure></div><h5 id="分布式转换算子"><a href="#分布式转换算子" class="headerlink" title="分布式转换算子"></a>分布式转换算子</h5><p>定义了事件如何分配到不同的任务中去</p><p>当我们使用DataStream API来编写程序时,系统将自动的选择数据分区策略,然后根据操作符的语义和设置的并行度将数据路由到正确的地方去.有些时候,我们需要在应用程序的层面控制分区策略,或者自定义分区策略</p><h6 id="random"><a href="#random" class="headerlink" title="random"></a>random</h6><p>随机数据交换由<code>DataStream.shuffle()</code>方法实现。shuffle方法将数据随机的分配到下游算子的并行任务中去</p><h6 id="round-robin"><a href="#round-robin" class="headerlink" title="round-robin"></a>round-robin</h6><p><code>rebalance()</code>方法使用Round-Robin负载均衡算法将输入流平均分配到随后的并行运行的任务中去</p><h6 id="rescale"><a href="#rescale" class="headerlink" title="rescale"></a>rescale</h6><p><code>rescale()</code>方法使用的也是round-robin算法,但只会将数据发送到接下来的并行运行的任务中的一部分任务中.本质上,当发送者任务数量和接收者任务数量不一样时,rescale分区策略提供了一种轻量级的负载均衡策略.如果接收者任务的数量是发送者任务的数量的倍数时,rescale操作将会效率更高.</p><p><code>rebalance()</code>和<code>rescale()</code>的根本区别在于任务之间连接的机制不同.<code>rebalance()</code>将会针对所有发送者任务和所有接收者任务之间建立通信通道,而<code>rescale()</code>仅仅针对每一个任务和下游算子的一部分子并行任务之间建立通信通道</p><h6 id="broadcast"><a href="#broadcast" class="headerlink" title="broadcast"></a>broadcast</h6><p><code>broadcast()</code>方法将输入流的所有数据复制并发送到下游算子的所有并行任务中去.</p><h6 id="global"><a href="#global" class="headerlink" title="global"></a>global</h6><p><code>global()</code>方法将所有的输入流数据都发送到下游算子的第一个并行任务中去.这个操作需要很谨慎,因为将所有数据发送到同一个task,将会对应用程序造成很大的压力.</p><h6 id="custom"><a href="#custom" class="headerlink" title="custom"></a>custom</h6><p>当Flink提供的分区策略都不适用时,我们可以使用<code>partitionCustom()</code>方法来自定义分区策略.这个方法接收一个<code>Partitioner</code>对象,这个对象需要实现分区逻辑以及定义针对流的哪一个字段或者key来进行分区.</p><h4 id="Sink"><a href="#Sink" class="headerlink" title="Sink"></a>Sink</h4><p>Flink没有类似于spark中foreach方法,让用户进行迭代的操作.所有对外的输出操作都要利用Sink完成.最后通过类似如下方式完成整个任务最终输出操作.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stream.addSink(<span class="keyword">new</span> MySink(xxxx));</span><br></pre></td></tr></table></figure></div><p>官方提供了一部分的框架的sink.除此以外,需要用户自定义实现sink.</p><h5 id="第三方sink"><a href="#第三方sink" class="headerlink" title="第三方sink"></a>第三方sink</h5><h6 id="kafka"><a href="#kafka" class="headerlink" title="kafka"></a>kafka</h6><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Xml"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-connector-kafka_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;String&gt; union = high</span><br><span class="line">  .union(low)</span><br><span class="line">  .map(r -&gt; r.temperature.toString);</span><br><span class="line"></span><br><span class="line">union.addSink(</span><br><span class="line">  <span class="keyword">new</span> FlinkKafkaProducer011&lt;String&gt;(</span><br><span class="line">    <span class="string">&quot;localhost:9092&quot;</span>,</span><br><span class="line">    <span class="string">&quot;test&quot;</span>,</span><br><span class="line">    <span class="keyword">new</span> SimpleStringSchema()</span><br><span class="line">  )</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div><h6 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h6><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Xml"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.bahir<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-connector-redis_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisSink_</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        DataStream&lt;User&gt; stream = env.addSource(<span class="keyword">new</span> UserSource());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        FlinkJedisPoolConfig conf = <span class="keyword">new</span> FlinkJedisPoolConfig.Builder().setHost(<span class="string">&quot;localhost&quot;</span>).build();</span><br><span class="line"></span><br><span class="line">        stream.addSink(<span class="keyword">new</span> RedisSink&lt;SensorReading&gt;(conf, <span class="keyword">new</span> MyRedisSink()));</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRedisSink</span> <span class="keyword">implements</span> <span class="title">RedisMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getKeyFromData</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> user.getId().toString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getValueFromData</span><span class="params">(User User)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> user.getName();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> RedisCommandDescription <span class="title">getCommandDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> RedisCommandDescription(RedisCommand.HSET, <span class="string">&quot;flink-test&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it redis_container_id redis-cli</span><br><span class="line">auth 123456</span><br><span class="line">keys keys flink-test</span><br><span class="line">hvals flink-test</span><br></pre></td></tr></table></figure></div><h6 id="elasticsearch"><a href="#elasticsearch" class="headerlink" title="elasticsearch"></a>elasticsearch</h6><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Xml"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-connector-elasticsearch6_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 可选依赖 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EsSink_</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        DataStreamSource&lt;User&gt; stream = env.addSource(<span class="keyword">new</span> UserSource());</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;HttpHost&gt; httpHosts = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        httpHosts.add(<span class="keyword">new</span> HttpHost(<span class="string">&quot;localhost&quot;</span>, <span class="number">9200</span>, <span class="string">&quot;http&quot;</span>));</span><br><span class="line">        ElasticsearchSink.Builder&lt;User&gt; sensorReadingBuilder = <span class="keyword">new</span> ElasticsearchSink.Builder&lt;&gt;(</span><br><span class="line">                httpHosts,</span><br><span class="line">                (ElasticsearchSinkFunction&lt;User&gt;) (user, runtimeContext, requestIndexer) -&gt; &#123;</span><br><span class="line">                    HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                    map.put(<span class="string">&quot;data&quot;</span>, user.toString());</span><br><span class="line">                    IndexRequest indexRequest = Requests</span><br><span class="line">                            .indexRequest()</span><br><span class="line">                            .index(<span class="string">&quot;flink-test&quot;</span>) <span class="comment">// 索引是flink-test，相当于数据库</span></span><br><span class="line">                            .type(<span class="string">&quot;user&quot;</span>) <span class="comment">// es6需要加这一句</span></span><br><span class="line">                            .source(map);</span><br><span class="line"></span><br><span class="line">                    requestIndexer.add(indexRequest);</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">        sensorReadingBuilder.setBulkFlushMaxActions(<span class="number">1</span>);</span><br><span class="line">        stream.addSink(sensorReadingBuilder.build());</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="自定义sink"><a href="#自定义sink" class="headerlink" title="自定义sink"></a>自定义sink</h5><p>继承 RichSinkFunction 抽象类,重写 invoke 方法</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyJDBCSink</span> <span class="keyword">extends</span> <span class="title">RichSinkFunction</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Connection conn;</span><br><span class="line">    <span class="keyword">private</span> PreparedStatement insertStmt;</span><br><span class="line">    <span class="keyword">private</span> PreparedStatement updateStmt;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(User value, Context context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        updateStmt.setString(<span class="number">1</span>, value.getName());</span><br><span class="line">        updateStmt.setInt(<span class="number">2</span>, value.getId());</span><br><span class="line">        updateStmt.execute();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (updateStmt.getUpdateCount() == <span class="number">0</span>) &#123;</span><br><span class="line">            insertStmt.setInt(<span class="number">1</span>, value.getId());</span><br><span class="line">            insertStmt.setString(<span class="number">2</span>, value.getName());</span><br><span class="line">            insertStmt.execute();</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ....</span><br></pre></td></tr></table></figure></div><h4 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h4><h5 id="时间-time"><a href="#时间-time" class="headerlink" title="时间 time"></a>时间 time</h5><p>事件时间 <strong>Event Time</strong>,即事件实际发生的时间,可以处理乱序事件,一般都用这个;<br>摄入时间 <strong>Ingestion Time</strong>,事件进入流处理框架的时间;<br>处理时间 <strong>Processing Time</strong>,事件被处理的时间,执行操作算子的本地时间,与机器无关.统计某些延时非常高的日志.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"><span class="comment">//设置时间属性为 EventTime</span></span><br><span class="line">env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);</span><br><span class="line"></span><br><span class="line">DataStream&lt;MyEvent&gt; stream = env.addSource(<span class="keyword">new</span> FlinkKafkaConsumer09&lt;MyEvent&gt;(topic, schema, props));</span><br><span class="line">stream</span><br><span class="line">    .keyBy( (event) -&gt; event.getUser() )</span><br><span class="line">    .timeWindow(Time.hours(<span class="number">1</span>))</span><br><span class="line">    .reduce( (a, b) -&gt; a.add(b) )</span><br><span class="line">    .addSink(...);</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个方法中的 while 循环部分会从 eventTimeTimersQueue 中依次取出触发时间小于参数 time 的所有定时器，调用 triggerTarget.onEventTime() 方法进行触发。这就是 EventTime 从注册到触发的流程。</span></span><br><span class="line">InternalTimeServiceImpl.advanceWatermark。</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">advanceWatermark</span><span class="params">(<span class="keyword">long</span> time)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   currentWatermark = time;</span><br><span class="line">   InternalTimer&lt;K, N&gt; timer;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">while</span> ((timer = eventTimeTimersQueue.peek()) != <span class="keyword">null</span> &amp;&amp; timer.getTimestamp() &lt;= time) &#123;</span><br><span class="line">      eventTimeTimersQueue.poll();</span><br><span class="line">      keyContext.setCurrentKey(timer.getKey());</span><br><span class="line">      triggerTarget.onEventTime(timer);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="水位线-watermark"><a href="#水位线-watermark" class="headerlink" title="水位线 watermark"></a>水位线 watermark</h5><h6 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h6><p><strong>水印的出现是为了解决实时计算中的数据乱序问题，它的本质是 DataStream 中一个带有时间戳的元素</strong>。</p><p>如果 Flink 系统中出现了一个 WaterMark T,那么就意味着 EventTime &lt; T 的数据都已经到达,窗口的结束时间和 T 相同的那个窗口被<strong>触发</strong>进行计算了.</p><p>也就是说:水印是 Flink 判断迟到数据的标准,同时也是窗口触发的标记.</p><p>在程序并行度大于 1 的情况下,会有多个流产生水印和窗口,这时候 Flink 会选取时间戳最小的水印.</p><h6 id="使用水印"><a href="#使用水印" class="headerlink" title="使用水印"></a>使用水印</h6><p><strong>a. 在 Source Function 中 直接指定 Timestamps 和 Watermark</strong></p><p> 用户需要复写 SourceFunction 接口中 run( ) 方法实现数据逻辑, 同时调用 SourceContext 的 collectWithTimestamp( ) 方法生成 event time 时间戳, 调用 emitWatermark( ) 方法生成 watermark.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;String&gt; text = env.addSource(<span class="keyword">new</span> SourceFunction&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(SourceContext&lt;String&gt; ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (String s : elementInput) &#123;</span><br><span class="line">                    <span class="comment">// 切割每一条数据</span></span><br><span class="line">                    String[] inp = s.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                    Long timestamp = <span class="keyword">new</span> Long(inp[<span class="number">1</span>]);</span><br><span class="line">                    <span class="comment">// 生成 event time 时间戳</span></span><br><span class="line">                    ctx.collectWithTimestamp(s, timestamp);</span><br><span class="line">                    <span class="comment">// 调用 emitWatermark() 方法生成 watermark, 最大延迟设定为 2</span></span><br><span class="line">                    ctx.emitWatermark(<span class="keyword">new</span> Watermark(timestamp - <span class="number">2</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 设定默认 watermark</span></span><br><span class="line">                ctx.emitWatermark(<span class="keyword">new</span> Watermark(Long.MAX_VALUE));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></div><p><strong>b. 通过 Flink 自带的 Timestamp Assigner 指定 Timestamp 和 生成 watermark</strong></p><p><strong>b.1 使用 Ascending Timestamp Assigner 指定 Timestamps 和 Watermark</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;Tuple2&lt;String, Long&gt;&gt; dataStream = env.fromCollection(collectionInput);</span><br><span class="line">       dataStream.assignTimestampsAndWatermarks(</span><br><span class="line">               (WatermarkStrategy&lt;Tuple2&lt;String, Long&gt;&gt;) context -&gt; <span class="keyword">new</span> WatermarkGenerator&lt;Tuple2&lt;String,Long&gt;&gt;()&#123;</span><br><span class="line">                   <span class="keyword">private</span> <span class="keyword">long</span> maxTimestamp;</span><br><span class="line">                   <span class="keyword">private</span> <span class="keyword">long</span> delay = <span class="number">3000</span>;</span><br><span class="line">                   <span class="meta">@Override</span></span><br><span class="line">                   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                           Tuple2&lt;String,Long&gt; event,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">long</span> eventTimestamp,</span></span></span><br><span class="line"><span class="function"><span class="params">                           WatermarkOutput output)</span></span>&#123;</span><br><span class="line">                       maxTimestamp = Math.max(maxTimestamp, event.f1);</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="meta">@Override</span></span><br><span class="line">                   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPeriodicEmit</span><span class="params">(WatermarkOutput output)</span></span>&#123;</span><br><span class="line">                       output.emitWatermark(<span class="keyword">new</span> Watermark(maxTimestamp - delay));</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;);</span><br></pre></td></tr></table></figure></div><p><strong>b.2 内置水印生成策略</strong></p><p><strong>b.2.1 固定延迟生成水印</strong></p><p>通过静态方法<code>forBoundedOutOfOrderness</code>提供,入参接收一个Duration类型的时间间隔，也就是我们可以接受的最大的延迟时间.使用这种延迟策略的时候需要我们对数据的延迟时间有一个大概的预估判断。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WatermarkStrategy.forBoundedOutOfOrderness(Duration maxOutOfOrderness)</span><br></pre></td></tr></table></figure></div><p>我们实现一个延迟3秒的固定延迟水印，可以这样做：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DataStream dataStream = ...... ;</span><br><span class="line">dataStream.assignTimestampsAndWatermarks(WatermarkStrategy.forBoundedOutOfOrderness(Duration.ofSeconds(<span class="number">3</span>)));</span><br></pre></td></tr></table></figure></div><p>他的底层使用的WatermarkGenerator接口的一个实现类BoundedOutOfOrdernessWatermarks。我们看下源码中的这两个方法，是不是和我们上面自己写的很像.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(T event, <span class="keyword">long</span> eventTimestamp, WatermarkOutput output)</span> </span>&#123;</span><br><span class="line"> maxTimestamp = Math.max(maxTimestamp, eventTimestamp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPeriodicEmit</span><span class="params">(WatermarkOutput output)</span> </span>&#123;</span><br><span class="line"> output.emitWatermark(<span class="keyword">new</span> Watermark(maxTimestamp - outOfOrdernessMillis - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><strong>b.2.2 单调递增生成水印</strong></p><p>通过静态方法<code>forMonotonousTimestamps</code>来提供.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WatermarkStrategy.forMonotonousTimestamps()</span><br></pre></td></tr></table></figure></div><p>这个也就是相当于上述的延迟策略去掉了延迟时间，以event中的时间戳充当了水印。</p><p>在程序中可以这样使用：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DataStream dataStream = ...... ;</span><br><span class="line">dataStream.assignTimestampsAndWatermarks(WatermarkStrategy.forMonotonousTimestamps());</span><br></pre></td></tr></table></figure></div><p>它的底层实现是AscendingTimestampsWatermarks，其实它就是BoundedOutOfOrdernessWatermarks类的一个子类，没有了延迟时间，我们来看看具体源码的实现.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Public</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AscendingTimestampsWatermarks</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">BoundedOutOfOrdernessWatermarks</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Creates a new watermark generator with for ascending timestamps.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">AscendingTimestampsWatermarks</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>(Duration.ofMillis(<span class="number">0</span>));</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h6 id="event时间的获取"><a href="#event时间的获取" class="headerlink" title="event时间的获取"></a>event时间的获取</h6><p>上述我们讲了flink自带的两种水印生成策略，但是对于我们使用eventtime语义的时候，我们想从我们的自己的数据中抽取eventtime，这个就需要TimestampAssigner了.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Public</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TimestampAssigner</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    ............</span><br><span class="line">    </span><br><span class="line"> <span class="function"><span class="keyword">long</span> <span class="title">extractTimestamp</span><span class="params">(T element, <span class="keyword">long</span> recordTimestamp)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>使用的时候我们主要就是从我们自己的元素element中提取我们想要的eventtime。</p><p>使用flink自带的水印策略和eventtime抽取类，可以这样用：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DataStream dataStream = ...... ;</span><br><span class="line">dataStream.assignTimestampsAndWatermarks(</span><br><span class="line">    WatermarkStrategy</span><br><span class="line">      .&lt;Tuple2&lt;String,Long&gt;&gt;forBoundedOutOfOrderness(Duration.ofSeconds(<span class="number">5</span>))</span><br><span class="line">      .withTimestampAssigner((event, timestamp)-&gt;event.f1));</span><br></pre></td></tr></table></figure></div><h6 id="处理空闲数据源"><a href="#处理空闲数据源" class="headerlink" title="处理空闲数据源"></a>处理空闲数据源</h6><p>在某些情况下，由于数据产生的比较少，导致一段时间内没有数据产生，进而就没有水印的生成，导致下游依赖水印的一些操作就会出现问题，比如某一个算子的上游有多个算子，这种情况下，水印是取其上游两个算子的较小值，如果上游某一个算子因为缺少数据迟迟没有生成水印，就会出现eventtime倾斜问题，导致下游没法触发计算。</p><p>所以filnk通过WatermarkStrategy.withIdleness()方法允许用户在配置的时间内（即超时时间内）没有记录到达时将一个流标记为空闲。这样就意味着下游的数据不需要等待水印的到来。</p><p>当下次有水印生成并发射到下游的时候，这个数据流重新变成活跃状态。</p><p>通过下面的代码来实现对于空闲数据流的处理</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WatermarkStrategy</span><br><span class="line">        .&lt;Tuple2&lt;Long, String&gt;&gt;forBoundedOutOfOrderness(Duration.ofSeconds(<span class="number">20</span>))</span><br><span class="line">        .withIdleness(Duration.ofMinutes(<span class="number">1</span>));</span><br></pre></td></tr></table></figure></div><h5 id="窗口简介-window"><a href="#窗口简介-window" class="headerlink" title="窗口简介 window"></a>窗口简介 window</h5><p>窗口是流式计算中非常重要的一个概念, 很多常见的功能都是通过各种窗口实现的, 比如每5分钟统计一下刚去1小时的热度. Flink DataStream API 将窗口独立成 Operator. 每个窗口算子包含了以下几个部分:</p><p><strong>Windows Assigner</strong></p><p>指定窗口的类型, 定义如何将数据流分配到一个或者多个窗口</p><p><strong>Windows Trigger</strong></p><p>指定窗口触发的时机, 定义窗口满足什么样的条件触发计算</p><p><strong>Evictor</strong></p><p>用户数据剔除</p><p><strong>Lateness</strong></p><p>标记是否处理迟到的数据, 当迟到数据到达窗口中是否触发计算</p><p><strong>Output Tag</strong></p><p>标记输出标签, 然后再通过 getSideOutput 将窗口中的数据根据标签输出</p><p><strong>Windows Function</strong></p><p>定义窗口上的数据处理的逻辑, 例如对数据进行sum</p><h5 id="Window-Assigner"><a href="#Window-Assigner" class="headerlink" title="Window Assigner"></a>Window Assigner</h5><p>首先最需要了解的就是 windows Assigner了, 我们想要一个什么样的窗口划分, 主要就是通过他来实现的.</p><p>根据 flink 上游的数据集是否为 KeyedStream 类型 来做分别的处理. 如果使用了keyBy( ) 则对应使用window( ) 来处理, 否则可以使用 windowAll( )来使用</p><p>Flink 可以支持两种类型的窗口, 分别是基于时间的窗口和基于数量的窗口.基于时间的意思就是按照时间去划分窗口,同理,基于数量的也是根据窗口中的数量来做切分的. 对应的分别就是 timeWindow() 和 countWindow() 来使用, 下面的示例主要使用 timeWindow() 来演示.</p><p>对于不同的 Window Assigner, 还可以把窗口划分为4大类, 分别是 滚动窗口(Tumbling Windows) / 滑动窗口(Sliding Window) / 会话窗口(Session Window) 和 全局窗口(Global Window).</p><h6 id="滚动窗口-Tumbling-Windows"><a href="#滚动窗口-Tumbling-Windows" class="headerlink" title="滚动窗口 Tumbling Windows"></a>滚动窗口 Tumbling Windows</h6><p>DataStream API 提供基于 EventTime 和 ProcessingTime 的两种类型的 Tumbling window.对应的 Assigner 分别是 TumblingEventTimeWindow 和 ProcessingEventTimeWindow . 举例如下,完整代码见Github.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 使用ProcessTime的滚动时间窗口, 长度为10s</span><br><span class="line">stream.keyBy(x -&gt; x.f1)</span><br><span class="line">    .window(TumblingProcessingTimeWindows.of(Time.seconds(10))).process(...)</span><br><span class="line">&#x2F;&#x2F; 使用ProcessTime的滚动时间窗口, 长度为10s</span><br><span class="line">stream.keyBy(x -&gt;x.f1).window(TumblingEventTimeWindows.of(Time.seconds(10))).process(...)</span><br></pre></td></tr></table></figure></div><p>使用 window(TumblingProcessingTimeWindows.of(Time.seconds(10))) 的方法有点啰嗦, Flink 还提供了timeWindow( ) 的 API 来简化这一行代码.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 直接使用 timeWindow API 便可实现滚动窗口的操作, 参数依旧是窗口的长度</span><br><span class="line">&#x2F;&#x2F; 窗口类型的时间由 time characteristic 确定, 如果指定为 event time,那么窗口也会自动用这个时间</span><br><span class="line">input.keyBy(x -&gt; x.f1).timeWindow(Time.seconds(10));</span><br></pre></td></tr></table></figure></div><h6 id="滑动窗口-Sliding-Window"><a href="#滑动窗口-Sliding-Window" class="headerlink" title="滑动窗口 Sliding Window"></a>滑动窗口 Sliding Window</h6><p>滑动窗口顾名思义就是一个在不断往后滑动的窗口, 比如说 每5分钟 统计一个 最近一小时的时间, 那么就需要用滑动窗口来做处理. 滑动窗口主要是依靠 window size 和 slide time 来确定. 与滚动窗口类似的, flink 也提供了对应不同时间的 Assigner API(SlidingEventTimeWindow / SlidingEventTimeWindow), 语法基本类似, 只是由原本的一个参数(窗口长度) 变为了两个参数(窗口长度和滑动时间), 同样的, 为了简化代码, 依然可以使用timeWindow() 来简化.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 两个参数分别是 窗口长度 和 滑动时间, 窗口时间类型依旧通过time characteristic 确定</span><br><span class="line">input.keyBy(x -&gt; x.f1).timeWindow(Time.seconds(10), Time.seconds(1))</span><br></pre></td></tr></table></figure></div><h6 id="会话窗口-Session-Window"><a href="#会话窗口-Session-Window" class="headerlink" title="会话窗口 Session Window"></a>会话窗口 Session Window</h6><p>会话窗口主要是将某段时间内活跃度较高的数据聚合成一个窗口计算. 触发条件是 Session Gap. 在规定的时间内没有数据接入则认为这个窗口结束,然后触发窗口计算. Session Gap 除了固定间隔的方式, 也可以动态抽取.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建 Session Window, 间隔为 3s</span><br><span class="line">        DataStream&lt;Tuple3&lt;String, Long, Integer&gt;&gt; aggregated &#x3D; source</span><br><span class="line">                .keyBy(0)</span><br><span class="line">                .window(EventTimeSessionWindows.withGap(Time.seconds(3L)))</span><br><span class="line">                .sum(2);</span><br></pre></td></tr></table></figure></div><h6 id="全局窗口-Global-Window"><a href="#全局窗口-Global-Window" class="headerlink" title="全局窗口 Global Window"></a>全局窗口 Global Window</h6><p>全局窗口将所有key的数据分配到单个窗口中计算结果.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建 GlobalWindow</span><br><span class="line">        input.keyBy(1)</span><br><span class="line">                .window(GlobalWindows.create())</span><br><span class="line">                .sum(1);</span><br></pre></td></tr></table></figure></div><h5 id="Window-Function"><a href="#Window-Function" class="headerlink" title="Window Function"></a>Window Function</h5><p>Window Assigner 的作用是划分窗口的, 而 Window Function 就是对窗口内的数据做处理的一个过程</p><h6 id="ReduceFunction-增量"><a href="#ReduceFunction-增量" class="headerlink" title="ReduceFunction (增量)"></a>ReduceFunction (增量)</h6><p>对输入的两个相同类型的元素按照指定的计算方式进行聚合, 通过实现 ReduceFunction 接口就可以在reduce( ) 函数内部进行聚合操作了.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">input.keyBy(x -&gt; x.f1).timeWindow(Time.seconds(<span class="number">10</span>), Time.seconds(<span class="number">1</span>))</span><br><span class="line">.reduce((t1,t2) -&gt; <span class="keyword">new</span> Tuple2&lt;&gt;(t1.f0 + t2.f0, t1.f1));</span><br></pre></td></tr></table></figure></div><h6 id="AggregateFunction-增量"><a href="#AggregateFunction-增量" class="headerlink" title="AggregateFunction (增量)"></a>AggregateFunction (增量)</h6><p>AggregateFunction 相对于ReduceFunction更加灵活,但是实现起来也更复杂, AggregateFunction有 4 个需要复写的方法, 其中createAccumulator( ) 定义累加器, add( ) 定义数据的添加逻辑, getResult( ) 定义了根据 accumulator 计算结果的逻辑, merge()方法定义合并 accumulator 的逻辑.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">input.keyBy(x -&gt; x.f1)</span><br><span class="line">    .timeWindow(Time.seconds(<span class="number">10</span>), Time.seconds(<span class="number">1</span>))</span><br><span class="line">    <span class="comment">// 自定义一个AggregateFunciton, 将相同标号 f1 的数据的 f0字符串字段合并在一起</span></span><br><span class="line">    <span class="comment">// (&quot;hello&quot;, 1L) + (&quot;world&quot;, 1L) = (&quot;hello world&quot;, 1L)</span></span><br><span class="line">    .aggregate(<span class="keyword">new</span> MyAggregateFunction());</span><br></pre></td></tr></table></figure></div><p>通过自定义的 MyAggregateFunction() 来实现 AggregateFunction 接口</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAggregateFunction</span> <span class="keyword">implements</span> <span class="title">AggregateFunction</span>&lt;<span class="title">Tuple2</span>&lt;<span class="title">String</span>, <span class="title">Long</span>&gt;, <span class="title">String</span>, <span class="title">String</span>&gt;</span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">createAccumulator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化累加器</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">(Tuple2&lt;String, Long&gt; t, String s)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 输入数据与累加器的合并</span></span><br><span class="line">            <span class="keyword">return</span> s + <span class="string">&quot; &quot;</span> +t.f0;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getResult</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 得到累加器的结果</span></span><br><span class="line">            <span class="keyword">return</span> s.trim();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">merge</span><span class="params">(String s, String acc1)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 合并累加器</span></span><br><span class="line">            <span class="keyword">return</span> s + <span class="string">&quot; &quot;</span> + acc1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><h6 id="FoldFunction-增量"><a href="#FoldFunction-增量" class="headerlink" title="FoldFunction (增量)"></a>FoldFunction (增量)</h6><p>FoldFunction定义了如何将窗口中的输入元素与外部的元素合并的逻辑</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">input.keyBy(x -&gt; x.f1)</span><br><span class="line">.timeWindow(Time.seconds(<span class="number">10</span>), Time.seconds(<span class="number">1</span>)).fold(<span class="string">&quot;flink&quot;</span>, (acc, t) -&gt;t.f0 + acc);</span><br></pre></td></tr></table></figure></div><p>FoldFunction在新版本已经被标记@Deprecated了, 建议使用AggregateFunction代替</p><h6 id="ProcessWindowFunction-全量"><a href="#ProcessWindowFunction-全量" class="headerlink" title="ProcessWindowFunction (全量)"></a>ProcessWindowFunction (全量)</h6><p>ProcessWindowFunction 相较于其他的 Window Function, 可以实现一些更复杂的计算, 比如基于整个窗口做某些指标计算 或者需要操作窗口中的状态数据和窗口元数据. Flink 提供了 ProcessWindowFunction 这个抽象类, 继承此类就可以实现ProcessWindowFunction, 其中, 必须要实现 process( ) 方法, 这是处理窗口数据的主要方法.还在一下跟窗口数据相关的方法可以有选择的实现.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyProcessWindowFunction</span> <span class="keyword">extends</span> <span class="title">ProcessWindowFunction</span>&lt;<span class="title">Tuple3</span>&lt;<span class="title">String</span>, <span class="title">Long</span>, <span class="title">Long</span>&gt;, <span class="title">String</span>, <span class="title">Long</span>, <span class="title">TimeWindow</span>&gt; </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Long s, Context context, Iterable&lt;Tuple3&lt;String, Long, Long&gt;&gt; elements, Collector&lt;String&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 统计每个窗口内的所有数据的 f0字段加起来共有多少个单词</span></span><br><span class="line">        <span class="comment">// 也就做单个窗口的 wordcount</span></span><br><span class="line">        Long count = <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">for</span> (Tuple3&lt;String, Long, Long&gt; element : elements) &#123;</span><br><span class="line">            count += element.f0.split(<span class="string">&quot; &quot;</span>).length;</span><br><span class="line">        &#125;</span><br><span class="line">        out.collect(<span class="string">&quot;window: &quot;</span> + context.window() + <span class="string">&quot; word count: &quot;</span> + count);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="Window-Join"><a href="#Window-Join" class="headerlink" title="Window Join"></a>Window Join</h5><p>Flink 中支持窗口上的多流合并, 需要保证的是输入的 stream 要构建在相同的 Window 上, 并使用相同类型的 Key 作为关联条件.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Java"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">inputStream1.join(inputStream2)</span><br><span class="line"><span class="comment">// 指定inputStream1的关联key</span></span><br><span class="line">.where(<span class="number">0</span>)</span><br><span class="line"><span class="comment">// 指定inputStream2的关联key</span></span><br><span class="line">.equalTo(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// 指定 window Assigner</span></span><br><span class="line">.window(TumblingEventTimeWindows.of(Time.seconds(<span class="number">10</span>)))</span><br><span class="line"><span class="comment">// 指定窗口计算函数</span></span><br><span class="line">.apply(&lt;JoinFunction&gt;)</span><br></pre></td></tr></table></figure></div><h5 id="处理迟到的元素"><a href="#处理迟到的元素" class="headerlink" title="处理迟到的元素"></a>处理迟到的元素</h5><p>迟到的元素是指当这个元素来到时,这个元素所对应的窗口已经计算完毕了(也就是说水位线已经没过窗口结束时间了).这说明迟到这个特性只针对事件时间.</p><p>DataStream API提供了三种策略来处理迟到元素</p><h6 id="直接抛弃"><a href="#直接抛弃" class="headerlink" title="直接抛弃"></a>直接抛弃</h6><p>抛弃迟到的元素是event time window operator的默认行为.也就是说一个迟到的元素不会创建一个新的窗口.</p><p>process function可以通过比较迟到元素的时间戳和当前水位线的大小来很轻易的过滤掉迟到元素.</p><h6 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h6><p>迟到的元素也可以使用侧输出(side output)特性被重定向到另外的一条流中去.迟到元素所组成的侧输出流可以继续处理或者sink到持久化设施中去.</p><h6 id="更新窗口计算结果"><a href="#更新窗口计算结果" class="headerlink" title="更新窗口计算结果"></a>更新窗口计算结果</h6><p>由于存在迟到的元素,所以已经计算出的窗口结果是不准确和不完全的.我们可以使用迟到元素更新已经计算完的窗口结果.</p><p>window operator API提供了方法来明确声明我们要等待迟到元素.当使用event-time window,我们可以指定一个时间段叫做<code>allowed lateness</code>.window operator如果设置了<code>allowed lateness</code>,这个window operator在水位线没过窗口结束时间时也将不会删除窗口和窗口中的状态.窗口会在一段时间内(allowed lateness设置的)保留所有的元素.</p><p>当迟到元素在<code>allowed lateness</code>时间内到达时,这个迟到元素会被实时处理并发送到触发器(trigger).当水位线没过了窗口结束时间+allowed lateness时间时,窗口会被删除,并且所有后来的迟到的元素都会被丢弃.</p><h4 id="State"><a href="#State" class="headerlink" title="State"></a>State</h4><p>官方文档有详细描述,这里不多赘述.</p><p><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/zh/dev/stream/state/state.html">https://ci.apache.org/projects/flink/flink-docs-release-1.11/zh/dev/stream/state/state.html</a></p><h4 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h4><p>Flink本身是批流统一的处理框架,所以Table API和SQL,就是批流统一的上层处理API.目前还在完善中,所以后面待完善.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Groovy"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">compileOnly <span class="string">&quot;org.apache.flink:flink-table-api-java-bridge_$&#123;scalaBinaryVersion&#125;:$&#123;flinkVersion&#125;&quot;</span></span><br><span class="line"><span class="comment">// 本地运行，线上lib已经包含，不需要引入</span></span><br><span class="line">compileOnly <span class="string">&quot;org.apache.flink:flink-table-planner-blink_$&#123;scalaBinaryVersion&#125;:$&#123;flinkVersion&#125;&quot;</span></span><br><span class="line"><span class="comment">// 自定义函数，线上lib已经包含，不需要引入</span></span><br><span class="line">compileOnly <span class="string">&quot;org.apache.flink:flink-table-common:$&#123;flinkVersion&#125;&quot;</span></span><br></pre></td></tr></table></figure></div><p><strong>未完待续…..</strong></p><h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><p><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/">apache flink</a></p><p><a href="https://github.com/apache/flink">github flink</a></p><p><a href="https://github.com/zhisheng17/flink-learning">github flink-learning</a></p><p><a href="https://github.com/CheckChe0803/flink-simple-tutorial">github flink-simple-tutorial</a></p><p><a href="https://confucianzuoyuan.github.io/flink-tutorial/">尚硅谷</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> middleware </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> Flink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker</title>
      <link href="2020/12/26/docker/"/>
      <url>2020/12/26/docker/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Docker是一个开源的<strong>容器引擎</strong>，它可以帮助我们更快地交付应用。Docker可将应用程序和基础设施层隔离，并且能将基础设施当作程序一样进行管理。使用Docker，可更快地打包、测试以及部署应用程序，并可<strong>减少从编写到部署运行代码的周期</strong>。</p><a id="more"></a><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>官网有详细的安装教程，然后配置下加速器即可，我这边使用<a href="https://cr.console.aliyun.com/cn-qingdao/instances/mirrors">阿里云的<code>docker</code>镜像加速器</a>。</p><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><h4 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查询镜像</span></span><br><span class="line">docker search nginx</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载镜像</span></span><br><span class="line">docker pull nginx</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出镜像</span></span><br><span class="line">docker images</span><br><span class="line">docker images java</span><br><span class="line">docker images java:8</span><br><span class="line">docker images --digests</span><br><span class="line">docker images --filter &quot;dangling=true&quot;   # 展示虚悬镜像</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除本地镜像</span></span><br><span class="line">docker rmi hello-world</span><br><span class="line">docker rmi -f $(docker images)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 保存镜像</span></span><br><span class="line">docker save busybox &gt; busybox.tar</span><br><span class="line">docker save --output busybox.tar busybox</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 加载镜像</span></span><br><span class="line">docker load &lt; busybox.tar.gz</span><br><span class="line">docker load --input fedora.tar</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 构建镜像</span></span><br><span class="line">docker build [OPTIONS] PATH | URL | -</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h4 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h4><h5 id="新建并启动容器-重要"><a href="#新建并启动容器-重要" class="headerlink" title="新建并启动容器[重要]"></a>新建并启动容器[重要]</h5><p>使用以下<code>docker run</code> 命令即可新建并启动一个容器。该命令是我们最常用的命令了，它有很多选项，下面笔者列举一些常用的选项。</p><p>① -d选项：表示后台运行</p><p>② -P选项：随机端口映射</p><p>③ -p选项：指定端口映射，有以下四种格式。</p><p><code>ip:hostPort:containerPort</code></p><p><code>ip::containerPort</code></p><p><code>hostPort:containerPort</code></p><p><code>containerPort</code></p><p>④ –network选项：指定网络模式，该选项有以下可选参数：</p><p><code>–network=bridge</code>： 默认选项，表示连接到默认的网桥。</p><p><code>–network=host</code>：容器使用宿主机的网络。</p><p><code>–network=container:NAME_or_ID</code>：告诉Docker让新建的容器使用已有容器的网络配置。</p><p><code>–network=none</code>：不配置该容器的网络，用户可自定义网络配置。</p><p>示例1：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run java /bin/echo &#x27;Hello World&#x27;</span><br></pre></td></tr></table></figure></div><p>这样终端会打印<code>Hello World</code>的字样，跟在本地直接执行<code>/bin/echo &#39;Hello World&#39;</code> 一样。</p><p>示例2：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 91:80 nginx</span><br></pre></td></tr></table></figure></div><p>这样就能启动一个<code>Nginx</code>容器。在本例中，我们为<code>docker run</code>添加了两个参数，含义如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-d                           # 后台运行-p 宿主机端口:容器端口         # 开放容器端口到宿主机端口</span><br></pre></td></tr></table></figure></div><p>访问<a href="http://docker宿主机ip:91/">http://Docker宿主机IP:91/</a> </p><p><strong>TIPS</strong></p><p>需要注意的是，使用docker run命令创建容器时，会先检查本地是否存在指定镜像。如果本地不存在该名称的镜像，Docker就会自动从Docker Hub下载镜像并启动一个Docker容器。</p><h5 id="列出容器-重要"><a href="#列出容器-重要" class="headerlink" title="列出容器[重要]"></a>列出容器[重要]</h5><p>使用<code>docker ps</code> 命令即可列出运行中的容器。执行该命令后，可看到类似于如下的表格。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                         NAMES784fd3b294d7        nginx               &quot;nginx -g &#39;daemon off&quot;   20 minutes ago      Up 2 seconds        443&#x2F;tcp, 0.0.0.0:91-&gt;80&#x2F;tcp   backstabbing_archimedes</span><br></pre></td></tr></table></figure></div><p>如需列出所有容器（包括已停止的容器），可使用-a参数。</p><p>该表格包含了七列，含义如下：</p><p>① CONTAINER_ID：表示容器ID。</p><p>② IMAGE：表示镜像名称。</p><p>③ COMMAND：表示启动容器时运行的命令。</p><p>④ CREATED：表示容器的创建时间。</p><p>⑤ STATUS：表示容器运行的状态。Up表示运行中，Exited表示已停止。</p><p>⑥ PORTS：表示容器对外的端口号。</p><p>⑦ NAMES：表示容器名称。该名称默认由Docker自动生成，也可使用docker run命令的–name选项自行指定。</p><p>命令格式：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps [OPTIONS]</span><br></pre></td></tr></table></figure></div><p>参数：</p><table><thead><tr><th align="left">Name, shorthand</th><th align="left">Default</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><code>--all, -a</code></td><td align="left"><code>false</code></td><td align="left">列出所有容器，包括未运行的容器，默认只展示运行的容器</td></tr><tr><td align="left"><code>--filter, -f</code></td><td align="left"></td><td align="left">根据条件过滤显示内容</td></tr><tr><td align="left"><code>--format</code></td><td align="left"></td><td align="left">通过Go语言模板文件展示镜像</td></tr><tr><td align="left"><code>--last, -n</code></td><td align="left"><code>-1</code></td><td align="left">显示最近创建n个容器（包含所有状态）</td></tr><tr><td align="left"><code>--latest, -l</code></td><td align="left"><code>false</code></td><td align="left">显示最近创建的容器（包含所有状态）</td></tr><tr><td align="left"><code>--no-trunc</code></td><td align="left"><code>false</code></td><td align="left">不截断输出</td></tr><tr><td align="left"><code>--quiet, -q</code></td><td align="left"><code>false</code></td><td align="left">静默模式，只展示容器的编号</td></tr><tr><td align="left"><code>--size, -s</code></td><td align="left"><code>false</code></td><td align="left">显示总文件大小</td></tr></tbody></table><p>示例：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -n 5docker ps -a -q</span><br></pre></td></tr></table></figure></div><h5 id="停止容器-重要"><a href="#停止容器-重要" class="headerlink" title="停止容器[重要]"></a>停止容器[重要]</h5><p>使用<code>docker stop</code> 命令，即可停止容器。</p><p>命令格式：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure></div><p>参数：</p><table><thead><tr><th align="left">Name, shorthand</th><th align="left">Default</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><code>--time, -t</code></td><td align="left"><code>10</code></td><td align="left">强制杀死容器前等待的时间，单位是秒</td></tr></tbody></table><p>示例：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 784fd3b294d7</span><br></pre></td></tr></table></figure></div><p>其中<code>784fd3b294d7</code> 是容器ID，当然也可使用<code>docker stop 容器名称</code> 来停止指定容器。</p><h5 id="强制停止容器-重要"><a href="#强制停止容器-重要" class="headerlink" title="强制停止容器[重要]"></a>强制停止容器[重要]</h5><p>可使用<code>docker kill</code> 命令停止一个或更多运行着的容器。</p><p>命令格式：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker kill [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure></div><p>参数：</p><table><thead><tr><th align="left">Name, shorthand</th><th align="left">Default</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><code>--signal, -s</code></td><td align="left"><code>KILL</code></td><td align="left">向容器发送一个信号</td></tr></tbody></table><p>例如：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker kill 784fd3b294d7</span><br></pre></td></tr></table></figure></div><h5 id="启动已停止的容器-重要"><a href="#启动已停止的容器-重要" class="headerlink" title="启动已停止的容器[重要]"></a>启动已停止的容器[重要]</h5><p>使用<code>docker run</code> 命令，即可新建并启动一个容器。对于已停止的容器，可使用<code>docker start</code> 命令来启动。</p><p>命令格式：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure></div><p>参数：</p><table><thead><tr><th align="left">Name, shorthand</th><th align="left">Default</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><code>--attach, -a</code></td><td align="left"><code>false</code></td><td align="left">连接<code>STDOUT/STDERR</code>并转发信号</td></tr><tr><td align="left"><code>--checkpoint</code></td><td align="left"></td><td align="left">从该检查点还原</td></tr><tr><td align="left"><code>--checkpoint-dir</code></td><td align="left"></td><td align="left">使用自定义的检查点存储目录</td></tr><tr><td align="left"><code>--detach-keys</code></td><td align="left"></td><td align="left">覆盖断开容器的关键顺序</td></tr><tr><td align="left"><code>--interactive, -i</code></td><td align="left"><code>false</code></td><td align="left">连接容器的<code>STDIN</code></td></tr></tbody></table><p>例如：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start 784fd3b294d7</span><br></pre></td></tr></table></figure></div><h5 id="重启容器-重要"><a href="#重启容器-重要" class="headerlink" title="重启容器[重要]"></a>重启容器[重要]</h5><p>可使用<code>docker restart</code> 命令来重启容器。该命令实际上是先执行了<code>docker stop</code> 命令，然后执行了<code>docker start</code> 命令。</p><p>命令格式：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure></div><p>参数：</p><table><thead><tr><th align="left">Name, shorthand</th><th align="left">Default</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><code>--time, -t</code></td><td align="left"><code>10</code></td><td align="left">关闭容器前等待的时间，单位是秒</td></tr></tbody></table><h5 id="进入容器-重要"><a href="#进入容器-重要" class="headerlink" title="进入容器[重要]"></a>进入容器[重要]</h5><p>某场景下，我们可能需要进入运行中的容器。</p><p>① 使用<code>docker attach</code> 命令进入容器。</p><p>例如：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker attach 784fd3b294d7</span><br></pre></td></tr></table></figure></div><p>很多场景下，使用<code>docker attach</code> 命令并不方便。当多个窗口同时attach到同一个容器时，所有窗口都会同步显示。同理，如果某个窗口发生阻塞，其他窗口也无法执行操作。</p><p>② 使用<code>nsenter</code> 进入容器</p><p><code>nsenter</code>工具包含在<code>util-linux 2.23</code>或更高版本中。为了连接到容器，我们需要找到容器第一个进程的<code>PID</code>，可通过以下命令获取：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect --format &quot;&#123;&#123;.State.Pid&#125;&#125;&quot; $CONTAINER_ID</span><br></pre></td></tr></table></figure></div><p>获得<code>PID</code>后，就可使用<code>nsenter</code>命令进入容器了：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nsenter --target &quot;$PID&quot; --mount --uts --ipc --net --pid</span><br></pre></td></tr></table></figure></div><p>下面给出一个完整的例子：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker psCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                         NAMES784fd3b294d7        nginx               &quot;nginx -g &#39;daemon off&quot;   55 minutes ago      Up 3 minutes        443&#x2F;tcp, 0.0.0.0:91-&gt;80&#x2F;tcp   backstabbing_archimedes[root@localhost ~]# docker inspect --format &quot;&#123;&#123;.State.Pid&#125;&#125;&quot; 784fd3b294d795492[root@localhost ~]# nsenter --target 95492 --mount --uts --ipc --net --pidroot@784fd3b294d7:&#x2F;#</span><br></pre></td></tr></table></figure></div><p>读者也可将以上两条命令封装成一个Shell，从而简化进入容器的过程。</p><p>③ docker exec</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 容器id &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure></div><h5 id="删除容器-重要"><a href="#删除容器-重要" class="headerlink" title="删除容器[重要]"></a>删除容器[重要]</h5><p>使用<code>docker rm</code> 命令即可删除指定容器。</p><p>命令格式</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure></div><p>参数：</p><table><thead><tr><th align="left">Name, shorthand</th><th align="left">Default</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><code>--force, -f</code></td><td align="left"><code>false</code></td><td align="left">通过<code>SIGKILL</code>信号强制删除正在运行中的容器</td></tr><tr><td align="left"><code>--link, -l</code></td><td align="left"><code>false</code></td><td align="left">删除容器间的网络连接</td></tr><tr><td align="left"><code>--volumes, -v</code></td><td align="left"><code>false</code></td><td align="left">删除与容器关联的卷</td></tr></tbody></table><p>例1：删除指定容器。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm 784fd3b294d7</span><br></pre></td></tr></table></figure></div><p>该命令只能删除已停止的容器，如需删除正在运行的容器，可使用-f参数。</p><p>例2：删除所有的容器。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f $(docker ps -a -q)</span><br></pre></td></tr></table></figure></div><h5 id="导出容器"><a href="#导出容器" class="headerlink" title="导出容器"></a>导出容器</h5><p>将容器导出成一个压缩包文件。</p><p>命令格式：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker export [OPTIONS] CONTAINER</span><br></pre></td></tr></table></figure></div><p>参数：</p><table><thead><tr><th align="left">Name, shorthand</th><th align="left">Default</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><code>--output, -o</code></td><td align="left"></td><td align="left">将内容写到文件而非<code>STDOUT</code></td></tr></tbody></table><p>示例：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker export red_panda &gt; latest.tardocker export --output&#x3D;&quot;latest.tar&quot; red_panda</span><br></pre></td></tr></table></figure></div><h5 id="导入容器"><a href="#导入容器" class="headerlink" title="导入容器"></a>导入容器</h5><p>使用<code>docker import</code> 命令即可从归档文件导入内容并创建镜像。</p><p>命令格式：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]</span><br></pre></td></tr></table></figure></div><p>参数：</p><table><thead><tr><th align="left">Name, shorthand</th><th align="left">Default</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><code>--change, -c</code></td><td align="left"></td><td align="left">将<code>Dockerfile</code>指令应用到创建的镜像</td></tr><tr><td align="left"><code>--message, -m</code></td><td align="left"></td><td align="left">为导入的镜像设置提交信息</td></tr></tbody></table><p>示例：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker import nginx2.tar nginx</span><br></pre></td></tr></table></figure></div><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><h4 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h4><h5 id="ADD-复制文件"><a href="#ADD-复制文件" class="headerlink" title="ADD 复制文件"></a>ADD 复制文件</h5><p>ADD复制文件</p><p>格式为：</p><ul><li><code>ADD &lt;src&gt;... &lt;dest&gt;</code></li><li><code>ADD [&quot;&lt;src&gt;&quot;,... &quot;&lt;dest&gt;&quot;]</code></li></ul><p>从<code>src</code>目录复制文件到容器的<code>dest</code>。其中<code>src</code>可以是<code>Dockerfile</code>所在目录的相对路径，也可以是一个URL，还可以是一个压缩包。</p><p>除了要复制解压文件，一般不建议使用，使用<code>RUN</code>跟<code>COPY</code>命令就可以很好替代。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Dockerfile"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ADD</span><span class="bash"> microservice-discovery-eureka-0.0.1-SNAPSHOT.jar app.jar</span></span><br></pre></td></tr></table></figure></div><h5 id="ARG-设置构建参数"><a href="#ARG-设置构建参数" class="headerlink" title="ARG 设置构建参数"></a>ARG 设置构建参数</h5><p>设置构建参数，类似于<code>ENV</code>。和<code>ENV</code>不同的是，<code>ARG</code>设置的是构建时的环境变量，在容器运行时是不会存在这些变量的。</p><p>格式为：</p><ul><li><code>ARG &lt;name&gt;[=&lt;default value&gt;]</code></li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Dockerfile"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ARG</span> user1=someuser</span><br></pre></td></tr></table></figure></div><h5 id="CMD-容器启动命令"><a href="#CMD-容器启动命令" class="headerlink" title="CMD 容器启动命令"></a>CMD 容器启动命令</h5><p>用于为执行容器提供默认值。每个<code>Dockerfile</code>只有一个<code>CMD</code>命令，如果指定了多个<code>CMD</code>命令，那么只有最后一条会被执行，如果启动容器的时候指定了运行的命令，则会覆盖掉<code>CMD</code>指定的命令。</p><p>支持三种格式：</p><p><code>CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</code> (推荐使用，会解析成json数组，所以要记得要用<strong>双引号</strong>)</p><p><code>CMD [&quot;param1&quot;,&quot;param2&quot;]</code> (为<code>ENTRYPOINT</code>指令提供预设参数)</p><p><code>CMD command param1 param2</code> (在shell中执行)</p><p>示例：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Dockerfile"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;This is a test.&quot;</span> | wc -</span></span><br></pre></td></tr></table></figure></div><h5 id="COPY-复制文件"><a href="#COPY-复制文件" class="headerlink" title="COPY 复制文件"></a>COPY 复制文件</h5><p>复制文件，格式为：</p><ul><li><code>COPY &lt;src&gt;... &lt;dest&gt;</code></li><li><code>COPY [&quot;&lt;src&gt;&quot;,... &quot;&lt;dest&gt;&quot;]</code></li></ul><p>复制本地端的<code>src</code>到容器的<code>dest</code>。<code>COPY</code>指令和<code>ADD</code>指令类似，<code>COPY</code>不支持URL和压缩包。</p><h5 id="ENTRYPOINT-入口点"><a href="#ENTRYPOINT-入口点" class="headerlink" title="ENTRYPOINT 入口点"></a>ENTRYPOINT 入口点</h5><p>格式为：</p><ul><li><code>ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code></li><li><code>ENTRYPOINT command param1 param2</code></li></ul><p><code>ENTRYPOINT</code>和<code>CMD</code>指令的目的一样，都是指定<code>Docker</code>容器启动时执行的命令，可多次设置，但只有最后一个有效。<code>ENTRYPOINT</code>不可被重写覆盖。</p><p><code>ENTRYPOINT</code>、<code>CMD</code>区别：<a href="http://blog.csdn.net/newjueqi/article/details/51355510">http://blog.csdn.net/newjueqi/article/details/51355510</a></p><h5 id="ENV-设置环境变量"><a href="#ENV-设置环境变量" class="headerlink" title="ENV 设置环境变量"></a>ENV 设置环境变量</h5><p>用于设置环境变量，格式为：</p><ul><li><code>ENV &lt;key&gt; &lt;value&gt;</code></li><li><code>ENV &lt;key&gt;=&lt;value&gt; ...</code></li></ul><p>示例：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Dockerfile"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENV</span> JAVA_HOME /path/to/java</span><br></pre></td></tr></table></figure></div><h5 id="EXPOSE-声明暴露的端口"><a href="#EXPOSE-声明暴露的端口" class="headerlink" title="EXPOSE 声明暴露的端口"></a>EXPOSE 声明暴露的端口</h5><p>用于声明在运行时容器提供服务的端口，格式为：</p><ul><li><code>EXPOSE &lt;port&gt; [&lt;port&gt;...]</code></li></ul><p>需要注意的是，这只是一个声明，运行时并不会因为该声明就打开相应端口。该指令的作用主要是帮助镜像使用者理解该镜像服务的守护端口；其次是当运行时使用随机映射时，会自动映射<code>EXPOSE</code>的端口。示例：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Dockerfile"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 声明暴露一个端口示例</span></span><br><span class="line"><span class="keyword">EXPOSE</span> port1</span><br><span class="line"><span class="comment"># 相应的运行容器使用的命令</span></span><br><span class="line">docker <span class="keyword">run</span><span class="bash"> -p port1 image</span></span><br><span class="line"><span class="comment"># 也可使用-P选项启动</span></span><br><span class="line">docker <span class="keyword">run</span><span class="bash"> -P image</span></span><br><span class="line"><span class="comment"># 声明暴露多个端口示例</span></span><br><span class="line"><span class="keyword">EXPOSE</span> port1 port2 port3</span><br><span class="line"><span class="comment"># 相应的运行容器使用的命令</span></span><br><span class="line">docker <span class="keyword">run</span><span class="bash"> -p port1 -p port2 -p port3 image</span></span><br><span class="line"><span class="comment"># 也可指定需要映射到宿主机器上的端口号  </span></span><br><span class="line">docker <span class="keyword">run</span><span class="bash"> -p host_port1:port1 -p host_port2:port2 -p host_port3:port3 image</span></span><br></pre></td></tr></table></figure></div><h5 id="FROM-指定基础镜像"><a href="#FROM-指定基础镜像" class="headerlink" title="FROM 指定基础镜像"></a>FROM 指定基础镜像</h5><p>指定基础镜像，<code>FROM</code>指令有点像<code>Java</code>里面的<code>extend</code>关键字。需要注意的是，<code>FROM</code>指令必须指定且需要写在其他指令之前。<code>FROM</code>指令后的所有指令都依赖于该指令所指定的镜像。</p><p>支持三种格式：</p><ul><li><code>FROM &lt;image&gt;</code></li><li><code>FROM &lt;image&gt;:&lt;tag&gt;</code></li><li><code>FROM &lt;image&gt;@&lt;digest&gt;</code></li></ul><h5 id="LABEL-为镜像添加元数据"><a href="#LABEL-为镜像添加元数据" class="headerlink" title="LABEL 为镜像添加元数据"></a>LABEL 为镜像添加元数据</h5><p>为镜像添加元数据。</p><p>格式为：</p><ul><li><code>LABEL &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...</code></li></ul><p>示例：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Dockerfile"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">LABEL</span><span class="bash"> <span class="string">&quot;com.example.vendor&quot;</span>=<span class="string">&quot;ACME Incorporated&quot;</span></span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> com.example.label-with-value=<span class="string">&quot;foo&quot;</span></span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> version=<span class="string">&quot;1.0&quot;</span></span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> description=<span class="string">&quot;This text illustrates \that label-values can span multiple lines.&quot;</span></span></span><br></pre></td></tr></table></figure></div><h5 id="MAINTAINER-指定维护者的信息（已过时）"><a href="#MAINTAINER-指定维护者的信息（已过时）" class="headerlink" title="MAINTAINER 指定维护者的信息（已过时）"></a>MAINTAINER 指定维护者的信息（已过时）</h5><p>MAINTAINER指令用于指定维护者的信息，用于为<code>Dockerfile</code>署名。</p><p>格式为：</p><ul><li><code>MAINTAINER &lt;name&gt;</code></li></ul><p>示例：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Dockerfile"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">MAINTAINER</span> 周立&lt;eacdy0000@<span class="number">126</span>.com&gt;</span><br></pre></td></tr></table></figure></div><p>注：该指令已过时，建议使用如下形式：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Dockerfile"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer=<span class="string">&quot;SvenDowideit@home.org.au&quot;</span></span></span><br></pre></td></tr></table></figure></div><h5 id="RUN-执行命令"><a href="#RUN-执行命令" class="headerlink" title="RUN 执行命令"></a>RUN 执行命令</h5><p>该指令支持两种格式：</p><ul><li><code>RUN &lt;command&gt;</code></li><li><code>RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code></li></ul><p><code>RUN &lt;command&gt;</code> 在<code>shell</code>终端中运行，在<code>Linux</code>中默认是<code>/bin/sh -c</code> ，在<code>Windows</code>中是 <code>cmd /s /c</code>，使用这种格式，就像直接在命令行中输入命令一样。<br><code>RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code> 使用exec执行，这种方式类似于函数调用。指定其他终端可以通过该方式操作，例如：<code>RUN [&quot;/bin/bash&quot;, &quot;-c&quot;, &quot;echo hello&quot;]</code> ，该方式必须使用双引号[“]而不能使用单引号[‘]，因为该方式会被转换成一个<code>JSON</code> 数组。</p><h5 id="USER-设置用户"><a href="#USER-设置用户" class="headerlink" title="USER 设置用户"></a>USER 设置用户</h5><p>该指令用于设置启动镜像时的用户或者<code>UID</code>，写在该指令后的<code>RUN</code>、<code>CMD</code>以及<code>ENTRYPOINT</code>指令都将使用该用户执行命令。</p><p>格式为：</p><ul><li><code>USER 用户名</code></li></ul><p>示例：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USER daemon</span><br></pre></td></tr></table></figure></div><h5 id="VOLUME-指定挂载点"><a href="#VOLUME-指定挂载点" class="headerlink" title="VOLUME 指定挂载点"></a>VOLUME 指定挂载点</h5><p>该指令使容器中的一个目录具有持久化存储的功能，该目录可被容器本身使用，也可共享给其他容器。当容器中的应用有持久化数据的需求时可以在<code>Dockerfile</code>中使用该指令。格式为：</p><ul><li><code>VOLUME [&quot;/data&quot;]</code></li></ul><p>示例：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VOLUME &#x2F;data</span><br></pre></td></tr></table></figure></div><p>使用示例：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FROM nginxVOLUME &#x2F;tmp</span><br></pre></td></tr></table></figure></div><p>当该<code>Dockerfile</code>被构建成镜像后，<code>/tmp</code>目录中的数据即使容器关闭也依然存在。如果另一个容器也有持久化的需求，并且想使用以上容器<code>/tmp</code>目录中的内容，则可使用如下命令启动容器：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -volume-from 容器ID 镜像名称  # 容器ID是di一个容器的ID，镜像是第二个容器所使用的镜像。</span><br></pre></td></tr></table></figure></div><h5 id="WORKDIR-指定工作目录"><a href="#WORKDIR-指定工作目录" class="headerlink" title="WORKDIR 指定工作目录"></a>WORKDIR 指定工作目录</h5><p>格式为：</p><ul><li><code>WORKDIR /path/to/workdir</code></li></ul><p>切换目录指令，类似于<code>cd</code>命令，写在该指令后的<code>RUN</code>，<code>CMD</code>以及<code>ENTRYPOINT</code>指令都将该目录作为当前目录，并执行相应的命令。</p><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><p><code>Dockerfile</code>还有一些其他的指令，例如<code>STOPSINGAL</code>、<code>HEALTHCHECK</code>、<code>SHELL</code>等。由于并不是很常用，本书不作赘述。有兴趣的读者可前往<a href="https://docs.docker.com/engine/reference/builder/">https://docs.docker.com/engine/reference/builder/</a> 扩展阅读。</p><p><strong>CMD/ENTRYPOINT/RUN区别</strong></p><p>参考：<a href="https://segmentfault.com/q/1010000000417103">https://segmentfault.com/q/1010000000417103</a></p><h4 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h4><h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><p><a href="https://www.docker.com/">Docker官方网站</a></p><p><a href="https://github.com/docker/docker">Docker GitHub</a></p><p><a href="https://yeasy.gitbook.io/docker_practice">Docker 入门到实践</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> soft </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>物种起源（全英文）</title>
      <link href="2020/12/26/acid/"/>
      <url>2020/12/26/acid/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Primitive-earth"><a href="#Primitive-earth" class="headerlink" title="Primitive earth"></a>Primitive earth</h1><p>You would think, there is a genetic molecule called DNA in each of our cells? So, is there any genetic molecule before DNA? My answer is: “Yes.” In ancient Earth, there are countless volcanoes on the sea floor. On both sides of the erupting crater are hot magma spewing out and the “deep sea black chimneys” produced by the instant solidification of the cold sea water. The size of the gap formed by these substances is exactly one. The cell is so big, how come you say it is so coincidental? They are organic compounds formed by hydration of sulfide in seawater and carbon dioxide in seawater. but! When we think about it carefully, we will find that the black smoke emitted by the “deep sea black chimney” is generally alkaline, but the sea water is acidic, and the strong acid-base reaction cannot bring about organic matter! However, the deep-sea black chimney cannot be composed of a single mineral! The water comes very violently, and it is very irregular. It is a flood. When the water comes in order, electricity can be generated. If there is a film between the acid and alkali to neutralize this strong reaction, then it becomes subtle, and it happens to form the black chimney minerals such as Say: “Iron, sulfur, nickel…” Such minerals can slowly and orderly release the strong stimulation produced by this acid and alkali, and produce organic matter. So far, the earliest appeared in the oceans of the primitive earth. A batch of “life” is such organic matter, nourishing the underwater world.but! This “life” can only be said to be “life”. From the theories given above, we can see that there are volcanic activity, organic matter, and “life” on the sea floor. These “life” are just rock gaps. Yes, you If you read it right, it is the rock gap. To put it simply, the rock gap is a cell. Here, you can imagine that there are countless black chimneys in the ocean of the primitive earth, and each chimney is filled with countless rock cells. However, since it is a primitive earth with submarine volcanoes, magma is definitely indispensable. The magma has a high temperature of 400 degrees Celsius, but the outside of the magma is cold sea water. The magma erupts from the crater and is instantly solidified to form black smoke. These rock cells have been given heat by magma. In the billions of years of sadness, they have synthesized various macromolecules. Finally, a special kind of rock cells have synthesized a special biological macromolecule RNA.</p><h1 id="RNA"><a href="#RNA" class="headerlink" title="RNA"></a>RNA</h1><p> RNA, or ribonucleic acid, is a nucleic acid that is similar in structure to DNA but different in subtle ways. The cell uses RNA for a number of different tasks, one of which is called messenger RNA, or mRNA. And that is the nucleic acid information molecule that transfers information from the genome into proteins by translation. Another form of RNA is tRNA, or transfer RNA, and these are non-protein encoding RNA molecules that physically carry amino acids to the translation site that allows them to be assembled into chains of proteins in the process of translation.We all know what function the cell has, ah! Yes, split reproduction, RNA molecules also come to play this set, it will replicate itself! As a result, every RNA biological macromolecule begins to replicate itself, one produces 2, 2 produces 3, and 3 all things! In this way, RNA biological macromolecules keep replicating, and this rock cell has life! However, some mistakes occurred during the replication of some RNA macromolecules, causing the offspring to be different from themselves. This is the earliest mutation and inheritance. Slowly, every large RNA molecule will pass through the cracks in the rock to reach another rock cell, and then replicate and absorb their organic matter. In this way, day after day, year after year, the rock cell of this black chimney There is life! Slowly, from pyruvate (C3H4O3) to acetyl-CoA (CoA), from triphosphate triadenosine (APT) to nicotinamide adenine dinucleotide (NADH), an important organic molecule is Included in each life, DNA with good chemical stability finally replaced RNA as a carrier of genetic information, proteins with good catalytic properties were given the responsibility of manipulating biochemical reactions, and RNA controls every aspect of life An important part of this is that these small molecules control the most basic part of life, and in the next billions of years, it will evolve on this basis. But among so many cells, only one is our common ancestor-Luca (LUCA)…</p>]]></content>
      
      
      <categories>
          
          <category> Biological </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Biological </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>live2d-web</title>
      <link href="2020/12/26/2/"/>
      <url>2020/12/26/2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="snote quote"><p class='p subtitle'>转载于</p>  隔壁Yun主题的猫九。</div>萌萌哒的看板娘，以下资源来源于互联网，最底下会给出相关链接，[github示例](https://github.com/jianchengwang/live2d_models)<a id="more"></a><hr><h3 id="使用方法-moc"><a href="#使用方法-moc" class="headerlink" title="使用方法  moc"></a>使用方法  moc</h3><h4 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Shell"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入hexo根目录</span></span><br><span class="line">cd hexo-dir</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装hexo-helper-live2d</span></span><br><span class="line">npm install --save hexo-helper-live2d</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建目录live2d_models</span></span><br><span class="line">mkdir live2d_models</span><br><span class="line"><span class="meta">#</span><span class="bash"> 把模型文件放进创建目录live2d_models，比如我这边下载的是index模型</span></span><br><span class="line">cd live2d_models &amp;&amp; wget index </span><br><span class="line"><span class="meta">#</span><span class="bash">重命名模型文件中的json文件，比如我下载的模型是index，所以model.json -&gt; index.model.json</span></span><br><span class="line">cd index </span><br><span class="line">mv model.json index.model.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改配置文件</span></span><br><span class="line">vim hexo-dir/_config.yml </span><br><span class="line">live2d:</span><br><span class="line">   enable: true # 是否开启live2d</span><br><span class="line">   scriptFrom: local # 脚本从本地引入</span><br><span class="line">   pluginRootPath: live2dw/ # 插件在站点上的根目录(相对路径)</span><br><span class="line">   pluginJsPath: lib/ # 脚本文件相对与插件根目录路径</span><br><span class="line">   pluginModelPath: assets/ # 模型文件相对与插件根目录路径</span><br><span class="line">   tagMode: false # 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span><br><span class="line">   debug: false # 调试, 是否在控制台输出日志</span><br><span class="line">   model:</span><br><span class="line">       use: index # 填写放进live2d_models文件夹中的模型文件夹名字</span><br><span class="line">       scale: 1 # canvas 模型与canvas的缩放</span><br><span class="line">   display:</span><br><span class="line">       width: 150 # 宽度</span><br><span class="line">       height: 300 # 高度</span><br><span class="line">       position: left # 显示位置</span><br><span class="line">       hOffset: 0 #水平偏移</span><br><span class="line">       vOffset: -20 #垂直偏移</span><br><span class="line">   mobile:</span><br><span class="line">       show: true # 手机端是否显示</span><br><span class="line">       scale: 0.5 # 移动设备上的缩放</span><br></pre></td></tr></table></figure></div><h4 id="Typecho"><a href="#Typecho" class="headerlink" title="Typecho"></a>Typecho</h4><p>下载<a href="https://github.com/Dreamer-Paul/Pio">保罗的看板娘插件</a>，并上传到你的插件目录（一般为 <code>usr/plugins</code>）。进入你的网站后台，在顶部的“控制台”下找到“插件” -&gt; Pio -&gt; 启用。启用之后我们就可以开始设置啦！</p><p><strong>引用模型</strong></p><p>插件默认提供两种方式引用模型，一个是读取插件指定目录下的模型，还有一个是另外引用。对于新手，我们比较推荐放在插件目录的 <code>model</code> 文件夹下。只要你在本站下载模型，都已经为这个插件专门做过一定的优化处理啦。</p><p><strong>显示不全？</strong></p><p>待我们放好模型之后可能会发现，模型显示不太齐全。这是由于高宽度设置不正确导致的~ 由于插件默认的模型是 <code>Pio</code>，而其他模型的比例和它不同，所以我们就需要在插件目录下手动设置它的宽度和高度啦！这样我们的模型就能正常显示出来了！</p><p><strong>遮住内容？</strong></p><p>如果你用的主题默认在左侧有侧边栏，发现模型遮住了菜单，那么我们就可以在插件设置里面修改它的位置，这样就可以遮住你的内容啦！</p><p>更多介绍详见：<a href="https://paugram.com/coding/add-poster-girl-with-plugin.html">给你的博客增加动态看板娘</a></p><h4 id="EmLog"><a href="#EmLog" class="headerlink" title="EmLog"></a>EmLog</h4><p>详见广树的文章 - <a href="https://www.wikimoe.com/?post=76">博客通用版 Live2D 伊斯特瓦尔发布</a></p><h4 id="其他平台"><a href="#其他平台" class="headerlink" title="其他平台"></a>其他平台</h4><p>其他平台可以通过修改插件或是修改模板的方式引用看板娘。这里的方法适用于 WordPress、EMLog、Z-Blog 甚至是静态网站。</p><blockquote><p>保罗的 <a href="https://docs.paul.ren/pio">插件文档</a> 里已经提供了完整的独立版使用教程，你可以在不使用插件的情况下正常食用看板娘。以下方法仅简单引用了看板娘，但并不包含交互功能。</p></blockquote><p>下载 <a href="https://github.com/journey-ad/live2d_src">来自玩水大佬的封装</a> 项目，我们会在 <code>src/lib</code> 目录下得到一个 <code>live2d.min.js</code> 。这个就是核心啦！</p><p>然后在你的网页上添加一个 <code>canvas</code> 画布，一般放在 <code>footer.php</code> 即页尾文件里面。一般写成这样：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas id&#x3D;&quot;paul&quot; width&#x3D;&quot;280&quot; height&#x3D;&quot;250&quot;&gt;&lt;&#x2F;canvas&gt;</span><br></pre></td></tr></table></figure></div><p>其中 <code>id</code> 部分负责让脚本获得画布的位置，<code>width</code> 和 <code>height</code> 分别是宽度和高度，在这里设置你的模型宽高。</p><p>然后我们就需要引用这个 JS 文件啦！方法也很简单，你把这个文件放在合适的位置，或是用 CDN 引用皆可。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;live2d.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></div><blockquote><p>注意：要确认画布放在 <code>&lt;script&gt;</code> 的前面！</p></blockquote><p>接着我们再通过一段简单的代码来开始引用我们的模型：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;loadlive2d(&#39;paul&#39;, &#39;模型路径&#x2F;model.json&#39;);&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></div><p>这样我们的网站上，就显示出自己的看板娘啦！</p><p>细心的你肯定会发现，看板娘被放在了正常的位置显示了出来，而不是 “悬挂” 在页面的某个位置。我们通过添加一段简单的 CSS 就可以做到了！</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#paul&#123;</span><br><span class="line">    left: 0;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    z-index: 520; &#x2F;* 如果模型被遮住可以把它改的更大 *&#x2F;</span><br><span class="line">    position: fixed;</span><br><span class="line">    pointer-events: none; &#x2F;* 防止遮住鼠标点击页面其他内容 *&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>于是我们网站上就有了自己的看板娘啦！</p><hr><h3 id="使用方法-moc3"><a href="#使用方法-moc3" class="headerlink" title="使用方法 moc3"></a>使用方法 moc3</h3><p>参考</p><p><a href="https://github.com/HCLonely/Live2dV3">https://github.com/HCLonely/Live2dV3</a></p><p><a href="https://github.com/Yukariin/AzurLaneL2DViewer">https://github.com/Yukariin/AzurLaneL2DViewer</a></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Html"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!------ 位置可自定义 ------&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;Canvas&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position: fixed; right: 10px; bottom: 10px;z-index: 99999999&quot;</span> <span class="attr">id</span>=<span class="string">&quot;L2dCanvas&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Pollyfill script --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/core-js-bundle@3.6.1/minified.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Live2DCubismCore script --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">&quot;https://cubism.live2d.com/sdk-web/cubismcore/live2dcubismcore.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Build script --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">&quot;./assets/js/live2dv3.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!------ 加载Live2d模型 | Load Live2d model ------&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> l2dv;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.onload = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    l2dv = <span class="keyword">new</span> L2dViewer(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="built_in">document</span>.getElementById(<span class="string">&#x27;L2dCanvas&#x27;</span>),</span></span><br><span class="line"><span class="javascript">        modelHomePath: <span class="string">&#x27;./assets/model/moc3/&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// modelHomePath: &#x27;https://cdn.jsdelivr.net/gh/alg-wiki/AzurLaneL2DViewer@gh-pages/assets/&#x27;,</span></span></span><br><span class="line"><span class="javascript">        model: <span class="string">&#x27;yichui_2&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// bgImg: &#x27;https://cdn.jsdelivr.net/gh/alg-wiki/AzurLaneL2DViewer@gh-pages/assets/bg/bg_church_jp.png&#x27;,</span></span></span><br><span class="line"><span class="javascript">        bgImg: <span class="string">&#x27;./assets/image/bg/bg_1.png&#x27;</span>,</span></span><br><span class="line">        width: 500,</span><br><span class="line">        height: 300,</span><br><span class="line"><span class="javascript">        autoMotion: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">        _finishedLoadModel: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> motionDiv = <span class="built_in">document</span>.getElementById(<span class="string">&quot;motionDiv&quot;</span>); </span></span><br><span class="line"><span class="javascript">          motionDiv.innerHTML = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">          l2dv.getMotions().forEach(<span class="function">(<span class="params">v,k</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> motionName = k;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(motionName.startsWith(<span class="string">&#x27;motions/&#x27;</span>)) &#123;</span></span><br><span class="line"><span class="javascript">              motionName = motionName.replace(<span class="string">&#x27;motions/&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            motionName = motionName.replace(<span class="string">&#x27;.motion3.json&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> bt = <span class="built_in">document</span>.createElement(<span class="string">&quot;button&quot;</span>);</span></span><br><span class="line">            bt.innerHTML = motionName; </span><br><span class="line"><span class="javascript">            bt.classList.add(<span class="string">&#x27;btnGenericText&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            bt.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;                          <span class="comment">//绑定点击事件</span></span></span><br><span class="line">              l2dv.startMotion(k);</span><br><span class="line">            &#125;;</span><br><span class="line">            motionDiv.appendChild(bt);</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        _onTap: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 点击canvas触发事件</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div><hr><table><thead><tr><th align="center">参数</th><th align="center">类型</th><th align="center">描述</th><th align="center">默认</th></tr></thead><tbody><tr><td align="center"><code>el</code></td><td align="center">[必需] DOM 对象或 jQuery 对象</td><td align="center">要挂载Live2d模型的元素, 支持DOM选择器和jQuery选择器，例：<code>document.getElementById(&#39;L2dCanvas&#39;)</code>或<code>document.querySelector(&#39;#L2dCanvas&#39;)</code>或<code>$(&#39;#L2dCanvas&#39;)</code></td><td align="center"><code>null</code></td></tr><tr><td align="center"><code>modelHomePath</code></td><td align="center">[必需] String</td><td align="center">模型根目录</td><td align="center">null</td></tr><tr><td align="center"><code>model</code></td><td align="center">[必需] String</td><td align="center">初始显示模型</td><td align="center">null</td></tr><tr><td align="center"><code>bgImg</code></td><td align="center">[可选] String</td><td align="center">Canvas背景图片，有图片的话，Canvas的宽高会等于背景图片宽高</td><td align="center">null</td></tr><tr><td align="center"><code>width</code></td><td align="center">[可选] Number</td><td align="center">Canvas宽度，单位: <code>px</code></td><td align="center">500</td></tr><tr><td align="center"><code>height</code></td><td align="center">[可选] Number</td><td align="center">Canvas高度，单位: <code>px</code></td><td align="center">00</td></tr><tr><td align="center"><code>autoMotion</code></td><td align="center">[可选] Boolean</td><td align="center">是否自动随机触发Motion                    true</td><td align="center"></td></tr><tr><td align="center">_finishedLoadModel</td><td align="center">[可选] Function</td><td align="center">模型加载完回调函数                      null</td><td align="center"></td></tr><tr><td align="center"><code>_onTap</code></td><td align="center">[可选] Function</td><td align="center">点击模型触发函数，为空的话会默认触发随机Motion        null</td><td align="center"></td></tr></tbody></table><hr><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Js"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// L2dViewer 对外暴露的方法</span></span><br><span class="line"><span class="comment">// 获取模型信息</span></span><br><span class="line">public getModel(): LAppModel &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 加载模型</span></span><br><span class="line">public <span class="function"><span class="title">loadModel</span>(<span class="params">modelName: string</span>)</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 触发模型 motion</span></span><br><span class="line">public <span class="function"><span class="title">startMotion</span>(<span class="params">motionName: string</span>)</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取模型 motion</span></span><br><span class="line">public getMotions(): <span class="built_in">Map</span>&lt;any,any&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置模型背景</span></span><br><span class="line">public <span class="function"><span class="title">setBgImg</span>(<span class="params">bgImg: string</span>)</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><hr><p>当然，你感兴趣的话，并且有一定的前端基础，建议自己构建 <strong>live2dv3.js</strong>，可以下载官方提供的<a href="https://www.live2d.com/download/cubism-sdk/">Live2d Web Sdk</a>，里面已经包含一个简单示例了，</p><p><strong>lappdefine.ts</strong>  定义基本的参数<br><strong>lappdelegate.ts</strong> 初始化,释放资源,事件绑定<br><strong>lapplive2dmanager.ts</strong> 模型的管理类,进行模型生成和废弃,事件的处理,模型切换.<br><strong>lappmodel.ts</strong> 模型类,定义模型的基本属性<br><strong>lappal.ts</strong> 读取文件,抽象文件数据(算是工具类)<br><strong>lappsprite.ts</strong> 动画精灵类,(有h5游戏开发应该了解)<br><strong>lapptexturemanager.ts</strong> 纹理管理类,进行图像读取和管理的类<br><strong>lappview.ts</strong> 视图类,生成模型的图像被lapplive2dmanager管理<br><strong>main.ts</strong> 主程序启动程序<br><strong>touchmanager.ts</strong> 事件的管理类(比如移动鼠标,点击鼠标,触摸屏触碰等)</p><p>简单修改下就可以了，也可以参照我的<a href="https://github.com/jianchengwang/todo-web/raw/master/live2d-web">demo代码</a></p><h3 id="模型预览"><a href="#模型预览" class="headerlink" title="模型预览"></a>模型预览</h3><h4 id="梦象网站资源-moc"><a href="#梦象网站资源-moc" class="headerlink" title="梦象网站资源 moc"></a>梦象网站资源 moc</h4><h5 id="茵蒂克丝-index"><a href="#茵蒂克丝-index" class="headerlink" title="茵蒂克丝 index"></a>茵蒂克丝 index</h5><p><img src="https://github.com/jianchengwang/live2d_models/raw/main/_model_images/index.jpg"></p><p>动漫《魔法禁书目录》中女主角。有着银色的长发、绿色的眼瞳、雪白的肌肤，年龄约十四五岁，却有着可爱的幼儿体型。</p><p>模型作者：未知<br>模型出处：网络搜集</p><hr><h5 id="尤莉-youri"><a href="#尤莉-youri" class="headerlink" title="尤莉 youri"></a>尤莉 youri</h5><p><img src="https://github.com/jianchengwang/live2d_models/raw/main/_model_images/youri.jpg"></p><p>尤莉是由 つくみず 创作的漫画《少女终末旅行》及其衍生作品中的登场角色。性格极度乐观，非常喜欢吃东西。</p><p>模型作者：罐装猫粮君<br>模型出处：<a href="https://www.bilibili.com/video/av17779694">【Live2D工房】Vol.1 Part2 尤 脸扁再来一份 《少女终末旅行》</a></p><hr><h5 id="雪未来-snow-miku"><a href="#雪未来-snow-miku" class="headerlink" title="雪未来 snow_miku"></a>雪未来 snow_miku</h5><p><img src="https://github.com/jianchengwang/live2d_models/raw/main/_model_images/snow_miku.jpg"></p><p>雪未来是 Crypton 旗下虚拟歌手初音未来的二次创作系列造型，民间有时称其为 “雪初音” 或 “雪 MIKU”。自 2010 年被确立为日本北海道札幌冰雪节的应援角色。自 2012 年起，每年会以网络征集投票的形式决定新的雪未来人物形象。</p><p>模型作者：未知<br>模型出处：网络搜集</p><p>推荐设置：</p><p>宽度：300<br>高度：300</p><hr><h5 id="凉风青叶-aoba"><a href="#凉风青叶-aoba" class="headerlink" title="凉风青叶 aoba"></a>凉风青叶 aoba</h5><h5 id=""><a href="#" class="headerlink" title=""></a><img src="https://github.com/jianchengwang/live2d_models/raw/main/_model_images/aoba.jpg"></h5><p>来自 New Game! 的凉风青叶和你见面啦！</p><p>推荐设置：</p><p>高度：250<br>宽度：200</p><hr><h5 id="工作中的血小板-platelet"><a href="#工作中的血小板-platelet" class="headerlink" title="工作中的血小板 platelet"></a>工作中的血小板 platelet</h5><p><img src="https://github.com/jianchengwang/live2d_models/raw/main/_model_images/platelet.jpg"></p><p>模型作者：Neko_KK<br>模型出处：Live2DViewer 创意工坊</p><hr><h5 id="干物妹小埋-umaru"><a href="#干物妹小埋-umaru" class="headerlink" title="干物妹小埋 umaru"></a>干物妹小埋 umaru</h5><p><img src="https://github.com/jianchengwang/live2d_models/raw/main/_model_images/umaru.jpg"></p><p>模型作者：未知<br>模型出处：未知</p><p>推荐设置：</p><p>高度：300<br>宽度：100</p><h5 id="和泉纱雾-sagiri"><a href="#和泉纱雾-sagiri" class="headerlink" title="和泉纱雾 sagiri"></a>和泉纱雾 sagiri</h5><p><img src="https://github.com/jianchengwang/live2d_models/raw/main/_model_images/sagiri.jpg"></p><p>模型作者：oukaitou<br>模型出处：Live2DViewer 创意工坊</p><p>推荐设置：</p><p>高度：500<br>宽度：默认</p><h5 id="康娜-kanna"><a href="#康娜-kanna" class="headerlink" title="康娜 kanna"></a>康娜 kanna</h5><p><img src="https://github.com/jianchengwang/live2d_models/raw/main/_model_images/kanna.jpg"></p><p>模型作者：oukaitou<br>模型出处：Live2DViewer 创意工坊</p><hr><h5 id="时崎狂三-kurumi"><a href="#时崎狂三-kurumi" class="headerlink" title="时崎狂三 kurumi"></a>时崎狂三 kurumi</h5><p><img src="https://github.com/jianchengwang/live2d_models/raw/main/_model_images/kurumi.jpg"></p><p>模型作者：未知<br>模型出处：约会大作战手游官网</p><hr><h5 id="雷姆-rem"><a href="#雷姆-rem" class="headerlink" title="雷姆 rem"></a>雷姆 rem</h5><p><img src="https://github.com/jianchengwang/live2d_models/raw/main/_model_images/rem.jpg"></p><p>提取自 <a href="https://github.com/eeg1412/Live2dRem">广树的项目</a>。</p><p>推荐设置：</p><p>高度：275<br>宽度：230</p><p>高度：335<br>宽度：280</p><hr><h5 id="香风智乃-chino"><a href="#香风智乃-chino" class="headerlink" title="香风智乃 chino"></a>香风智乃 chino</h5><p><img src="https://github.com/jianchengwang/live2d_models/raw/main/_model_images/chino.jpg"></p><p>香风智乃，漫画《请问您今天要来点兔子吗？》中及其衍生作品中女主角之一。咖啡店 Rabbit House 老板的孙女，13 岁的初中生。身形娇小却意外地能干，店内杂务也几乎由她一手包办，个性冷静又沉默寡言，但其实是在人际交往上有点笨拙。</p><p>模型作者：Hernes_VR<br>模型出处：FaceRig 创意工坊</p><hr><h5 id="鹿目圆-madoka"><a href="#鹿目圆-madoka" class="headerlink" title="鹿目圆 madoka"></a>鹿目圆 madoka</h5><p><img src="https://github.com/jianchengwang/live2d_models/raw/main/_model_images/madoka.jpg"></p><p>鹿目圆是原创动画《魔法少女小圆》及其衍生作品中主角。就读于市立见泷原中学二年级的一位普通初中生。个头小巧可爱，性格温柔且为朋友着想。因为本身的潜质，而成为魔法少女。后成为神，消失在世界上。</p><p>模型作者：未知<br>模型出处：网络搜集</p><p>推荐设置：</p><p>高度：300<br>宽度：230</p><hr><h5 id="22-娘全身版"><a href="#22-娘全身版" class="headerlink" title="22 娘全身版"></a>22 娘全身版</h5><p><img src="https://github.com/jianchengwang/live2d_models/raw/main/_model_images/22.jpg"></p><p>22 娘是娱乐向弹幕视频站点 Bilibili 的吉祥物。阳光元气娘，火拼有精神。对人热情、热心，但有些冒失。</p><p>模型作者：未知<br>模型出处：网络搜集</p><p>推荐设置：</p><p>高度：400<br>宽度：150</p><hr><h5 id="涅普迪努-neptune"><a href="#涅普迪努-neptune" class="headerlink" title="涅普迪努 neptune"></a>涅普迪努 neptune</h5><p><img src="https://github.com/jianchengwang/live2d_models/raw/main/_model_images/neptune.jpg"></p><p>涅普迪努，又称 “涅普顿”。是《超次元游戏：海王星》等海王星系列游戏中紫色大陆 Planeptune 的守护女神。性格乐天、天真浪漫，很擅长调节气氛。有时会从女神的工作中翘班，经常懒懒的，但因为天生的性格原因，仍然受到周围人的欢迎。</p><p>模型作者：未知<br>模型出处：网络搜集</p><hr><h4 id="Eikanya提取-moc3"><a href="#Eikanya提取-moc3" class="headerlink" title="Eikanya提取 moc3"></a>Eikanya提取 moc3</h4><p>这个大佬提取了很多，所以这里只列出我喜欢的部分模型，<a href="https://jianchengwang.github.io/live2d_models/">在线预览</a></p><h5 id="yichui-2"><a href="#yichui-2" class="headerlink" title="yichui_2"></a>yichui_2</h5><p><img src="https://github.com/jianchengwang/live2d_models/raw/main/_model_images/yichui_2.jpg"></p><hr><h5 id="dujiaoshou-6"><a href="#dujiaoshou-6" class="headerlink" title="dujiaoshou_6"></a>dujiaoshou_6</h5><p><img src="https://github.com/jianchengwang/live2d_models/raw/main/_model_images/dujiaoshou_6.jpg"></p><hr><h3 id="资源来源"><a href="#资源来源" class="headerlink" title="资源来源"></a>资源来源</h3><p><a href="https://www.live2d.com/zh-CHS/">Live2d官网</a></p><p><a href="https://mx.paugram.com/">梦象 Live2D 模型站</a></p><p><a href="https://github.com/Eikanya/Live2d-model">Eikanya/Live2d-model</a></p><p><a href="https://l2d.alg-wiki.com/">Azur Lane Live2D Viewer</a></p><p><a href="https://minhaskamal.github.io/DownGit/#/home">DownGit</a></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
          <category> live2d </category>
          
      </categories>
      
      
        <tags>
            
            <tag> live2d </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/12/26/hello-world/"/>
      <url>2020/12/26/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Bash"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Bash"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Bash"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Bash"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Toss Note </category>
          
          <category> HEXO </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>搞黄色是有科学依据的？</title>
      <link href="2020/12/23/%E6%90%9E%E9%BB%84%E8%89%B2%E6%98%AF%E6%9C%89%E7%A7%91%E5%AD%A6%E4%BE%9D%E6%8D%AE%E7%9A%84%EF%BC%9F/"/>
      <url>2020/12/23/%E6%90%9E%E9%BB%84%E8%89%B2%E6%98%AF%E6%9C%89%E7%A7%91%E5%AD%A6%E4%BE%9D%E6%8D%AE%E7%9A%84%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p style="color: #ffeb3b;">学习新思想，争做新青年</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文基于化学，物理，生物，<strong>Tong老师的染发技巧</strong>。化学中的电子跃迁，物理中的光色散。生物学中的眼睛。</p><h1 id="为什么世间的万物的本质都是黄色？"><a href="#为什么世间的万物的本质都是黄色？" class="headerlink" title="为什么世间的万物的本质都是黄色？"></a>为什么世间的万物的本质都是黄色？</h1><p>在弄清楚这个问题前，先搞清楚<strong>什么是黄色？</strong></p><h2 id="什么是黄色？"><a href="#什么是黄色？" class="headerlink" title="什么是黄色？"></a>什么是黄色？</h2><p>颜色词，给人愉快，充满希望和活力的感觉。<strong>黄色</strong>是<a href="https://baike.baidu.com/item/%E7%94%B5%E7%A3%81%E6%B3%A2/102449">电磁波</a>的<a href="https://baike.baidu.com/item/%E5%8F%AF%E8%A7%81%E5%85%89/1241853">可见光</a>部分中的<a href="https://baike.baidu.com/item/%E4%B8%AD%E9%A2%91/4201619">中频</a>部分，<a href="https://baike.baidu.com/item/%E9%A2%91%E7%8E%87/19505">频率</a>505<del>525THz(对应空气中波长595</del>570nm)，红、绿色光混合可产生黄光，类似熟<a href="https://baike.baidu.com/item/%E6%9F%A0%E6%AA%AC/1067">柠檬</a>或<a href="https://baike.baidu.com/item/%E5%90%91%E6%97%A5%E8%91%B5/6106">向日葵</a>菊花色，光谱位于绿色和橙色之间的颜色。黄的光学补色是蓝，但传统上画师以紫色作为黄的互补色。</p><blockquote><p>懒人懒得自己写文章</p></blockquote><p>黄色是由<a href="https://baike.baidu.com/item/%E7%BA%A2%E8%89%B2/33485">红色</a>光和<a href="https://baike.baidu.com/item/%E7%BB%BF%E8%89%B2/449467">绿色</a>光叠加而得，颜料中红色加绿色则为棕黑色。</p><p>黄色是四个心理学基色之一，以及<a href="https://baike.baidu.com/item/%E5%87%8F%E6%B3%95%E4%B8%89%E5%8E%9F%E8%89%B2/317945">减法三原色</a>之一。</p><div class="snote red"><p>注意：此义项中的“黄色”所指称的黄色这种颜色，并不具有词汇“黄色”所代表的“色情”义项。</p></div><h3 id="树叶为什么会变黄？"><a href="#树叶为什么会变黄？" class="headerlink" title="树叶为什么会变黄？"></a>树叶为什么会变黄？</h3><p>emmm，在树叶中含有绿色的叶绿素和黄色的叶黄素，夏天的阳光充足，叶绿素增加，叶子呈绿色。秋天光照减少，叶黄素增多，叶子呈现黄色。二是由于植物的生长素调节，当植物叶片衰老的一定成度时，植物分泌大量脱落酸，植物叶片脱落加快增多。三是换季时，有些植物只生活一个生长季，每当冬寒来临时树叶会枯黄并全部脱落。害虫危害：夏季是植物病虫害的高峰期，随着气温的逐渐升高，许多植物病虫害进入繁殖高峰期，多种虫害孵化成幼虫，大量食取叶片，吮吸叶液，导致树木病死。四是根部积水：当一棵植物根部积水时就很容易烂根，植物根部被泡烂，无法吸取足够的养分导致树叶枯黄。</p><h3 id="为什么你染的头发最后会变黄？"><a href="#为什么你染的头发最后会变黄？" class="headerlink" title="为什么你染的头发最后会变黄？"></a>为什么你染的头发最后会变黄？</h3><p>简单说，染发就是通过氧化作用，把头发中的色素拿出来，再把人工色素放进去，然后人工色素和头发中的天然色素混合，就是你看到刚染完的头发颜色。<br>染的深浅不一样，拿掉的天然色素多少也不同，越浅的颜色天然色素褪掉的也就越多。<br>染发一段时间，头发中的人工色素就会流失，最终你看到的就是头发中剩余天然色素和残留人工色素的颜色，大部分都是偏黄的颜色。这是因为，头发从深色到浅色分为10个色度：1代表黑色、2代表深棕色、3代表中棕色、4代表棕色、5代表浅棕色、6代表深金色、7代表中金色、8代表浅金色、9代表极浅金色、10代表极浅亚麻色。<br>比如你染的颜色是6度的棕色，当颜色流失后，剩下的就是深金色，也就是你看到的棕黄色的颜色。</p><h3 id="SHI，NIAO为什么是黄色的？"><a href="#SHI，NIAO为什么是黄色的？" class="headerlink" title="SHI，NIAO为什么是黄色的？"></a>SHI，NIAO为什么是黄色的？</h3><p>黄色大便属于正常颜色。人体的肝脏每天都会合成和分泌很多胆汁，胆汁中的成分主要为胆色素，用于辅助脂肪类食品的消化和吸收。肝脏分泌的胆汁，可以在肠道内被吸收，形成肝肠循环。不过有少量胆汁会随着大便排出，而胆色素的颜色就偏黄，会导致大便也发黄。如果有阻塞性黄疸的时候，胆汁不能分泌到肠道，大便就会形成白陶土样颜色。<br>血红素是血红蛋白，肌红蛋白，过氧化物酶和细胞色素等的辅基，其主要分解产物是胆色素，包括胆红素，胆绿素，胆素原和胆素等。其中胆红素呈橙黄色，是胆色素的主要成分，也是胆汁中的主要色素。包括结合胆红素和游离胆红素。 排入肠道的结合胆红素在肠道菌的作用下，还原成无色的胆素原，包括尿胆素原和粪胆素原，百分之八十到九十的胆素原在肠道下段被空气氧化成黄褐色的粪胆素，随粪便排出体外，是粪便的主要颜色。<br>人体内每天都要代谢生成胆红素，主要来源就是老化的红细胞被破坏后血红蛋白的代谢产物。红细胞正常情况下在网状内皮系统被破坏，胆红素被血液带到肝脏，经过肝脏的摄取，转化为结合胆红素，再经过胆道排入肠道，在肠道中再转变为粪胆素，也就是粪便颜色的主要来源。肠道中的胆素原部分被吸收入血液，进入血液的其中一部分会经过肾脏随尿液排出，也就是尿液的主要颜色来源。</p><p>黄色尿液最常见的是喝水少导致的。得多喝水观察缓解就是正常。如果喝水不能缓解，得检查尿常规，看看是不是尿路感染或者是否有肝胆疾病导致。避免耽误病情</p><blockquote><p><span style="color: red;">总上所述，黄色是健康的颜色,当然，除非你昨天晚上吃了红心火龙果，拉完了以后往后看有惊喜</span></p></blockquote><h2 id="还有一种可能性"><a href="#还有一种可能性" class="headerlink" title="还有一种可能性"></a>还有一种可能性</h2><blockquote><p>你生病了</p></blockquote><p>看东西变成黄色是色觉的改变，视神经，视网膜，黄斑及颅脑枕叶疾患都有可能出现色觉异常等。</p>]]></content>
      
      
      <categories>
          
          <category> 黄色 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 化工 </tag>
            
            <tag> 颜色 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国产linux操作系统deepin</title>
      <link href="2020/12/13/deepin/"/>
      <url>2020/12/13/deepin/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>背景音乐</li></ul><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=31721420&auto=1&height=66"></iframe><h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><p>说起Linux，你一定会联想到一只傻傻的企鹅坐在空气上。</p><p><img src="http://img.mp.itc.cn/upload/20160831/82283bd618134e90800c454783485776_th.jpeg" alt="一只傻傻的企鹅坐在空气上"></p><p>就在快要过去的2020年，linux29岁了。对29了。很明显，我这次文章的目的不是为了解密这只企鹅为什么可以坐在空气上。现在，进入正题。</p><p>linux,又叫GNU/linux,是一种免费使用和自由传播的类UNIX操作系统，其内核由林纳斯·本纳第克特·托瓦兹于1991年10月5日首次发布，它主要受到Minix和Unix思想的启发，是一个基于POSIX和Unix的多用户、多任务、支持多线程和多CPU的操作系统。它能运行主要的Unix工具软件、应用程序和网络协议。它支持32位和64位硬件。Linux继承了Unix以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。Linux有上百种不同的发行版，如基于社区开发的debian、archlinux，和基于商业开发的Red Hat Enterprise Linux、SUSE、oracle linux等。</p><h2 id="系统简史"><a href="#系统简史" class="headerlink" title="系统简史"></a>系统简史</h2><p>Linux操作系统的诞生、发展和成长过程始终依赖着五个重要支柱：Unix操作系统、MINIX操作系统、GNU计划、POSIX标准和Internet网络。<br>20世纪80年代，计算机硬件的性能不断提高，PC的市场不断扩大，当时可供计算机选用的操作系统主要有Unix、DOS和MacOS这几种。Unix价格昂贵，不能运行于PC；DOS显得简陋，且源代码被软件厂商严格保密；MacOS是一种专门用于苹果计算机的操作系统。此时，计算机科学领域迫切需要一个更加完善、强大、廉价和完全开放的操作系统。由于供教学使用的典型操作系统很少，因此当时在荷兰当教授的美国人AndrewS.Tanenbaum编写了一个操作系统，名为MINIX，为了向学生讲述操作系统内部工作原理。MINIX虽然很好，但只是一个用于教学目的的简单操作系统，而不是一个强有力的实用操作系统，然而最大的好处就是公开源代码。全世界学计算机的学生都通过钻研MINIX源代码来了解电脑里运行的MINIX操作系统，芬兰赫尔辛基大学大学二年级的学生Linus Torvalds就是其中一个，在吸收了MINIX精华的基础上，Linus于1991年写出了属于自己的Linux操作系统，版本为Linux0.01，是Linux时代开始的标志。他利用Unix的核心，去除繁杂的核心程序，改写成适用于一般计算机的x86系统，并放在网络上供大家下载，1994年推出完整的核心Version1.0，至此，Linux逐渐成为功能完善、稳定的操作系统，并被广泛使用。</p><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p>Linux服务器是设计出来进行业务处理应用的，在网络和计算机系统当中有广泛的应用，可以提供数据库管理和网络服务等内容，是一种性能非常高的和开源的服务器，在我国的计算机系统的客户端当中，有很多采用的就是Linux系统，其使用的范围非常广泛，用户体验反应较好。但是对于一些希望计算机应用性能比较高的单位而言，windows系统需要经常进行资源整合和碎片化管理，系统在配置的时候经常需要重新启动，这就无法避免产生停机的问题。同时，由于Linux系统的处理能力非常强悍，具备不可比拟的稳定性特征，因而Linux系统就不用经常进行重启，Linux系统的变化可以在配置的过程中实现，所以Linux服务器出现故障的概率比较小，所以很多企业组织在计算机配置的过程中经常使用Linux系统，从而降低服务器发生崩溃的可能性，很多企业在配置Linux系统的时候，都是通过减少服务器的故障发生率，实现企业业务的高效运转。</p><h2 id="系统内核的路由转发"><a href="#系统内核的路由转发" class="headerlink" title="系统内核的路由转发"></a>系统内核的路由转发</h2><p>Linux操作系统嵌入了TCP/IP协议栈，协议软件具有路由转发功能。路由转发依赖作为路由器的主机中安装多块网卡，当某一块网卡接收到数据包后，系统内核会根据数据包的目的IP地址，查询路由表，然后根据查询结果将数据包发送到另外一块网卡，最后通过此网卡把数据包发送出去。此主机的处理过程就是路由器完成的核心功能。<br>通过修改Linux系统内核参数ip_forward的方式实现路由功能，系统使用sysctl命令配置与显示在/proc/sys目录中的内核参数。首先在命令行输入：cat/proc/sys/net/ipv4/ip_forwad，检查Linux内核是不是开启IP转发功能。如果结果为1，表明路由转发功能已经开启；如果结果为0，表明没有开启。出于安全考虑，Linux内核默认是禁止数据包路由转发的。在linux系统中，有临时和永久两种方法启用转发功能。<br>临时启用：此种方法只对当前会话起作用，系统重启后不再启用。临时开启的命令格式：sysctl–wnet.ipv4.ip_forward=1。<br>永久启用：此种永久性的启用IP转发功能，通过更改配置文件/etc/sysctl.conf中的语句行“net.ipv4.ip_forward=0”，修改为“net.ipv4.ip_forward=1”，保存配置文件后执行命令sysctl–p/etc/sysctl.conf，配置便立即启用。</p><h2 id="安全隐患及加固措施"><a href="#安全隐患及加固措施" class="headerlink" title="安全隐患及加固措施"></a>安全隐患及加固措施</h2><h3 id="用户账户以及登录安全"><a href="#用户账户以及登录安全" class="headerlink" title="用户账户以及登录安全"></a>用户账户以及登录安全</h3><p>删除多余用户和用户组。Linux是多用户操作系统，存在很多种不一样的角色系统账号，当安装完成操作系统之后，系统会默认为未添加许用户组及用户，若是部分用户或是用户组不需要，应当立即删除它们，否则黑客很有可能利用这些账号，对服务器实施攻击。具体保留哪些账号，可以依据服务器的用途来决定。<br>关闭不需要的系统服务。操作系统安装完成之后，其会在安装的过程当中，会自主的启动各种类型的服务程序内容，对于长时间运行的服务器而言，其运行的服务程序越多，则系统的安全性就越低。所以，用户或是用户组就需要将一些应用不到的服务程序进行关闭，这对提升系统的安全性能，有着极大的帮助。<br>密码安全策略。在Linux之下，远程的登录系统具备两种认证的形式：即密钥与密码认证。其中，密钥认证的形式，主要是将公钥储存在远程的服务器之上，私钥存储在本地。当进行系统登陆的时候，再通过本地的私钥，以及远程的服务器公钥，进行配对认证的操作，若是认证的匹配度一致，则用户便能够畅通无阻的登录系统。此类认证的方式，并不会受到暴力破解的威胁。与此同时，只需要确保本地私钥的安全，使其不会被黑客所盗取即可，攻击者便不能够通过此类认证方式登陆到系统中。所以，推荐使用密钥方式进行系统登陆。<br>有效应用su、sudo命令。su命令的作用的是对用户进行切换。当管理员登录到系统之后，使用su命令切换到超级用户角色来执行一些需要超级权限的命令。但是由于超级用户的权限过大，同时，需要管理人员知道超级用户密码，因此su命令具有很严重的管理风险。<br>sudo命令允许系统赋予普通用户一些超级权限，并且不需普通用户切换到超级用户。因此，在管理上应当细化权限分配机制，使用sudo命令为每一位管理员服务其特定的管理权限。</p><h3 id="远程访问及登陆认证安全"><a href="#远程访问及登陆认证安全" class="headerlink" title="远程访问及登陆认证安全"></a>远程访问及登陆认证安全</h3><p>远程登录应用SSH登陆方式。telnet是一类存在安全隐患的登录认证服务，其在网络之上利用明文传输内容，黑客很容易通过截获telnet数据包，获得用户的登陆口令。并且telnet服务程序的安全验证方式存在较大的安全隐患，使其成为黑客攻击的目标。SSH服务则会将数据进行加密传输，能够防止DNS欺骗以及IP欺骗，并且传输的数据是经过压缩，在一定程度上保证了服务器远程连接的安全。<br>文件系统的安全<br>加固系统重要文件。在Linux系统中，如果黑客取得超级权限，那么他在操作系统里面就不会再有任何的限制地做任何事情。在这种情况下，一个加固的文件系统将会是保护系统安全的最后一道防线。管理员可通过chattr命令锁定系统一些重要文件或目录。<br>文件权限检查与修改。如果操作系统当中的重要文件的权限设置不合理，则会对操作系统的安全性，产生最为直接的影响。所以，系统的运行维护人员需要及时的察觉到权限配置不合理的文件和目录，并及时修正，以防安全事件发生。<br>安全设定/tmp、/var/tmp、/dev/shm。在该操作系统当中，其用于存放临时文件的目录，主要有两个，分别为/tmp与/var/tmp。它们有个共同特点，就是所有的用户可读可写和执行，这样就对系统产生了安全隐患。针对这两个目录进行设置，不允许这两个目录下执行应用程序。</p><h3 id="系统软件安全"><a href="#系统软件安全" class="headerlink" title="系统软件安全"></a>系统软件安全</h3><p>绝大多数的服务器遭受攻击是因为系统软件或者应用程序有重大漏洞。黑客通过这些漏洞，可以轻松地侵入服务器。管理员应定期检查并修复漏洞。最常见的做法是升级软件，将软件保持在最新版本状态。这样就可以在一定程度上降低系统被入侵的可能性。</p><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><p>Linux已经成为工作、娱乐和个人生活等多个领域的支柱，人们已经越来越离不开它。在Linux的帮助下，技术的变革速度超出了人们的想象，Linux开发的速度也以指数规模增长。因此，越来越多的开发者也不断地加入开源和学习Linux开发地潮流当中。在这个过程之中，合适的工具是必不可少的，可喜的是，随着Linux的发展，大量适用于Linux的开发工具也不断成熟。</p><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p>放眼现实，如今已经是容器的时代了。容器既极其容易部署，又可以方便地构建开发环境。如果针对的是特定的平台的开发，将开发流程所需要的各种工具都创建到容器映像中是一种很好的方法，只要使用这一个容器映像，就能够快速启动大量运行所需服务的实例。</p><h3 id="版本控制工具"><a href="#版本控制工具" class="headerlink" title="版本控制工具"></a>版本控制工具</h3><p>如果正在开发一个大型项目，又或者参与团队开发，版本控制工具是必不可少的，它可以用于记录代码变更、提交代码以及合并代码。如果没有这样的工具，项目几乎无法妥善管理</p><h3 id="文本编辑工具"><a href="#文本编辑工具" class="headerlink" title="文本编辑工具"></a>文本编辑工具</h3><p>如果没有文本编辑器，在Linux上开发将会变得异常艰难。当然，文本编辑器之间孰优孰劣，具体还是要取决于开发者的需求。</p><h3 id="集成开发环境"><a href="#集成开发环境" class="headerlink" title="集成开发环境"></a>集成开发环境</h3><p>有时候会需要比较两个文件的内容来找到它们之间的不同之处，它们可能是同一文件的两个不同副本（例如有一个经过编译，而另一个没有）。这种情况下，肯定不想要凭借肉眼来找出差异，而是想要使用像Med这样的工具。</p><h2 id="Linux有多少？"><a href="#Linux有多少？" class="headerlink" title="Linux有多少？"></a>Linux有多少？</h2><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/wKioL1bvVPWAu7hqAAEyirVUn3c446.jpg-wh_651x-s_3197843091.jpg" alt="Linux主流"></p><p>这还不算多的，说实在一点，Mac只是Linux的一个亚种….</p><p><img src="https://static.leiphone.com/uploads/new/images/20201111/5faaf4163142d.png?imageView2/2/w/740" alt="MAC"></p><ul><li>那么，这么多的操作系统，我偏偏选了deepin来讲，是为什么？说实在一点因为这操作系统是一个超新星，它的外貌很是出众，看看官方的视频就知道了。</li></ul><div style="position:relative; padding-bottom:75%; width:100%; height:0"><iframe src="//player.bilibili.com/player.html?aid=59860590&bvid=BV1Nt411n7E8&cid=104264193&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"></iframe></div><h1 id="Deepin"><a href="#Deepin" class="headerlink" title="Deepin"></a>Deepin</h1><p>deepin（原名：Linux Deepin；中文通称：深度操作系统）是由武汉深之度科技有限公司在Debian基础上开发的Linux操作系统，其前身是Hiweed Linux操作系统，于2004年2月28日开始对外发行，可以安装在个人计算机和服务器中</p><p>deepin操作系统内部集成了deepin Desktop Environment（中文通称：深度桌面环境），并支持deepin store、deepin Music、deepin Movie等第一方应用软件。</p><div class='tip warning faa-shake animated'><p>2019年，华为开始销售预装有deepin操作系统的笔记本电脑。<p></div><p>2020年，深之度正式发布了deepin v20版本，底层仓库升级到Debian 10.5，系统安装则采用了Kernel 5.4和Kernel 5.7双内核机制，同时用户操作界面也得到了大幅度的调整</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>深度操作系统是基于Linux内核，以桌面应用为主的开源GNU/Linux操作系统，支持笔记本、台式机和一体机。深度操作系统（deepin）包含深度桌面环境（DDE）和近30款深度原创应用，及数款来自开源社区的应用软件，支撑广大用户日常的学习和工作。另外，通过深度商店还能够获得近千款应用软件的支持，满足您对操作系统的扩展需求。深度操作系统由专业的操作系统研发团队和深度技术社区共同打造，其名称来自深度技术社区名称“deepin”一词，意思是对人生和未来深刻的追求和探索。<br>深度操作系统（deepin）是中国第一个具备国际影响力的Linux发行版本，截止至2019年7月25日，深度操作系统支持33种语言，用户遍布除了南极洲的其它六大洲。深度桌面环境（deepinDDE）和大量的应用软件被移植到了包括Fedora、Ubuntu、Arch等十余个国际Linux发行版和社区，在开源操作系统统计网站DistroWatch上，deepin长期位于世界前十。</p><p>Deepin 12.12 正式版本将搭载一个全新的桌面环境。该桌面环境由Deepin 团队开发，以轻型、美观、稳定等作为设计目标。新桌面环境使用 Compiz 作为默认的窗口管理器。<br>系统设置模块全部进行代码重写，不再使用“GNOME 控制中心”(gnome control center)，系统设置中心也会采用 Deepin UI 库作为界面库。深度音乐播放器、影音播放器最初的版本也是基于此界面库进行外观设计。最新版本的深度截图工具也采用了 Deepin UI 库。<br>新的桌面环境不仅对Deepin社区，也会对其他操作系统社区带来令人刺激的变革。国际社区也将看到一个概念独特、回归用户操作的桌面环境，一切都会变得熟悉。<br>深度桌面环境<br>应用程序一览无余<br>应用程序概览视图，可通过点击屏幕左下角的“应用程序启动器（Launcher）”按钮，或 Alt+F2 组合键打开。它可以让您快速查找并启动应用程序。<br>新底部 Dock，快速打开常用程序<br>新Dock主要由传统的Dock+托盘（系统级别+程序级别）两部分组成。点击Dock面板即可弹出“系统级托盘显示”和“Dock显示”功能选项，可以让用户自定义系统级托盘的显示和Dock的显示方式。<br>传统的底部 Dock，快速打开常用程序（就是屏幕底部的水平条）。它包括了应用程序启动器（Launcher）、显示桌面按钮，常用应用程序快捷方式和系统托盘等部分。支持应用程序快捷方式的添加与删除，并显示已打开应用程序的窗口列表。<br>简洁的消息通知<br>它会及时提示您来自聊天工具或其他应用程序、系统发出的通知，通知显示区域为屏幕右下角。消息托盘功能会在之后版本中继续完善。<br>深度系统设置<br>深度系统设置（Deepin System Settings），采用 Deepin UI 图形库，对各个设置模块进行了全新设计，主要包括显示、声音、个性化、电源、账户、网络等系统设置模块，可以方便地对系统各模块进行个性化设置。<br>下面重点介绍几个方面:<br>支持自动调节屏幕亮度。<br>如果您的电脑配有采光设备，该功能可根据外界光亮程度自动调整屏幕亮度，以节省电源。<br>个性化主题和壁纸设置。<br>a: 系统默认提供四组精彩壁纸，可根据您的喜好进行切换。 b: 支持壁纸随机播放，可设置图片切换的间隔时间。 c: 集成爱壁纸HD在线壁纸模块。<br>支持农历日期显示。<br>在日期时间模块，增加了对中国农历日期的支持，并支持显示国际性节日与中国传统节日。<br>更加方便的网络设置。<br>各个网络设置类型，如有线、拨号、移动等网络分类一目了然，设置界面极其简洁，可以帮助您快速设置网络。<br>快速设置用户头像：支持深度截图工具与摄像头拍摄。<br>可以使用深度截图工具截取屏幕并进行简单的编辑后设置为用户头像，也可以通过摄像头拍摄后直接设置为头像。</p><div class='tip error faa-spin animated'><p>很官方的发言....<p></div><h3 id="深度原生应用："><a href="#深度原生应用：" class="headerlink" title="深度原生应用："></a>深度原生应用：</h3><p>深度文件管理器、深度系统监视器、深度字体安装器、深度备份还原工具、深度取色器、深度商店、深度录屏、深度录音、深度截图、深度终端、深度看图、深度影院、深度音乐、深度云打印、深度云扫描、深度日历、深度远程协助、深度启动盘制作工具、深度安装器……</p><h2 id="如何安装deepin"><a href="#如何安装deepin" class="headerlink" title="如何安装deepin?"></a>如何安装deepin?</h2><div style="position:relative; padding-bottom:75%; width:100%; height:0"><iframe src="//player.bilibili.com/player.html?aid=414788186&bvid=BV1DV41117PN&cid=240437958&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"></iframe></div><ul><li>还是看官方的视频吧……</li></ul><div class='tip error faa-spin animated'><p>文章到此结束，谢谢你看到了这里...送个大风车给你吧！不要谢我。<p></div><h1 id="我是"><a href="#我是" class="headerlink" title="我是"></a>我是</h1><p><img src="https://github-readme-stats.vercel.app/api?username=xixi-cmd&show_icons=true" alt="Github Stats"></p>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
          <category> linux </category>
          
          <category> deepin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 系统 </tag>
            
            <tag> Toss Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>世界公祭-南京大屠杀</title>
      <link href="2020/12/12/%E5%8D%97%E4%BA%AC/"/>
      <url>2020/12/12/%E5%8D%97%E4%BA%AC/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="snote red"><p>写这篇文章只是为了回忆中国人民辛酸的往事，并且悼念南京大屠杀中死去的30万同胞....</p></div><h1 id="七七事变"><a href="#七七事变" class="headerlink" title="七七事变"></a>七七事变</h1><h2 id="梗概"><a href="#梗概" class="headerlink" title="梗概"></a>梗概</h2><p>七七事变，又称卢沟桥事变，发生于1937年7月7日</p><p>1937年7月7日夜，卢沟桥的日本驻军在未通知中国地方当局的情况下，径自在中国驻军阵地附近举行所谓军事演习，并诡称有一名日军士兵失踪，要求进入北平西南的宛平县城(今卢沟桥镇)搜查，被中国驻军严词拒绝，日军随即向宛平城和卢沟桥发动进攻。中国驻军第29军37师219团奋起还击，进行了顽强的抵抗</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>日本早在明治维新时期，在确立近代天皇制的同时，迅速走上了扩张侵略的军国主义道路，并制定了以中国、朝鲜为主要侵略对象的所谓“大陆政策”。20世纪初叶，日本于日俄战争后取代俄国，在中国东北扩大殖民势力，屯驻关东军，设立殖民机构“南满铁路公司”，把东北作为对中国殖民扩张的基地。第一次世界大战期间，日本利用西方列强无暇东顾，极力扩大对华侵略，出兵山东，胁迫袁世凯接受日本妄图鲸吞中国的“二十一条要求”，把侵略魔掌伸向中国内地。一次大战后，日本企图通过加紧掠夺中国、朝鲜和其他亚洲国家，摆脱政治、经济危机，在1927年的“东方会议”上对侵略中国问题进行了精心策划。1931年9月18日，日本对我国东北发动突然袭击，3个多月就占领东北全境。翌年日军进攻上海(一·二八事变)，并攻占大片华北土地，威逼平津，又在东北建立伪“满洲国”、在华北搞所谓“自治运动”，妄图长期占领这些地区。1936年日本制定的总体战略计划――“国策基准”出笼后，日本举行了一次“将官”演习，向参加演习的将官交代了全面发动侵华战争的战争部署 [2]  。<br>日本侵略者自1931年九·一八事变侵吞我国东北后，为进一步挑起全面侵华战争，陆续运兵入关。到1936年，日军已从东、西、北三面包围了北平（今北京）。</p><p>从1937年6月起，驻丰台的日军连续举行挑衅性的军事演习</p><h2 id="经过"><a href="#经过" class="headerlink" title="经过"></a>经过</h2><p>1937年7月7日夜10时，驻丰台日军河边旅团第一联队第三大队第八中队，由中队长清水节郎率领，在卢沟桥以北地区举行以攻取卢沟桥为假想目标的军事演习，11时许，日军诡称演习时一士兵离队失踪，要求进城搜查。在遭到中国驻军第二十九军第三十七师二一九团团长吉星文的严词拒绝后，日军迅即包围宛平县城。翌晨2时，第二十九军副军长兼北平市长秦德纯为防止事态扩大，经与日方商定，双方派员前往调查。</p><p>但日军趁交涉之际，于8日晨4时50分，向宛平县城猛烈攻击。并强占宛平东北沙岗，打响了攻城第一枪，中国守军忍无可忍，奋起还击，日军在同一天内，连续进攻宛平城三次，均遭中国守军的英勇抵抗。</p><p>7月8日，北平当局令驻军坚守卢沟桥。宋哲元致电蒋介石，报告卢沟桥事变真相。<br>同日，国民政府外交部为卢沟桥事变向日本大使提出口头抗议。</p><p>同日，日本内阁会议提出所谓“事件不扩大，就地解决”的方针，欺骗世界舆论，麻痹国民党当局，争取时间调集部队。</p><p>9日，北平当局与日军达成协议：(1)双方立即停止射击；(2)日军撤退至永定河左岸，中国军队撤至右岸；(3)卢沟桥守备由河北保安队石友三部担任。翌日，中国军队撤退，日军不仅不履行诺言，反而大批调兵向中国军队进攻。</p><p>11日，平津当局与日军达成现地协定：(1)第二十九军代表声明向日军表示道歉，并惩办此次事变责任者；(2)取缔共产党、蓝衣社及其他抗日团体的抗日活动；(3)永定河以东不驻中国军队。</p><p>10日，各方纷纷报告，日军已由天津、古北口、榆关等处陆续开到，且有大炮、坦克等向卢沟桥前进，已将大井村五里店等处占领；平卢云路也不通行，战事即将再发。</p><p>11日起，日军时以大炮轰击宛平城及其附近一带，城内居民伤亡颇多，团长吉星文亦负伤，就将城内居民向城外比较安全地带疏散。战事由此扩大到八宝山、长辛店、廊坊、杨村等处。第二十九军各部分散于各处应敌。日军出动飞机在各处侦察扫射，战事时断时续</p><h1 id="淞沪会战"><a href="#淞沪会战" class="headerlink" title="淞沪会战"></a>淞沪会战</h1><h2 id="梗概-1"><a href="#梗概-1" class="headerlink" title="梗概"></a>梗概</h2><p>淞沪会战（又称八一三战役、第二次淞沪抗战，日本称为第二次上海事变）是中日双方在抗日战争中的第一场大型会战，也是整个中日战争中进行的规模最大、战斗最惨烈的一场战役。淞沪会战开始于1937年8月13日，是卢沟桥事变后，蒋介石为了把日军由北向南的入侵方向引导改变为由东向西，以利于长期作战，而在上海采取主动反击的战役。中日双方共有约100万军队投入战斗，战役本身持续了三个月，日军投入8个师团和2个旅团20万余人，宣布死伤4万余人；中国军队投入最精锐的中央教导总队及八十七师、八十八师及148个师和62个旅80余万人，自己统计死伤30万人。</p><p>淞沪会战中日军因国民党的顽强抵抗而损失惨重，这场战役对于中国而言，标志两国之间不宣而战、全面战争的真正开始，卢沟桥事变后的地区性冲突升级为全面战争，并彻底粉碎了日本“三个月灭亡中国”的计划。国际法泰斗厉声教曾评价称：“淞沪会战为上海和长江下游工厂与物资内迁赢得了时间，为中国坚持长期抗战起到重大作用。</p><h2 id="背景-1"><a href="#背景-1" class="headerlink" title="背景"></a>背景</h2><h3 id="国际"><a href="#国际" class="headerlink" title="国际"></a>国际</h3><p>一战（第一次世界大战）后，日本在华扩张受到了英美列强的遏制，中国的北伐战争使日本在华利益受到削弱，促使日本政府调整对华政策，加快吞并中国东北地区的步伐；20世纪30年代初，世界经济危机发生，日本经济遭受沉重打击，陷入极端困境，并导致政治危机，在内外交困的情况下，日本法西斯势力决意冲破华盛顿体系对日本的束缚，趁英美忙于应付危机，蒋介石大规模“剿共”之际，夺取东北，以摆脱困境，并图谋争霸世界。</p><h3 id="国内"><a href="#国内" class="headerlink" title="国内"></a>国内</h3><ul><li>淞沪抗战</li></ul><p>1932年1月28日午夜，日本海军第一遣外舰队司令盐泽幸一指挥海军陆战队分三路突袭上海闸北，第十九路军在总指挥蒋光鼐、军长蔡廷锴指挥下奋起抵抗，一·二八淞沪抗战爆发。</p><ul><li>自卫抗战</li></ul><p>1937年日本帝国主义制造卢沟桥事变，企图在华北制造第二个满洲国。为确保首都安全，中国统帅部遵照国防计划甲案，陆军集中兵力准备歼灭上海的三千日军海军陆战队，海军堵塞江阴全歼日军长江舰队。<br>后机密泄露，日本长江舰队仓皇逃出长江口。1937年8月9日，日本海军中尉大山勇夫等两人驾车闯入上海虹桥机场挑衅，被驻军保安队击毙。</p><p>在全民抗日浪潮推动下，国民政府第二天发表了《自卫抗战声明书》，宣告“中国决不放弃领土之任何部分，遇有侵略，惟有实行天赋之自卫权以应之”。开始总攻，中国空军也到上海协同作战，并于8月13日奉令向日本驻沪海军陆战队虹口基地发起围攻，试图赶敌下海。“八一三”淞沪抗战由此展开 </p><ul><li>数次会议</li></ul><p>从卢沟桥事变后，统帅部为了应付“七七事变”后的复杂形势，召开了数次会议，讨论初期的战略政略和各方面准备情况。</p><h2 id="经过-1"><a href="#经过-1" class="headerlink" title="经过"></a>经过</h2><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>1937年8月14日，当地国民党驻军第九集团军在总司令张治中的指挥下，指挥87、88师等部开始总攻，中国空军也到上海协同作战，并于8月13日奉令向日本驻沪海军陆战队虹口基地发起围攻，试图赶敌下海。“八一三”淞沪抗战由此展开。</p><h3 id="中方进攻"><a href="#中方进攻" class="headerlink" title="中方进攻"></a>中方进攻</h3><ul><li><p>备战<br>中国军队准备防御上海的第一批部队是第87、88师，原为国民政府的警卫部队，是德国顾问训练出的样板师，全制式德国武器装备，为国军精锐。秘密开到上海附近后，军委会命令驻扎在苏州的装备优良的第2师补充旅第二团换上保安队服装秘密进驻虹桥机场等战略重点，以充实上海兵力（当时上海的中国驻军受限于1932年的《淞沪停战协定》，无正规陆军）。</p></li><li><p>引线</p></li></ul><p>8月9日下午上海虹桥机场事件发生后，时任京沪警备司令的张治中立刻在其苏州的住所召见第2师补充旅副旅长杨文瑔（旅长钟松在庐山受训），要杨文瑔亲自到上海调查事件真相（机场守卫部队隶属第2师补充旅）。经杨文瑔实地调查核实，认为此事件属于突发事件，并非中日两国蓄意而为之。尽管如此，中日双方已经处于剑拔弩张、战争一触即发之际，二名日本军人擅自驾车持枪强闯机场警戒线是一种严重的挑衅行为，也点燃了战争的导火线。<br>事件发生第二天，中日双方就此事开始交涉和谈判。11日，日方代表提出“中方撤退上海保安部队，撤除所有防御工事”，上海市长俞鸿钧秉奉蒋介石之命严辞拒绝。日军第3舰队司令官长谷川清命令日舰开进黄浦江、长江各口岸，所属分舰队紧急开赴上海待战，同时命令在佐世保待机的海军第1特别陆战队以及其他部队增援上海。</p><ul><li>抢点</li></ul><p>为抢得战争主动权，赶在日本援军到达之前消灭驻沪日军，中国组织淞沪作战部队张治中部第9集团军（下辖3个师和1个独立旅）准备围攻日军，13日战争爆发，中国军队对上海市区之敌发动全面进攻，同时出动空军，轰炸日海军陆战队司令部、汇山码头及海面舰艇。其攻击重点最初为虹口，后转向公大纱厂。<br>“八一三”淞沪会战开始时，中国军队占了绝对优势，除2个精锐师外，还有2个装备德国火炮的重炮团，即炮兵第10团（150毫米榴弹炮）和炮兵第14团（150毫米榴弹炮），加上坦克、空军助战，按理应具有压倒性优势。<br>其时日军在上海的部队仅海军陆战队3000多人，紧急从日本商团中动员退役军人，合计也不过4000人（国民党夸大为1万人以上），重武器也不足，但其依靠坚固工事顽强抵抗，致使中国军队一直无法完成重大突破。</p><ul><li>增兵</li></ul><p>经数日苦战，第87师占领沪江大学，第88师占领了五洲公墓、宝山桥、八字桥等各要点，14日到沪的第二师补充旅（已改称独立第20旅）接替第八十八师（孙元良部）防守上海爱国女校、持志大学，并担任攻击虹口公园和江湾路日军司令部的任务。<br>15日，日本裕仁天皇命令松井石根大将为上海派遣军司令官，指挥第3师团、第11师团等军直属部队进攻上海，进一步扩大对中国的侵略战争。日军增援部队在中国军队侧后方上陆后，中方已经无力消灭日军陆战队，蒋介石为首的中国军队统帅部，考虑在上海作战比在遥远的北方大平原作战补给方便，避开机动力占优势的日军。且在有外国租借的上海开战，极有可能引起大国势力的干涉，并可能在外国调停下赢得一个光荣的和平，进而挫败日军对华北的野心，这对相对弱小的中国来说是极为有利的。<br>8月21日，以日本长门号、陆奥号战列舰为首的庞大舰队，运输着日军上海派遣军先头部队约1万余人从日本出发奔赴马鞍群岛。22日晚上，日军陆军在马鞍群岛乘换为轻巡洋舰、驱逐舰后，分别向川沙镇、吴淞口一带驶入。<br>日军于16日退守江湾以日本海军陆战队司令部为中心的据点，中日双方在上海一地不断投入军队。<br>此役国民党方面先后投入8个集团军又48个师、15个独立旅、9个暂编旅、中央军校教导总队、炮兵7团、财政部税警总团、宪兵1个团、上海市保安总团、上海市警察总队、江苏省保安团4个团，3队海军舰队，兵力总数在60万人以上。日军投入5个师团1个旅团达13万人，鏖战两个月后，日军依靠强大的火力突破中国军队防线。</p><ul><li>失利</li></ul><p>10月20日，日军秘密组建第10军准备对中国军队实行大包围，11月5日日军第10军8万人在金山卫登陆，蒋介石因幻想九国公约签字国的干涉，拖延了撤退时机，但此时西方国家绥靖之风盛行，称中国军队主动在上海非军事区挑起战争为破坏和平，对中国的要求置之不理。<br>几天后，日军包围网即将形成，前线中国军队大乱，部分部队为避免被围已经自行组织撤退。蒋介石仍死抱着对国联不切实际的幻想，迟迟不肯下令后撤，耽误了宝贵的时间。最终撤退时，因没有讲明各部队撤退顺序，三四十万中国将士挤在几条公路上，被日军空军轰炸，大撤退变成了大溃逃，数十万将士在撤往南京时分散，为南京保卫战的失利埋下伏笔。12万守军各自为战，无法统一作战，数天上海就告陷。<br>此次为中国军队第一次军种（空军、海军、陆军）和诸兵种（步兵、炮兵、坦克）大规模协同作战，协同效果很差：步兵逼坦克冲锋又不予以掩护，结果坦克被日军全部击毁；步兵失去坦克掩护后攻坚伤亡惨重，甚至出现一个营部队挤在一条街内被日军堵住街口全部击毙的悲剧。陈诚回顾上海围攻未胜的教训，认为“以5师之众，对数千敌陆战队实行攻击，竟未能奏效，实在是当时部署种种不当的缘故”。史说回忆，“步兵与炮兵、战车协同作战的训练从来没做过”。</p><h1 id="南京大屠杀"><a href="#南京大屠杀" class="headerlink" title="南京大屠杀"></a>南京大屠杀</h1><h2 id="梗概-2"><a href="#梗概-2" class="headerlink" title="梗概"></a>梗概</h2><p>指1931至1945年中国抗日战争期间，中华民国在南京保卫战中失利、首都南京于1937年12月13日（学术界认为开始于12月5日）沦陷后，在华中派遣军司令松井石根和第6师团长谷寿夫指挥下，侵华日军于南京及附近地区进行长达6周的有组织、有计划、有预谋的大屠杀和奸淫、放火、抢劫等血腥暴行。在南京大屠杀中，大量平民及战俘被日军杀害，无数家庭支离破碎，南京大屠杀的遇难人数超过30万。<br>南京大屠杀是侵华日军公然违反国际条约和人类基本道德准则，是日军在侵华战争期间无数暴行中最突出、最有代表性的一例之一。南京大屠杀期间，《纽约时报》、《中央日报》、《新华日报》等中外媒体，均对南京大屠杀进行了大量的揭露。<br>战后，中国国民政府对南京大屠杀进行了广泛的调查。其中，南京审判战犯军事法庭经调查判定，日军集体屠杀有28案，屠杀人数19万余人；零散屠杀有858案，死亡人数15万余人，总计死亡人数达30多万，制造了惨绝人寰的特大惨案。 2014年12月13日是首个南京大屠杀死难者国家公祭日，中共中央、国务院在南京侵华日军南京大屠杀遇难同胞纪念馆举行首次南京大屠杀死难者国家公祭仪式，中共中央总书记、国家主席、中央军委主席习近平出席仪式。2015年10月9日，《南京大屠杀史档案》正式列入《世界记忆名录》。 </p><h2 id="背景-2"><a href="#背景-2" class="headerlink" title="背景"></a>背景</h2><h3 id="淞沪会战失利"><a href="#淞沪会战失利" class="headerlink" title="淞沪会战失利"></a>淞沪会战失利</h3><p>1937年七七事变后，日本展开对中国全面大规模侵略。同年8月13日~11月12日日本侵略军在上海及周边地区展开淞沪会战。战役初期，日军于上海久攻不下，但日军进行战役侧翼机动，11月5日在杭州湾的全公亭、金山卫间登陆，中国军队陷入严峻形势，战局急转直下。<br>1937年11月8日蒋中正下令全线撤退，四天后上海失守，淞沪会战结束。上海被日本占领后，日军趁势分三路急向南京进犯。中国方面就此开始准备在上海以西仅300余公里的首都南京的保卫作战，由于下达撤退命令过于仓促，后方国防工事交接发生失误，随着日军轰炸机的大范围轰炸，撤退演变为大溃败，使北路日军主力一路顺利到达南京。中华民国首都南京处于日军的直接威胁之下。由于从上海的撤退组织的极其混乱，中国军队在上海至南京沿途未能组织起有效抵抗。</p><h3 id="南京保卫战"><a href="#南京保卫战" class="headerlink" title="南京保卫战"></a>南京保卫战</h3><p>中国统帅部此时深感事态严重，在17日和18日三次开会讨论南京防御的问题。会议上多数将领认为部队亟需休整，而南京在军事上无法防御，建议仅仅作象征性的抵抗，只有唐生智以南京是国家首都、孙中山陵寝所在，以及国际观瞻和掩护部队后撤等理由，主张固守南京。蒋介石期望保卫首都的作战对纳粹德国的外交调停有利，并且以为能够等到苏联的军事介入采纳了唐生智的建议，决定“短期固守”南京1至2个月，于11月26日任命唐（阶级上将）为南京卫戍军司令长官，负责南京保卫战。副司令长则为罗卓英及刘兴。<br>根据坚守南京的决策，中国统帅部在12月初日军接近南京城之前共调集了约13个师又15个团共10万余人（一说约15万人）的部队保卫南京。这些部队中有很多单位刚刚经历了在上海的苦战和之后的大溃退，人员严重缺编且士气相当低落，而新补充的数万士兵大多没有完成训练。唐生智多次公开表示誓与南京城共存亡，对蒋介石则承诺没有命令决不撤退。为了防止部队私自过江撤退，唐生智采取了背水死战的态度。他下令各部队把控制的船只交给司令部，又将下关至浦口的两艘渡轮撤往武汉，还命令第36师封锁从南京城退往下关码头的唯一通道挹江门，这一“破釜沉舟”的命令给后来的悲剧性撤退埋下了隐患。<br>1937年11月20日，中国国民党政府发表《国民政府移驻重庆宣言》，政府机关、学校纷纷迁往内地，很多市民也逃离了南京。在6月有101.5万城乡居民的南京市，到了12月初的常住人口据估计还有46.8万至56.8万人，这还不包括军人和从前方逃亡到南京的难民。 22日，本着人道主义精神留在南京的二十多位西方侨民成立了南京安全区国际委员会，他们提出在南京城的西北部设立一个给平民躲避炮火的安全区。29日，南京市市长宣布承认安全区国际委员会，并为安全区提供粮食、资金和警察。唐生智还承诺将部队撤出安全区。1937年12月5日，国际委员会收到日本政府模棱两可的回复，随即开始了安全区的工作。<br>1937年12月1日，日军攻占江阴要塞，同日，日军下达进攻南京的作战命令，南京保卫战开始。<br>1937年12月2日，江阴防线失守中国海军主力第一舰队和第二舰队在中日江阴海战中被全数击沉，作为南京国民政府唯一一道拱卫京畿的水上屏障失守。<br>1937年12月10日日军发起总攻，12月12日唐生智下达突围、撤退命令，中国军队的抵抗就此瓦解。</p><h3 id="日军进攻南京"><a href="#日军进攻南京" class="headerlink" title="日军进攻南京"></a>日军进攻南京</h3><p>本原本打算在上海附近消灭中国军队的主力，从而迫使中国国民党政府屈服。然而，日本上海派遣军在淞沪战场苦战三个月，受到了惨重的损失，日本决策层在是否直接进攻南京的问题上产生了分歧。因为顾虑苏联在北方的军事威胁，日军参谋本部次长多田骏等人主张“不扩大”战事。因此，11月7日东京将上海派遣军与第10军临时编组为华中方面军的时候，将方面军的作战区域限制在苏州、嘉兴一线（即“制令线”）以东。而日军战地指挥官却强烈要求进攻南京：15日，柳川平助的第10军无视参谋本部的命令，决定趁中国军队溃退“独断敢行”地“全力向南京追击”；22日，方面军司令官松井石根鼓动参谋本部放弃“不扩大”方针，称“为了使事变迅速解决，乘现在敌人的劣势，必须攻占南京”。11月下旬，日军上海派遣军和第10军全面越过“制令线”，分别沿着太湖的南、北两侧开始向常州、湖州进攻。鉴于前线进展迅速的既成事实，24日东京大本营废除了“制令线”，并在12月1日下达了攻占南京的正式命令。<br>进攻南京的作战开始后不久，疯狂前进的作战部队就把辎重部队抛在身后，由于日军原本没有深入内陆作战的后勤准备，部队立即面临着粮食供给中断的严重问题，日本军司令部于是下达了实际是要部队抢劫的“就地征收”命令。日军在抢劫中通常伴随着奸淫妇女的暴行，为了掩盖自己抢劫和强奸的罪恶，日军除了杀死受害人，经常放火烧毁整个村庄。</p><h3 id="南京沦陷"><a href="#南京沦陷" class="headerlink" title="南京沦陷"></a>南京沦陷</h3><p>1937年12月8日，日军全面占领了南京外围一线防御阵地，开始向外廓阵地进攻。11日晚，蒋介石通过顾祝同电告唐生智“如情势不能久持时，可相继撤退，图整理而期反攻”。12日，日军第6师团一部突入中华门但未能深入，其余城垣阵地还在中国军队手中。负责防守中华门的第88师师长孙元良擅自带部分部队向下关逃跑，虽被第36师师长宋希濂劝阻返回，但已经造成城内混乱。下午，唐生智仓促召集师以上将领布置撤退。按照撤退部署，除第36师掩护司令部和直属部队从下关渡江以外，其他部队都要从正面突围，但唐生智担心属于中央军嫡系在突围中损失太大，又口头命令第87师、第88师、第74军和教导总队“如不能全部突围，有轮渡时可过江”，这个前后矛盾的命令使中国军队的撤退更加混乱。会议结束后，只有属于粤系的第66军和第83军在军长叶肇和邓龙光带领下向正面突围，在付出巨大代价后成功突破日军包围，第159师代师长罗策群战死。其他部队长官大多数没有向下完整地传达撤退部署，就各自抛下部队前往江边乘事先控制的船只逃离。这些部队听说长官退往下关，以为江边已经做好了撤退准备，于是放弃阵地涌向下关一带。负责封锁挹江门的第36师没有接到允许部队撤退的命令，和从城内退往下关的部队发生冲突，很多人被打死或踩死。12日晚，唐生智与司令部成员乘坐事先保留的小火轮从下关煤炭港逃到江北，此后第74军一部约5000人以及第36师也从煤炭港乘船过江，第88师一部和第156师在下关乘自己控制的木船过江。逃到下关的中国守军已经失去建制，成为混乱的散兵，其中有些人自己扎筏过江，很多人淹死、或是被赶到的日军射杀在江中。大部分未能过江或者突围的中国士兵流散在南京街头，不少人放弃武器，换上便装躲入南京安全区。13日晨，日军攻入南京城，开始了长达四十多天的南京大屠杀。</p><h2 id="经过-2"><a href="#经过-2" class="headerlink" title="经过"></a>经过</h2><h3 id="轰炸"><a href="#轰炸" class="headerlink" title="轰炸"></a>轰炸</h3><p>日军早在攻入南京之前就开始对南京周边地区的狂轰滥炸。1937年11月，日本陆军航空本部通过了《航空部队使用法》，其中第103条规定：“战略攻击的实施，属于破坏要地内包括政治、经济、产业等中枢机关，并且重要的是直接空袭市民，给国民造成极大恐怖，挫败其意志。”这是人类战争史上第一次明文规定可以在战争中直接以平民和居民街道为目标实施空袭，突破了战争伦理的底线。<br>1937年9月19日，日军第三舰队司令官长谷川清下令对南京等实行“无差别级”轰炸。一部分历史学家认为，这是更广义的南京大屠杀的起始日期。这一天，日本第三舰队司令长官长谷川清下令所属第2联合航空队（1937年9月10日刚刚从大连转场到新落成的上海公大机场）对南京市区进行“无差别级”轰炸。上午8时15分，警报声大作，江阴要塞瞭望台报告：大批敌机正自下游向江阴飞来！海军各舰炮手均各就各位。几分钟后，只见一个由33架敌机组成的庞大机群在3000米高度向西南飞去。<br>这天正是著名的“9·19空战”日，敌机被我空军第四大队击落4架，击伤1架。中国空军后来的传奇人物刘粹刚自此一战成名。 9时20分左右，警报声又起，海军见1小时前西飞的敌机群正杂乱无章错落地返航，料定必是被我空军击败，便以排炮“欢送”。敌机惊魂未定，无心恋战，未发一枪，未掷一弹，均高速向东逃窜。下午2时30分，又传来警报声，见敌机28架，又在南京被中国空军击溃。这次，该机群未敢沿江飞行，绕开中国高射炮火有效射程返航。</p><h3 id="屠杀"><a href="#屠杀" class="headerlink" title="屠杀"></a>屠杀</h3><p>进城兵力约50000人，执行军纪维持的宪兵却仅有17人的日军除了个别地或小规模地对南京居民随时随地任意杀戮之外，还对中国人，特别是解除了武装的军警人员进行若干次大规模的“集体屠杀”。大规模屠杀方法有机枪射杀、集体活埋等，手段极其残忍。<br>12月15日（日军占领第3天）：已放下武器的中国军警人员3000余人被集体解赴汉中门外用机枪密集扫射，多人当场遇难。负伤未死者亦与死者尸体同样遭受焚化。12月15日夜，押往鱼雷营的中国平民及已解除武装的中国军人9000余人被日军屠杀。又在宝塔桥一带屠杀3万余人。在中山北路防空壕附近枪杀200人。<br>12月16日（日军占领第4天）：位于南京安全区内的华侨招待所中躲避的中国男女难民5000余人被日军集体押往中山码头，双手反绑，排列成行。日军用机枪射杀后，弃尸于长江以毁尸灭迹。5000多人中仅白增荣、梁廷芳二人于中弹负伤后泅至对岸，得免于死。日军在四条巷屠杀400余人，在阴阳营屠杀100多人。<br>12月17日（日军占领第5天）：中国平民3000余人被日军押至煤炭港下游江边集体射杀。在放生寺、慈幼院避难的400余中国难民被集体射杀。<br>12月18日（日军占领的第6天）夜，下关草鞋峡。日军将从南京城内逃出被拘囚于幕府山的中国难民男女老幼共57418人，除少数已被饿死或打死，全部用铅丝捆扎，驱集到下关草鞋峡，用机枪密集扫射，并对倒卧血泊中尚能呻吟挣扎者以乱刀砍戮。事后将所有尸骸浇以煤油焚化，以毁尸灭迹。此次屠杀仅有伍长德一人被焚未死，得以逃生。大方巷难民区内日军射杀4000余人。</p><h3 id="杀人比赛"><a href="#杀人比赛" class="headerlink" title="杀人比赛"></a>杀人比赛</h3><p>1937年12月13日，《东京日日新闻》（即现在《每日新闻》）报道两名日本军官的“杀人竞赛”。日军第十六师团中岛部队两个少尉军官向井敏明和野田毅在其长官鼓励下，彼此相约“杀人竞赛”，商定在占领南京时，谁先杀满100人为胜者。他们从句容杀到汤山，向井敏明杀了89人，野田毅杀了78人，因皆未满100，“竞赛”继续进行。12月10日中午，两人在紫金山下相遇，彼此军刀已砍缺了口。野田谓杀了105人，向井谓杀了106人。又因确定不了是谁先达到杀100人之数，决定这次比赛不分胜负，重新比赛谁杀满150名中国人。这些暴行都一直在报纸上图文并茂连载，被称为“皇军的英雄”。日本投降后，这两个战犯终以在作战期间，共同连续屠杀俘虏及非战中人员“实为人类蟊贼，文明公敌”的罪名在南京执行枪决。<br>据1946年2月中国南京军事法庭查证：日军集体大屠杀28案，19万人，零散屠杀858案，15万人。日军在南京进行了长达6个星期的大屠杀，中国军民被枪杀和活埋者达30多万人。</p><p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=1085056520,329719342&fm=26&gp=0.jpg" alt="报纸图"></p><h3 id="文化掠夺"><a href="#文化掠夺" class="headerlink" title="文化掠夺"></a>文化掠夺</h3><p>中华民族在经历这场血泪劫难的同时，中国文化珍品也遭到了大掠夺。据查，日本侵略者占领南京以后，派出特工人员330人、士兵367人、苦工830人，从1938年3月起，花费一个月的时间，每天搬走图书文献十几卡车，共抢去图书文献88万册，超过当时日本最大的图书馆东京上野帝国图书馆85万册的藏书量。</p><h3 id="抢劫纵火"><a href="#抢劫纵火" class="headerlink" title="抢劫纵火"></a>抢劫纵火</h3><p>抢劫和纵火造成严重财产损失。南京国际救济委员会的报告称：“南京31%的建筑被烧毁；店铺被毁比例更高；日军损毁及抢劫造成高达1亿法币的直接损失；南京周边公路沿线的农村地区被洗劫几尽，并陷入缺少种子、牲畜、劳力和工具的困境中，播种的粮食作物仅为平常年份的10%。<br>对于日军在全城纵火造成的严重后果，据国际委员会委员斯迈思所作调查统计：全市房屋，有24%毁于纵火焚烧；城外有62%的房屋被烧毁，通济门外被烧房屋高达78%；在江宁、句容、溧水、江浦和六合（半县）四个半县中，共有30.08万间房屋被毁，占这些地区房屋总数的40%，其中多数是被烧毁的。<br>1946年2月，南京调查敌人罪行委员会共获得500余份资料，其内容涉及日军在南京的屠杀、伤害、奸淫、劫夺、破坏、强制服役等及中岛、长谷川等29支日军部队罪行总数达295882种。<br>南京大屠杀案敌人罪行调查委员会从1946年6月起 ，至9月底全部完成，计有确实人证案件2784件，根据调查结果制成被害人伤亡统计表、侵华日军罪行各类统计表、可出庭作证被害人住址姓名表，撰写了南京大屠杀惨案述要，分别供远东法庭和南京国防部军事法庭，作为审讯日本战犯之证据。从调查罪行种类来看，其中枪杀1159件，用刺刀刺杀667件，集体屠杀315件，拉夫285件，烧杀136件，打死69件，先刑后杀33件，先奸后杀19件，炸死19件，强奸16件等。从受害者性别来看， 男性死伤及生死不明者计2292件，女性死伤及生死不明者计478件，性别不明者计14件。在个案调查方面，该委员会提供了较为典型的10名受害者的案例，除庄少德案同南京大屠杀没有关联外，其他9人如柏鸿恩、李秀英、殷有余等均为大屠杀受害者。</p><p>………………….</p>]]></content>
      
      
      <categories>
          
          <category> 历史 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 历史 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二向箔</title>
      <link href="2020/11/28/%E4%BA%8C%E5%90%91%E7%AE%94/"/>
      <url>2020/11/28/%E4%BA%8C%E5%90%91%E7%AE%94/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>建议放这首歌曲阅读</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1321290496&auto=1&height=66"></iframe><h1 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h1><h2 id="为什么我会有写这个文章的念头？"><a href="#为什么我会有写这个文章的念头？" class="headerlink" title="为什么我会有写这个文章的念头？"></a>为什么我会有写这个文章的念头？</h2><p>最近我看完了《三体》，你问我看懂没有，我不懂，但是里面基本的空间，物理学知识还可以看懂，就像是同一个分类里面的熵，你问我看懂没有了我也没看懂，呵~，这个《三体》的话，说简单点就是看视频吧。我把B站文曰大佬的</p><div style="position:relative; padding-bottom:75%; width:100%; height:0"><iframe src="//player.bilibili.com/player.html?aid=8370807&bvid=BV11s41187QY&cid=13778135&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"></iframe></div><div class="snote red"><p>足足86分钟呢，嘿嘿嘿...</p></div><h1 id="切入正题"><a href="#切入正题" class="headerlink" title="切入正题"></a>切入正题</h1><h2 id="什么是降维打击？"><a href="#什么是降维打击？" class="headerlink" title="什么是降维打击？"></a>什么是降维打击？</h2><p>为什么我会把这个放在“二向箔”前面？因为我觉得这个是二向箔的命根子，现在切入书中…..</p><h3 id="歌者"><a href="#歌者" class="headerlink" title="歌者"></a>歌者</h3><blockquote><p>以下为《三体Ⅲ：死神永生》第五部片段</p></blockquote><p style="font-family: Airal; font-size: 14px;">    翻阅坐标数据是歌者的工作，判断坐标诚意是歌者的乐趣。<br>    歌者知道自己做的不是什么大事....歌者翻阅坐标时正在英唱这一首古歌谣：<br></p><div class="snote quote"><p class='p subtitle'>歌者的歌谣</p><p>  <strong>我看到了我的爱恋</strong></p><p>  <strong>我飞到她的身边</strong></p><p>  <strong>我捧出给她的礼物</strong></p><p>  <strong>那是一小块凝固的时间</strong></p><p>  <strong>时间上有美丽的条纹</strong></p><p>  <strong>摸起来像浅海的泥一样柔软</strong></p><p>  <strong>她把时间涂满全身</strong></p><p>  <strong>然后拉起我飞向存在的边缘</strong></p><p>  <strong>这是灵态的飞行</strong></p><p>  <strong>我们眼中的星星像幽灵</strong></p><p>  <strong>星星眼中的我们也像幽灵</strong></p><p>  <strong>……</strong></p></div><p style="font-family: Airal; font-size: 14px;">....<br>"我需要一块二向箔，清理用。"<br>"给"长老给了歌者一块二向箔.<br>二向箔悬浮在歌者的眼前，是封装状态，晶莹剔透。虽然周是普通的东西，但歌者喜欢它。它并不喜欢安贵的东西，太爆裂，他就喜欢二向箔体现的这种最硬的柔软，能把死亡唱成一首歌的唯美。<br>....</p><h4 id="梗概"><a href="#梗概" class="headerlink" title="梗概"></a>梗概</h4><p>歌者是该文明中唯一一位被作者赋予名字的外星文明个体，因此也成为了该文明的代名词。实际上这并不是这一文明的真正名称，关于它们的绝大多数资料都是模糊和未知的。</p><p>虽然证据有限，但是一种主流猜测认为歌者所在的文明是一个古老的硅基或碳基文明。而随着文明的进步，它们逐渐进化为依靠虚拟交互生存的虚拟信息化文明。但是歌者文明仍然保有一定比例的活性个体（如长老和歌者）来辅助运作一些虚拟生命无法完成的任务，其证据正是基于小说中两个个体之间的对话和对歌者自身的描述。</p><p>相对于太阳系中的人类，歌者文明的强大毫无争议。</p><p>但是歌者所在的文明自身也陷入到了生存危机，它们正与被称为“边缘世界”的敌人展开激烈的星际战争，而且随着战况的变迁，主动转为被动，战局越来越不利于歌者的“母世界”。于是“母世界”在意识到常规战争已经无力谋求最终胜利后，便开始着手准备“全面二维化”，也就是将自己能触及到的全部三维宇宙空间和自己一同送入二维宇宙从而一举消灭所有无法在二维宇宙生存的敌人。歌者的“母世界”是虚拟文明的现实决定了它们在经过改造后，有能力在进入二维宇宙后继续存活，而它们的敌人“边缘世界”就未必了。</p><p>歌者文明的描述可能暗指了文明发展的另一个方向——基于数据体的虚拟文明。但是即使文明实现数据化，对资源的争夺仍然是首要的——姑且不提文明发展和扩展必然涉及的物质利用，仅仅从安全上的考量上看，数据体文明就需要大量的实体武器以免数据载体遭到毁坏。况且即使自身放弃资源掠夺，仍然无法肯定其他文明的“判断”，而其他文明也无法保证这个强大的数据体不会在某一天突然对自己发起攻击。这就是另一个意义上的猜疑链，即使强大如母世界也无法摆脱。</p><div class="snote danger"><p>好了，接下来让我们进入解刨，啊，错了，剖析歌者这个神奇的文明</p></div><h4 id="歌者的古老童瑶"><a href="#歌者的古老童瑶" class="headerlink" title="歌者的古老童瑶"></a>歌者的古老童瑶</h4><p>  <strong>我看到了我的爱恋</strong></p><p>  <strong>我飞到她的身边</strong></p><p>  <strong>我捧出给她的礼物</strong></p><p>  <strong>那是一小块凝固的时间</strong></p><p>  <strong>时间上有美丽的条纹</strong></p><p>  <strong>摸起来像浅海的泥一样柔软</strong></p><p>  <strong>她把时间涂满全身</strong></p><p>  <strong>然后拉起我飞向存在的边缘</strong></p><p>  <strong>这是灵态的飞行</strong></p><p>  <strong>我们眼中的星星像幽灵</strong></p><p>  <strong>星星眼中的我们也像幽灵</strong></p><p>  <strong>……</strong></p><h4 id="意义之塔"><a href="#意义之塔" class="headerlink" title="意义之塔"></a>意义之塔</h4><p>这是歌者文明追求的一切，就像法律书写在石塔上那样，“意义之塔”上记录一个文明的追求和价值观。在歌者文明的塔上，最高的是生存。</p><p>我们已知的歌者文明的塔上的内容：生存，乐趣，在不断熵增的宇宙中保持和提高自己的低熵水平。其中乐趣是最不重要的。在开战之后，乐趣因为意义地位较低，很大程度上被遗忘了。</p><p>在意义之塔的更高处，在歌者文明看不到的高处，还有更高的意义。但这不是这个层次的文明所能考虑和理解的事情。</p><p>这个文明层次最大的矛盾和任务，是生存。为了生存，他们必须战争、隐藏和清理。</p><h3 id="把海弄干的鱼"><a href="#把海弄干的鱼" class="headerlink" title="把海弄干的鱼"></a>把海弄干的鱼</h3><div class="snote idea yellow"><p>咳咳，不说了，切回正题</p></div><p>记得在《三体》中魔戒说：“把海弄干的鱼先上了陆地，从一片黑暗森林奔向另一片黑暗森林。”</p><p>我草率得理解了一下，大致是这样子。</p><div class="snote paperclip"><p>"把海弄干的鱼先上了陆地"的意思大概就是高纬度的生物先把自己改造成了低纬度的生物，海指的是高纬度，这里的鱼指的是维度打击者。但是却有一个问题，不同的维度对资源的使用是不同的，就比如说我们三维生物用木头造门，是为了把别人低挡在外面。但是在四维（只是举个例子），没有门这个概念，四维没有遮挡，直接穿透...所以就可以知道这么个道理：只有同维度的物种间才存在黑暗森林威慑。不同维度的物种间利用资源的方式是不同的，不存在威胁，不存在黑暗森林。高维物种降维打击后进去低维度空间，所以说"从一片黑暗森林奔向另一片黑暗森林。"</p></div><p>也就是说，发动降维打击者可能会先把自己改造成低纬度的生物，比如说魔戒；然后对自己之前或者更高的维度进行打击。它们就是把“海”弄干的“鱼”</p><h2 id="二向箔"><a href="#二向箔" class="headerlink" title="二向箔"></a>二向箔</h2><p>三维空间由长度、面积、体积三个维度构成。而二向箔与三维宇宙接触的瞬间，会使其中一个维度由宏观蜷缩到微观，迫使三维宇宙及其中的所有物质向二维宇宙坍塌，并在二维空间中“融化”为只存在长度和面积而失去了体积概念的绝对平面。</p><p>歌者在2403年朝太阳系投掷了二向箔，同年太阳系和和绝大多数地球人被二维化而灭亡。但根据小说细节可知，毁灭太阳系的二向箔要先于歌者，表明地球坐标暴露后，太阳系实际上已经遭到大量外星文明的集火，灭亡只是时间问题。</p><p>二向箔所造成的空间二维化永远不会停止，并且维度坍塌速度会逐渐达到光速。但倘若能借助曲率引擎等手段以光速先行逃离，那么摆脱二维化的命运依然是可能的。然而由于所有的宇宙规律都已被不择手段的星际文明们武器化并频繁使用，因此宇宙本身正在逐渐解体。</p><p>超弦理论描述下的宇宙时空由十个空间维度和单个时间轴共同组成，而维度武器的存在，暗示了高维宇宙已经或正在走向毁灭，其中的幸存者通过改造自身逃入了维度更低的宇宙。如今部分强大的三维文明也开始主动转化为二维生命以求在二维宇宙这一平面世界中继续生存。</p><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>由于科技水平上的巨大差距，地球文明在毁灭前仅有的一些观察和研究直到最后也未能触及二向箔的本质，通常认为剧情中先行离开太阳系的银河系人类可能对二向箔一类的维度武器有更深刻的认知。二向箔的实质可能只是单纯的一小片二维空间，也可能是真空衰变的产物，亦或者是更加难以理解的存在。二向箔在封装状态下由特制力场束缚，可永久保存，呈现出晶莹剔透的透明纸片状，而待机状态下其封装力场逐渐消散时会发出柔和的白光，看起来就像是一张完全无害的二维薄膜，并以光速飞向目的地。当二向箔逼近目的地时，其速度会迅速降低至光速的千分之一，此时它会出现明显的引力波特征。根据地球人的检测，这种引力波极为强烈，通常只来自于大质量的天体，因此二向箔理论上应该有接近木卫二的质量。但是被力场束缚着的二向箔却只有一张卡纸这么大，暗示了其本身隐藏着难以想象的能量。而当二向箔抵达目标空间后，封装力场就会逐渐消散直至最终消失，最终此武器接触到三维空间并不可逆地发动，将三维空间中的一个维度由宏观蜷缩到微观，导致三维立体空间塌陷，变成二维平面空间并不断扩展。而二维化的进程如同一个巨大的气泡无休无止的膨胀。在这个“气泡”膨胀的同时，周遭的三维空间本身也会逐渐被拉入气泡之中，就如同一个正在急速向外扩张的瀑布口，周围的物体还没有跌入其中，就已经被湍急的水流拉了过去。而这个瀑布是360°全方位的，没有任何一个角度可以摆脱被吞没的厄运，想要逃出生天，就必须赶在被瀑布吞噬前达到逃逸速度，而这个速度正是光速。这就是为什么当第一批遇难者的飞船以反方向推动引擎至最大功率，直至达到光速的15%时，仍然震惊的发现自己依旧在缓缓的向二向箔产生的二维空间“跌落”，最后只得眼睁睁的看着自己卷入二维宇宙之中。被卷入其中的所有三维物质不可避免地变为二维，丧失大量物理特性并在失去厚度概念后崩解，留下没有光学特征（由于二维物体没有厚度，因此光线将直接穿透二维物体而不会产生任何反射，完成二维化的物体逐渐变的透明以至无法目睹到）但有质量的二维平面残骸。这些平面残骸绝不是简单的被压扁，而是在失去高度轴后逐渐“融化”为一张物体“平面设计图”。理论上被二维化的物体可以展现出这些物体本身的全部细节，并以一种没有任何重叠存在的平面展开状态呈现出来。</p><p>三维物体被迫融化为二维物体后，期间大量无法直接转移到二维宇宙的物理特征丢失，并还原成纯粹的能量释放出来，正因如此，太阳系被二维化时，庞大的能量源源不断的覆盖在二维平面之上，以至于人类仅用肉眼就可以观察到那些被二维化的平面残骸。无论是那些被绝望所吞没且扭曲的平面人体，还是苦苦挣扎却还是被二维宇宙所支配的平面太阳，都清晰的映照在逃亡者的眼里。但是当二维化最终完成，这些平面残骸残存的能量耗尽后便会彻底湮灭在黑暗之中，成为没有厚度，不存在光学特征的二维物体，无法直接被观察到。而另一方面，伴随着三维宇宙的解体，二维化的坍塌速度却在不断增加，直至达到真空中的光速。在《三体》中，真空中的光速被设为宇宙内的最大速度，且没有对虫洞以及空间跳跃技术的描写（维度武器的存在实际上暗示了高维宇宙的毁灭，而虫洞等超光速科技需要四维甚至更多维度才能实现，因此在宏观世界开发基于更高维度空间的科技已经是不可能的了），所以此武器对不掌握光速航行技术的常规文明是绝对致命的巨大威胁。</p><p>二向箔发动后无法停止，因此可能会导致使用者本身也会跌落到二维。使用该维度武器的文明被描述为掌握了把自身改造成二维生命而保持在二维空间继续生存的技术，因此不受宇宙二维化的威胁。此外由于二向箔的原理是使一个维度由宏观蜷缩到微观，原本的高维空间并不是消失了，而是进入了微观状态而已。所以理论上若是文明把自己改造成微观生命，就可以在处于微观状态下的高维宇宙中生存（就像《三体Ⅰ》中被读者称为魔眼文明的微观宇宙文明一样，对于它们来说，它们生活的质子就是一个九维的高维空间），也不必惧怕二维化。而维度武器实际上已经在整个宇宙被大量的星际文明频繁的使用，很可能正是因为这些先进的文明已经拥有了在低维宇宙或微观宇宙中生存的能力，因此便反过来导致了它们对这一类维度武器的滥用。即便对于打算毁灭太阳系的歌者而言，二向箔也仅仅是非常基础和经济的清理工具，在其之上必然存在着“更为暴烈”的武器。歌者本人甚至也只是这个文明群体中地位最卑微的一位“清洁工”。</p><h3 id="外观"><a href="#外观" class="headerlink" title="外观"></a>外观</h3><p>长方形膜状物，长八点五厘米，宽五点二厘米，比一张信用卡略大一些，极薄，看不出任何厚度。封装状态下晶莹剔透、无色透明。待机模式下由于封装力场逐渐蒸发，会发出白光，使其表面呈纯白色，看上去就是一张纸条。</p><p><img src="/img/5.jpg" alt="二向箔表情包"></p><h3 id="二向箔的原理"><a href="#二向箔的原理" class="headerlink" title="二向箔的原理"></a>二向箔的原理</h3><p>其实从本质上说人类文明的劲敌-三体人的水滴（强相互作用力探测器）的科技还是经典物理学的利用，不过是将经典物理学运用到了极致。但是二向箔则是维度的变化，其利用宇宙规律作为武器，使对象从三维降到二维，导致大量的能量和物质信息丢失，最终泯灭于三维宇宙之中。</p><p>空间二维化，本质上说是将原本的三维空间中的单个维度卷曲压缩，进而实现对空间的逐步吞噬和拆解，原来的三维空间多数部分将不复存在，变成了二维的了。其实这是一个无限缩小和拆解的过程，一个点和一根线段比起来，长度为零。一根线段与一个平面比起来，面积为零。同样，一个二向箔与任何一个有限的三维体比起来，体积为零。</p><p>我们可以这样想象二向箔：在二向箔中，二维化的能量场极低。当我们像《三体》中想象的那样，用特制的力场将未被激活的二向箔包起来，它就不会危害我们的三维空间。</p><p>可是，当二向箔一旦与三维空间赤裸裸地接触，它就变得像沸水中的气泡那样，开始膨胀起来，但由于它是二维的，只会增大面积，像气泡一样不断扩张体积的是它产生的二维化进程。它触发我们三维空间的能量场向能量更低的地方跳。在这个场跳的同时，二向箔却越长越大。</p><p>也有部分读者认为二向箔的原理是真空衰变，也就是一块力场包裹的绝对真空</p><h4 id="研发历史"><a href="#研发历史" class="headerlink" title="研发历史"></a>研发历史</h4><p>通过对基本粒子结构的拆分再重组，构造一个空间结构完全不同的区域。用力场隔离其和正常空间的接触。</p><p>维度武器的存在，可能暗示了现存的三维宇宙本身就是高维宇宙遗留下来的废墟，并且战争还在延续，仅存的三维空间仍然在进一步解体。从另一个角度也说明，二向箔和它所属的维度武器有着人类无法想象的悠久历史。</p><h3 id="攻击范围和影响"><a href="#攻击范围和影响" class="headerlink" title="攻击范围和影响"></a>攻击范围和影响</h3><p>未知，影响范围会迅速扩大，但三维跌落的速度止步于光速。至于对遥远宇宙的影响未知，根据小说描述，如果时间足够长，可能使宇宙全部跌落到二维。但是根据书中人物的经历时间，二向箔并没有使宇宙全部跌落，因此二向箔影响范围应该是星系级别的，由于三维宇宙自身的膨胀（四维宇宙向三维宇宙的跌落），单个二向箔或许永远无法染指全宇宙。</p><p>单个维度武器的影响力注定有限，究其原因可能正是因为宇宙的膨胀，宇宙膨胀速度大于光速，因此被打击星系与距离其较远的星系相互离开的速度可能凌驾于光速之上，即大于三维空间跌落的速度。因此与打击星系之间距离为某段常数值的星系可能避免跌落至二维，又能使被打击星系中的文明能够到达此星系。</p><p>使周围的三维空间向二维跌落，并且二维范围迅速扩大。根据小说描述其逃逸速度为光速，除非被攻击文明拥有可以达到光速的飞船，否则任何物体均无法幸免。此方法比使用质量点杀伤范围更彻底。根据实际情况，被攻击文明如有达到光速的飞船，是能够逃脱的。</p><div class='tip warning'><p>大刘在书中借关一帆之口说了：“三维向二维的跌落永远也不可能休止！”<p></div><h3 id="副作用"><a href="#副作用" class="headerlink" title="副作用"></a>副作用</h3><p>由于作用范围可能会扩大，<code>最终使用者本身也可能跌落至二维</code>，所以一般限制使用。但是向太阳系攻击的文明似乎开始改造自身以适应二维宇宙，以便消灭对手，同时避免自身灭亡。但这也可能导致最后整个宇宙全部跌落至二维的后果。</p><h3 id="如何保存"><a href="#如何保存" class="headerlink" title="如何保存"></a>如何保存</h3><p>用特制的力场封装，以便与周围世界隔开，防止对己方产生危害。根据封装方式可知理论上二向箔可以隔离并防止扩散，但实际除了提到歌者文明进行了一些简单限制之外，未有文明防止二向箔扩散的描述。</p><h3 id="情节"><a href="#情节" class="headerlink" title="情节"></a>情节</h3><p>在太阳系内行星带激活后约九天时间便将整个太阳系二维化。除了多年前已经逃离太阳系的“星舰地球”文明的人类和通过光速飞船逃脱的程心和艾AA逃脱了攻击以外，人类几乎全军覆没。另外，据长老和“歌者”（歌者文明的一名基层宇宙物质清理员，歌者文明即由其的名称命名，因为小说中并没有说明歌者所在的文明的名称）的对话可知二向箔已在其他很多战场被各种文明使用，已经造成三维宇宙的广泛崩解。</p><p>注：歌者的飞船是在银河系猎户座旋臂，掩体纪元67年（以地球为参照系）对太阳系发射的二向箔。而人类观测到的对太阳系发动黑暗森林打击的飞船是在掩体纪元66年（以地球为参照系），位于太阳系奥尔特星云外围，距离太阳一点三光年的位置发射的二向箔。太阳系收到二向箔是在掩体纪元67年。虽然二向箔是以光速飞行，但也不会使时间倒流。所以歌者向太阳系发出二向箔时，已经有另一个二向箔要到达太阳系了。人类观测到的那艘发射二向箔的飞船不是歌者的飞船，毁灭太阳系的二向箔也不是歌者发射的那个。</p><div class="tip socd font5 fas fa-bell"><p>在黑暗森林里，不止一个猎人对地球开了枪。这也正好印证了长老对歌者所说的话：“你再快也有比你快的。”</p><p></p></div>]]></content>
      
      
      <categories>
          
          <category> 学习日记 </category>
          
          <category> 物理学 </category>
          
          <category> 科幻历险记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 物理学 </tag>
            
            <tag> 科幻历险记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github的使用</title>
      <link href="2020/11/15/Github%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>2020/11/15/Github%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><p>这里我简单介绍一个网页版的基本使用方法，如果大家使用网页版的话，我建议英语不好的人使用谷歌浏览器，谷歌浏览器的好处就在于可以一键翻译当前网页成中文。</p><p><img src="https://img-blog.csdn.net/20180408174554787"></p><p>登陆到自己的主页之后，右侧就是自己的所有分支，我的是我自己创建了两个，中间那个是当时为了测试保存的别人代码。</p><p>如果想创建新的分支的话可以点右侧绿色的按钮，创建分支的方法和桌面版是一样的。我现在要往bit这个分支里边上传代码。</p><p><img src="https://img-blog.csdn.net/20180408174606695"></p><p>进入分支之后，你可以选择，创建新的文件，或者说上传新的文件。这里创建新的文件和上传文件在我看来是有区别的。</p><p><img src="https://img-blog.csdn.net/2018040817461913"></p><p>创建新的文件，和写博客是一样的，首先起个名字，然后将你的代码复制进去。</p><p><img src="https://img-blog.csdn.net/20180408174628111"></p><p>往下拉然后点绿色按钮上传就可以了。</p><p><img src="https://img-blog.csdn.net/20180408174642289"></p><p>如果点上传文件的话就可以直接将你之前所写的.c、.cpp文件直接上传。</p><p><img src="https://img-blog.csdn.net/20180408174700360"></p><p>点击选择文件，然后找到你的文件直接上传即可。</p><p>但是，其实github网页版是可以直接上传文件夹的，但是这算是一个隐藏的功能，如果想上传文件夹的话需要找到你上传的文件夹，直接拖入到刚刚的对话框内。</p><p><img src="https://img-blog.csdn.net/20180408174712573"></p><p>直接将文件夹拖入对话框就可以直接上传文件夹。</p><p>如果想要删除某个文件或者文件夹的话，github是相对来说比较难找到的。</p><p><img src="https://img-blog.csdn.net/20180408174724525"></p><p>找到你想要删除的文件夹，点击进入之后找到setting按钮，之后拉到界面的最下边</p><p><img src="https://img-blog.csdn.net/20180408174733258"></p><p>指向的按钮就是删除按钮。</p><p>这就是github网页版的简单操作。不知道是不是真的网页版被墙了的原因，我上传经常上传失败，各个步骤的上传失败，多试几次就行了。</p><h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><p>首先，我先对GitHub来一个简单的介绍，GitHub有一个很强大的功能就是，你在服务器上边可以创建一个库（稍后会介绍怎么创建），写代码是一件很重的任务，尤其是很多人完成一个很大的项目的时候，就十分的复杂，一群人一起来写某个项目，大家完成的时间，完成的进度都是不相同的，你写一点我写一点，甚至可能你今天写的出现了错误，影响到了我昨天写的代码，最后怎么才能将大家的代码轻松的汇总起来，又怎么在汇总所有人的代码之后发现错误等等一系列问题。这样我们就用到了GitHub这个软件。我们在GitHub服务器上有一个主仓库，这里用来储存你的所有代码，如果不付费的话是所有人都可以看的，如果你不想让别人看到你的代码，可以选择付费仓库。我们创建了主仓库之后，就可以在电脑上创建分支，之后你就可以在电脑上完成自己的代码，写完之后直接同步在电脑的分支，当你认为可以上传的自己的主仓库时，就可以申请更新，当通过审核的时候，你代码就出现在了自己的主仓库中，这样全世界的程序员都可以查看你的代码。全世界现在已经有300万的注册用户，甚至还有一些相当知名的开源项目也在其中公布代码。在GitHub上你可以看到很多计算机领域的精英所分享的自己的代码。这是GitHub的两个主要优点，适合团队协作，以及下载其他优秀者的代码。</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/05/github-repos.png"></p><p>今天，GitHub已是：一个拥有143万开发者的社区。其中不乏Linux发明者Torvalds这样的顶级黑客，以及Rails创始人DHH这样的年轻极客。</p><p>· 这个星球上最流行的开源托管服务。目前已托管431万git项目，不仅越来越多知名开源项目迁入GitHub，比如Ruby on Rails、jQuery、Ruby、Erlang/OTP；近三年流行的开源库往往在GitHub首发，例如：BootStrap、Node.js、CoffeScript等。alexa全球排名414的网站。</p><p><img src="https://img-blog.csdn.net/20170912221840100?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSGFuYW5pX0ppYQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"></p><p><a href="https://github.com/">https://github.com/</a> 这是GitHub的官方网站，在官网上可以注册属于自己的GitHub账号，网上是全英文的，对于英语不好的同学建议使用谷歌浏览器，谷歌浏览器可以翻译网页变为中文使用起来十分方便。</p><p><img src="https://img-blog.csdn.net/20170912221912992?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSGFuYW5pX0ppYQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"></p><p>通过简单的步骤之后你就会有一个属于自己的GitHub账号。再简单注册完成之后会需要验证你所输入的邮箱才能正常使用你的GitHub。</p><p>在注册完成之后，完成一些简单的设置之后，你需要创建一个属于自己的库</p><p><img src="https://img-blog.csdn.net/20170912221942144?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSGFuYW5pX0ppYQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"></p><p>在登陆自己的GitHub账号之后，在网页右上角的小加号是用来创建自己的库的按钮，之后的步骤将网页翻译成中文之后，按提示进行创建自己的库即可。</p><p><img src="https://img-blog.csdn.net/20170912222027087?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSGFuYW5pX0ppYQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"></p><p>第一个框是自己为自己的库起一个名字，第二个框是自己对库的一个简单介绍</p><p>在创建完成自己的库之后，下面就要让自己的电脑克隆一个自己所创建的库，方面自己电脑上的代码同步到GitHub你所创建的库当中。</p><p>为了实现，就需要安装一个软件，Git Bash。</p><p><img src="https://img-blog.csdn.net/20170912222056079?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSGFuYW5pX0ppYQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"></p><p>下面我就介绍一下这个软件的安装，以及简单的配置。</p><p>git-scm.com 首先进入GitHub官网，下载适合自己电脑的版本</p><p><img src="https://img-blog.csdn.net/20170912222324265?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSGFuYW5pX0ppYQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"></p><p>下载完安装包之后运行</p><p>在安装过程中直接默认选项即可。</p><p>很多人第一次打开这个GitHub的时候一脸懵逼，认为这是什么。对于一个新手来说看到这个是没有任何思路，没有任何想法的。</p><p>这一栏 开始是你的计算机的名字在我这里就是Hanani @后边的内容是你的计算机型号，很多时候有的人打开之后@后边是乱码，这个时候也不要在意，因为有些电脑型号是中文的，可能在显示的时候出现了问题，不影响你后期的操作。</p><p>接下来，就要开始获取属于你自己的密匙。在git bash中所有功能都是通过简单的一些代码来实现的。获取密匙的时候需要输入</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Bash"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen-t rsa-C <span class="string">&quot;your_email@youremail.com&quot;</span></span><br></pre></td></tr></table></figure></div><p>需要输入这个代码，引号内需要改成你在注册GitHub的时候绑定的邮箱账号。之后会有一些简单的让你确认的操作，之后让你会提示操作路径、密码等等，一般情况下就直接按回车一路过就可以</p><p>如果之后你出现了这个界面之后，就说明你的密匙已经成功创建了。现在你就需要去他刚刚显示的存储位置打开它，把其中的内容复制出来。</p><p>之后你会看到这些内容，有的人会在id_rsa后边带有一个pub，之前看网上教程需要找到带pub的文件，因为我在生成后没有带.pub的文件，怀着忐忑的心打开id_rsa后发现这里边的密匙也是可以使用的。打开id_rsa的时候需要用记事本的方式打开。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Code"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDIskXqZF3SSFtACK6zoNGJabikTBC3kig6+4j4dCq1tswhA9YkuJCi0WpRmGYWBQ67dyT2or7RedFZlULLZN3nL6AWlo5V2jRXw4WQxCon2rU1p122wmiTzqYOfsykjwullWV4bYcZU4n77A4&#x2F;9WwlSqZCpEbcdwV8IMkvwfJUInSWqTvmgsL&#x2F;Tfx7aEB8UjDNJ6SPw30Yijy+62YrftYGgbuwoiL9hDNGO2LfjgOkglHTBJaZe31uQLLWc5uCzd+7Dgh7RaKMmeuz2Uv7yqm&#x2F;IEU9jH8cPMR9YRPIhmzg38G2s9ILn27QqW9j1hrFY1V 15229020556@163.com</span><br></pre></td></tr></table></figure></div><p>这就是我所获取的密匙(删改，保密)，打开之后很长的一段，不要惊讶，没有问题，这就是你所需要的密匙。</p><p> 现在你就需要登录到你的GitHub上边添加这个密匙，</p><p>打开你GitHub的设置界面，找到SSH and GPG keys这个选项之后，在网页右上角有一个添加新的SSH keys 点击</p><p>这里的title 是让你给你的密匙起一个名字，根据个人喜好，什么名字都可以，然后把你在刚刚文件中复制的密匙，填写在下边的大框里。保存即可。</p><p>之后你就可以回到你的Git bash上边了</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Bash"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure></div><p>然后输入上边的代码，来检查是否成功绑定。第一次绑定的时候输入上边的代码之后会提示是否continue，在输入yes后如果出现了：You’ve successfully authenticated, but GitHub does not provide shell access 。那就说明，已经成功连上了GitHub。接下来还需要简单的设置一些东西。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Bash"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.email “you@example.com”</span><br><span class="line">$ git config --global user.name “Your Name”</span><br></pre></td></tr></table></figure></div><p>输入上边的代码，name最好和GitHub上边的一样，email是一定要是注册GitHub的那个邮箱地址</p><p>这两个的顺序可以颠倒，没有固定的顺序。</p><p> 下面就要将你的库克隆下来到本地电脑中，方便以后进行上传代码。</p><p> 在库创建完成之后 会有一个网址出现在网页中。</p><p>个人习惯将自己的文件储存在d盘之中，所以你先需要将git bash定位在d盘中</p><p><img src="https://img-blog.csdn.net/20170912223554111?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSGFuYW5pX0ppYQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"></p><p>在git bash中输入 cd /D 注意盘名字一定要是大写。如不输入这个语句 不给git bash定位的话，默认的本地文件位置是在c盘中。</p><p>开始推文件到你的GitHub仓库，打开iGithub个人主页，如果格子绿了，那就是推上去了。</p><p>再之后，你只需要将你的代码，放到库的对应的文件夹中，然后使用，git add 、git commit -m “   “ 、最后git push origin master，将你的代码提交就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> Toss Note </category>
          
          <category> HEXO </category>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>熵</title>
      <link href="2020/11/15/%E7%86%B5/"/>
      <url>2020/11/15/%E7%86%B5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>熵(entropy)这个概念为什么可以被引用到科学的多个不同的领域呢? (物理，计算机视觉，信息论等等)</p><p>这里我就来谈谈物理学上的熵，和信息论中的熵联系在于哪里。 为了帮助理解和应用，最后有几个关于熵的应用的有趣例子。</p><p>熵最早来原于物理学. 德国物理学家鲁道夫·克劳修斯首次提出熵的概念，用来表示任何一种能量在空间中分布的均匀程度，能量分布得越均匀，熵就越大。<br>一滴墨水滴在清水中，部成了一杯淡蓝色溶液<br>热水晾在空气中，热量会传到空气中，最后使得温度一致<br>可以注意到些能量分布的变化的过程都是都是不可逆的(你不能期望清水中的蓝色分子 自动地聚成一滴墨水,放在空气中的汽水能 自动变成开水)， 所以这些系统的熵都在慢慢地增加。</p><p>而物理学第二定律描述的就是，宇宙中这些不可逆的过程的变化规律，而自然界中的一切自发过程都具有不可逆性. 所以熵增加是一个很普适地概念，说明了宇宙的发展具有方向性, 也就是向着熵增大的方向发展。 而这些推动事物向熵增大方向发展的力量（规律）， 被称为熵力。更多的一些生活中的例子:<br>熵力的一个例子是耳机线，我们将耳机线整理好放进口袋，下次再拿出来已经乱了。让耳机线乱掉的看不见的“力”就是熵力，耳机线喜欢变成更混乱。<br>熵力另一个具体的例子是弹性力。一根弹簧的力，就是熵力。 胡克定律其实也是一种熵力的表现。<br>万有引力也是熵力的一种(热烈讨论的话题)。<br>浑水澄清<br>宇宙发展的尽头就是熵达到最大，所有物质温度达到热平衡。这样的宇宙中再也没有任何可以维持运动或是生命的能量存在（热寂）。</p><p>以上是从能量分布角度看熵的定义, 从 微观分子角度看，熵表征了这个系统的混乱程度(与微观状态数量有关，比如说粒子所处的能级(E)可以作为状态). 所有微观粒子的状态只有一种时,也就是混乱程度为0。而当3个粒子分别处于状态1,2,3 时。这个系统的熵就是k*ln(3),总而言之就是微观状态越多，熵越TM大.</p><p><img src="https://img-my.csdn.net/uploads/201303/09/1362761362_7730.png"></p><p>于是从微观看，熵就表现了这个系统所处状态的 不确定性程度。香农，描述一个信息系统的时候就借用了熵的概念，这里熵表示的是这个信息系统的 平均信息量(平均不确定程度)。<br>所以当我们说某句话的时候，会帮助你消除一定不确定程度,而消除程度的多少就是信息量的多少. 通过计算[2]，常用汉字的熵要大于英文字母的熵，所以你说相同长度的中文很有可能比英文表达的意思要多哦。</p><p>除了信息论，很多地方都借用了这个可爱的概念。</p><ol><li><p>(信息压缩编码)霍夫曼(Huffman)编码: 设计一个信息系统，使得其熵最大，（编码的平均信息量最大）， 于是使得发送效率最高。</p></li><li><p>(计算机视觉)这文章里，介绍了用熵变化来检测出一个图片的显著点.(e.g.一只在墙上的手). 原理就是这些有突出特征的点，都是表现出很强的不确定性(熵)。于是把这些点找出来,就很有可能是你想要的（特征突出的东西）</p></li><li><p>（自然语言处理） 在翻译的时候，一个 句子J, 可能有 n种翻译(f1,f2…fn),还有一些 知识Z(比如在这篇武侠小说里，f3,f4这两个翻译的可能性更大)。现在你要建立一个模型来描述这n种翻译的可能性(概率分布)是怎么样的, 最好的模型也就是让这几种翻译的概率分布的 “熵” 最大。 学术一点说，就是在已知的前提下，请将未知的东西做最不可预测(熵最大)的推断。这就是 最大熵模型的思想。</p></li></ol><p>有趣的问题是， 在这些系统中，会不会也存在和宇宙一样的，熵不断增大的系统呢? </p><p>或者通过观察某些熵不断增大的信息系统(像语言系统，熵总是不断增大的，因为，人们总想更快更简单地表达一些信息)，能不能推导出这是由一种不可逆的力量产生的变化?这种力量又是什么呢?</p><p>常见科普书上说，熵，就是混乱程度的量度，一个系统越对称，就越混乱，熵就越大。这无疑给了众多的不求甚解者以艺术般的幻想，以至于跨学科地误用和错用熵概念的现象泛滥。</p><p>有个问题，即是很多物理学专业的学生，也常搞错。这个问题就是：一盆脏水，搅浑后封闭起来作为状态0；在地球上不管它，浑水会自然澄清，分层，这是状态1。问：从状态0到状态1，熵是增加了，还是减少了？</p><p>很多人会认为熵减少了。甚至一些物理学家也犯这个错误，在科普作品中说引力是能抵抗熵增的，所谓熵增定律带来混乱，而引力可能抵抗熵增而带来秩序。</p><p>果真如此吗？当然不是。热力学第二定律，在引力下一样表现的很明显，引力丝毫不会导致熵减。只是人们头脑中被科普灌输了错误的熵图像而已。</p><p>先说一个规范。物理学家在看到自由落体下落的系统的时候，发现落体动能在增加，但这时他绝不会说：由于落体的动能在增大，所以能量不守恒，能量在增大。而是说：自由下落系统的总能量是守恒的，因为势能转化为动能，动能才因此增加。保守力提供了势能，或势场，这是始终要考虑去的能量形式。我们说封闭系统的时候，始终就把势能（势场）封闭进去考虑了。势能场是不能随意中途加入或移除的，除非你额外输入能量—你不能不做功而把地球上的物体送入无引力场的太空中去。</p><p>同样，严肃的物理学家，针对脏水澄清现象，决不会说：考虑地球，则熵增；如果不考虑地球，则脏水系统是熵减的。说到熵，一开始就要考虑各种能量分布形式的影响，包括势能。</p><p>熵在历史上有两种定义，一种是克劳修斯的热力学宏观定义，一种是波耳兹曼的微观定义。这两种定义是协调的，没有矛盾。微观定义可以为宏观定义提供几率解释。</p><p>我们先从宏观热力学上看脏水澄清系统的变化。脏水自然澄清时，比重大的泥沙会下沉，这导致系统的重心下移。系统的总势能是这样计算的：系统重心的高度x 系统的重量：</p><p>U（势）=Mgh</p><p>系统重心下移，意味着系统的总势能减少了。既然是封闭系统，意味着总能量是守恒的。那么减少的势能到哪里去了呢？转化为粒子无规则的热运动，即热能了。这样，根据不可逆过程的热力学熵的定义式：dS&gt;dQ/T，热量增加即dQ&gt;0，所以熵增 dS&gt;0，熵增定律成立。</p><p>很多人感到奇怪之处就在于：脏水澄清的过程，不是使系统更有序了吗？你看，本来是混乱的浑水，现在分层了，有秩序了，难道不是这样吗？</p><p>这是试图从熵的微观概念出发想问题，但可惜的是，这样的直觉式的熵概念是错误的。</p><p>微观的熵概念，或波耳兹曼的熵概念，不是单指粒子在三维几何空间中分布的混乱程度；而是指粒子在一定外场势能分布条件下，在粗格化的“相空间 ”–包括所有粒子的位置维度和动量维度的数学空间–中的分布的混乱程度。简单地说,粒子在相空间中对称(或混乱)与否,不是只看粒子的位置分布,而且还要看粒子的动量、能量分布状态。一个简单的例子是:一些在同一水平面上的空气分子,即使它们在平面空间上的所处位置来看是分布均匀的,但只要它们的动量或能量分布不均匀,那么它们在相空间中的分布就是不均匀的、不对称的或者说是较有序的、较不混乱的。系统的这个“混乱”程度，即波尔兹曼熵，有严格的计算方法，其结果可能完全不同于人们的几何直觉印象。</p><p>波尔兹曼熵定义是：S=klnΩ</p><p>其中S是封闭系统在某种状态下的熵，k是常数，而Ω是指这种状态下的微观态数目。</p><p>我们不要怕麻烦，一定要用图形，找出脏水澄清前后的微观状态数的变化，如果微观状态数变大了，就说明系统的熵增加了，也可说明与热力学宏观定义的理解不矛盾了。</p><p>为了简便，我们假设简单的粒子情况，这个模型推广到极多粒子情况也完全适用。</p><p>1）假设脏水系统有3个粒子，一个是泥沙类的重粒子，另外两个是水分子。</p><p>假设重粒子的质量是水分子的2倍，我们把它称为(2a)，重量为2；而把其中一个水分子称为a1，把另一个水分子称为a2. 每个水分子的重量都是1。</p><p>2）假设脏水混沌后为封闭系统，总能量守恒，总能量为9个单位。就是说，(2a)，a1和a2三个粒子的总能量是守恒为9的。再假设三粒子除了自身的动能和重力势能，别无其他能量。</p><p>3）各粒子的空间高度可以为1m,2m或3m，在这些之间的高度要做四舍五入，有微小的差别可视为全同。这叫把空间或势能粗格化。</p><p>4）设各粒子的动能可分别为0，1，2，或3…等，在这些之间的动能取值要做四舍五入，有微小的差别可视为全同。把动能粗格化。</p><p>5）粒子位置空间只考虑1维的情况, 即粒子的位置区分只有上下而没有前后左右。</p><p>先假设重粒子(2a）在系统的最上层，3m处占据。图中，符号“a1-&gt;1”，表示此状态下粒子a1的动能为1。每个系统态图的右边的数字，是每个高度上的能量分布，它等于此层上所有粒子的（动能+势能）的和，每个粒子的势能的计算方法是其重量乘以高度。</p><p>我们先看重粒子(2a）在系统的最上层的情况下，系统粒子不同能量分布的微观态的几种可能性：</p><p>微观态1：</p><p>第3m层：(2a)-&gt;0———-此层动能=0，势能=2x3=6, 总能量=6<br>第2m层：无粒子———–此层动能=0，势能=0, 总能量=0<br>第1m层：a1-&gt;0, a2-&gt;1—–此层动能=0+1=1，势能=1+1=2，总能量=1+2=3</p><p>微观态2：</p><p>第3m层：(2a)-&gt;0———-此层动能=0，势能=2x3=6, 总能量=6<br>第2m层：无粒子———–此层动能=0，势能=0, 总能量=0<br>第1m层：a1-&gt;1, a2-&gt;0—–此层动能=1+0=1，势能=1+1=2，总能量=1+2=3</p><p>微观态3：</p><p>第3m层：(2a)-&gt;0———-此层动能=0，势能=2x3=6, 总能量=6<br>第2m层：a1-&gt;0————此层动能=0，势能=2, 总能量=2<br>第1m层：a2-&gt;0————此层动能=0，势能=1，总能量=1</p><p>微观态4：</p><p>第3m层：(2a)-&gt;0———-此层动能=0，势能=2x3=6, 总能量=6<br>第2m层：a2-&gt;0————此层动能=0，势能=2, 总能量=2<br>第1m层：a1-&gt;0————此层动能=0，势能=1，总能量=1</p><p>微观态5：</p><p>第3m层：(2a)-&gt;1———-此层动能=1，势能=2x3=6, 总能量=7<br>第2m层：无粒子———–此层动能=0，势能=0, 总能量=0<br>第1m层：a1-&gt;0, a2-&gt;0—–此层动能=0，势能=1+1=2，总能量=2</p><p>可见在重粒子(2a）在系统的最上层的情况下，系统不同能量分布的微观态有且只有上面所示的5种可能。 读者可以检验：任何局限在此空间中的、这三粒子的其他的势能或动能分布，都不会使总能量为9。</p><p>注意，即使只考虑高度上的1维空间, 一个动能不为0的粒子, 某个确定的动能也可对应两个确定的动量, 这两个动量大小相等、方向相反, 因为动量的方向有朝上和朝下的两种可能。于是，相空间(位置和动量空间)中, 总微观态数目, 比单纯考虑能量分布形式的微观态数目要多。计算方法是: 每1个能量分布态, 若其中3个粒子动能都为0, 则其对应有1种动量分布; 如果3个粒子只有1个动能不为0, 则其对应2种动量分布; 如果动能有2个不为0, 则对应4种动量分布;如果3个粒子动能都不为0, 则对应8种动量分布。</p><p>参考各种能量分布状态再计算这种情形下相空间（能描述所有粒子的各种不同位置和不同动量的数学空间）的微观态可知：</p><p>一个重粒子在3m处的条件下, 系统微观态数应是Ω=8，即熵S=kln8.</p><p>以上相当于重力场中的浑水状态，状态0。</p><p>再看类似重粒子下沉，脏水澄清的情况下的熵。只要假设重粒子在最下层即可。实际上，还有此1重粒子伴随1个水分子同时在最下层的情况，我们暂且不考虑。 我们将知道，即使只考虑一个重粒子在最下层的情况时， 这种情形的分布可能性，也要比重粒子在最上层的情况，可能性或几率要大的多。</p><p>重粒子(2a)在最下层即1m处的不同能量分布形式下的微观态（粒子系统总能量仍恒为9）:</p><p>微观态1：</p><p>第3m层：无粒子—————-动能0，势能0<br>第2m层：a1-&gt;0, a2-&gt;3——-动能=0+3=3，势能2+2=4，此层总能量=3+4=7<br>第1m层：(2a)-&gt;0————–动能=0，势能=2，此层总能量=2</p><p>微观态2：</p><p>第3m层：无粒子<br>第2m层：a1-&gt;3, a2-&gt;0<br>第1m层：(2a)-&gt;0</p><p>微观态3：</p><p>第3m层：无粒子<br>第2m层：a1-&gt;1, a2-&gt;2<br>第1m层：(2a)-&gt;0</p><p>微观态4：</p><p>第3m层：无粒子<br>第2m层：a1-&gt;2, a2-&gt;1<br>第1m层：(2a)-&gt;0</p><p>微观态5：</p><p>第3m层：a1-&gt;0<br>第2m层：a2-&gt;2<br>第1m层：(2a)-&gt;0</p><p>微观态6：</p><p>第3m层：a2-&gt;0<br>第2m层：a1-&gt;2<br>第1m层：(2a)-&gt;0</p><p>微观态7：</p><p>第3m层：a1-&gt;2<br>第2m层：a2-&gt;0<br>第1m层：(2a)-&gt;0</p><p>微观态8：</p><p>第3m层：a2-&gt;2<br>第2m层：a1-&gt;0<br>第1m层：(2a)-&gt;0</p><p>微观态9：</p><p>第3m层：a1-&gt;1<br>第2m层：a2-&gt;1<br>第1m层：(2a)-&gt;0</p><p>微观态10：</p><p>第3m层：a2-&gt;1<br>第2m层：a1-&gt;1<br>第1m层：(2a)-&gt;0</p><p>微观态11：</p><p>第3m层：a1-&gt;0，a2-&gt;1<br>第2m层：无粒子<br>第1m层：(2a)-&gt;0</p><p>微观态12：</p><p>第3m层：a1-&gt;1，a2-&gt;0<br>第2m层：无粒子<br>第1m层：(2a)-&gt;0</p><p>微观态13：</p><p>第3m层：无粒子<br>第2m层：a1-&gt;0，a2-&gt;2<br>第1m层：(2a)-&gt;1</p><p>微观态14：</p><p>第3m层：无粒子<br>第2m层：a1-&gt;2，a2-&gt;0<br>第1m层：(2a)-&gt;1</p><p>微观态15：</p><p>第3m层：无粒子<br>第2m层：a1-&gt;1，a2-&gt;1<br>第1m层：(2a)-&gt;1</p><p>微观态16：</p><p>第3m层：a1-&gt;0<br>第2m层：a2-&gt;1<br>第1m层：(2a)-&gt;1</p><p>微观态17：</p><p>第3m层：a2-&gt;0<br>第2m层：a1-&gt;1<br>第1m层：(2a)-&gt;1</p><p>微观态18：</p><p>第3m层：a1-&gt;1<br>第2m层：a2-&gt;0<br>第1m层：(2a)-&gt;1</p><p>微观态19：</p><p>第3m层：a2-&gt;1<br>第2m层：a1-&gt;0<br>第1m层：(2a)-&gt;1</p><p>上面是重粒子(2a)在最下层即1m处的不同能量分布形式下的微观态的所有可能分布。要保证粒子系统的总能量（动能+势能）为9，粒子能量只有这19种分布可能性。</p><p>再依照这19种能量分布可能，计算它们在相空间(包括位置和动量)中的所有可能的微观态，可知这时粒子系统微观态数Ω=64，即熵S=kln64.</p><p>这个Ω=64远大于重粒子在最上层的可能的微观分布可能数Ω=8. 说明重粒子在引力场中位于下层的分布几率远大于其在上层的系统分布几率.</p><p>以上相当于重力场中的浑水澄清后的状态，状态1。显然这种情况下的熵，比重粒子在上的浑水状态的熵要大。</p><p>注意，这个微观态解释的直观重点是:</p><p>重粒子如果在上方,就会占据更多的能量(势能太大),而由于系统总能量守恒,其他轻粒子的能量和动量的分配可能性就减少了,微观态就少; 相对地,重粒子如果在下方,就会占据更少的能量(势能占据小),而由于系统总能量守恒,其他轻粒子的能量和动量分配可能性就增加了,微观态就多。</p><p>结论: 重粒子在下,有更大的分布可能性和几率。</p><p>所以重力场中浑水澄清的过程是朝微观态数目多、几率大的方向发展的,即熵增的过程。</p><p>从熵的微观解释看，熵大就是这种粒子分布状态的概率大。热力学第二定律，即熵增定律，就是预言系统将从概率小的分布状态，朝着概率大、可能性多的分布状态变化，朝着最可几的状态演化。</p><p>最后说说为什么很多人以为澄清分层的水更有序，熵更小。这是一种错觉，或对熵的片面理解，甚至误解导致的。错觉可能来自于无引力场的分布情况：在无引力场，或引力场的水平截面（等势能面）上，熵大常常意味着粒子在位置空间几何排列上的更无序，或更对称。 但这种直觉是不能任意推广的。</p><p>最后要说的是: 引力不会导致熵减, 这在霍金的黑洞热力学中也成立. 霍金的公式说黑洞的熵与黑洞的视界面积成正比–而黑洞的视界面积总在增加. 于是热力学第二定律–熵增定律毫无例外地适用于黑洞–有巨大引力的地方。</p><p>熵减错觉的简明心理分析</p><p>一个众所周知的常识是, 一个在引力场中封闭且绝热的单摆系统, 开始状态是单摆摆动, 但最终单摆会停止—- 单摆摆动的时候, 重力势能与动能不断转化, 但转化的效率不是100%, 而是一部分动能或势能(机械能)转化为无规则的分子热运动, 热能了. 这就是不存在永动机的热力学第二定律, 或熵增定律.</p><p>我们看,假如在引力场中封闭且绝热的单摆系统里, 有许多单摆, 初状态是在摆动, 而后逐渐都趋向于停止摆动了,那么, 同样,这个系统过程是熵增的, 机械能转化为热能了, 单摆最终都停止摆动了.</p><p>这个系统实际上与我说的浑浊的脏水孤立系统在引力场中变为澄清分层的系统过程, 完全是一样的. 但奇怪的是, 说单摆逐渐停止运动,很多人就可以理解是熵增, 而浑水澄清分层, 很多人就难以理解是熵增过程.</p><p>(问题:在地球上, 把一个脏水搅浑后封闭隔热后,设为0初始状态. 这个孤立系统在引力场中自发地逐渐澄清分层, 这个状态设为1状态, 问从0状态到1状态, 系统的熵是增加了, 还是减少了?)</p><p>完全类似的熵增过程, 一个是单摆垂下不摆了, 另一个是泥沙沉淀不往上窜了, 为什么熵增熵减的心理感觉会不同? 为什么人会有这个错觉?</p><p>我想, 这可能人受生物主观需要的影响. 人对分层澄清的水更有需要(人需要喝澄清的水), 但同时人又对单摆的摆动有需要, 比如观看, 定时等.</p><p>但科学是严谨的, 要把这些主观感觉去除, 按同样的物理定义和定理, 去理解</p><p>有人帮我设计了这个模型:</p><p>把清水和称砣装在绝热容器里，初始时称砣用细绳悬吊。之后细绳老化自然断掉, 称砣沉底，重力做功，温度上升，系统熵增。</p><p>无论如何, 只要是封闭(包括把保守力外势场算上)且绝热的系统, 内部的熵规律都一样:熵增.</p><p>在这一点上看, 秤砣落下, 与单摆停摆, 或泥沙在水中沉淀, 并无二致.</p><p>泥水澄清的过程，用更通俗的语言来表达，就是：‘当把泥水混合物看做孤立体系，泥水澄清的过程表面看上去熵降低了，但实际上系统的熵是增加的。’</p><p>需要强调的是，我们‘看到的’熵的变化，其实不是系统熵变的全部。我们看到的熵的降低，其实是混合熵的减小。注意，混合熵仅仅是这个体系中总熵的一部分，其他部分涉及到振动熵，位形熵，电子熵等等。但澄清过程与电子熵无关。</p><p>泥水澄清的过程中存在着能量的转换，势能转换为热能，尽管总能量保持恒定不变。势能变成热能导致体系温度上升，这时系统的振动熵与位形熵也随之增加。当假设体系的热容不变，这部分熵增量很容易计算。</p><p>总之，体系总熵，是多种熵变西格玛（加和）的结果。</p>]]></content>
      
      
      <categories>
          
          <category> 学习日记 </category>
          
          <category> 物理学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 物理学 </tag>
            
            <tag> 学习日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何像打王者一样学习？</title>
      <link href="2020/11/15/%E5%A6%82%E4%BD%95%E5%83%8F%E6%89%93%E7%8E%8B%E8%80%85%E4%B8%80%E6%A0%B7%E5%AD%A6%E4%B9%A0%EF%BC%9F/"/>
      <url>2020/11/15/%E5%A6%82%E4%BD%95%E5%83%8F%E6%89%93%E7%8E%8B%E8%80%85%E4%B8%80%E6%A0%B7%E5%AD%A6%E4%B9%A0%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1>如何像打王者一样学习？</h1><p>&#12288;&#12288;&#12288;&#12288;王者是什么？这篇文章不是说我这个学习方法是王者，别理解错了"王者"指的是《王者荣耀》，什么，你不知道王者荣耀？不会吧不会吧，该不会真的没有人会不知道王者荣耀吧？我简单来说一下：《王者荣耀》是由腾讯游戏天美工作室群开发并运行的一款运营在Android、IOS、NS平台上的MOBA类手机游戏，于2015年11月26日在Android、IOS平台上正式公测，游戏前期使用名称有《英雄战迹》、《王者联盟》。《Arena Of Valor》，即《王者荣耀》的欧美版本于2018年在任天堂Switch平台发售。王者荣耀中的玩法以竞技对战为主，玩家之间进行1VS1、3VS3、5VS5等多种方式的PVP对战，还可以参加游戏的冒险模式，进行PVE的闯关模式，在满足条件后可以参加游戏的排位赛等，是属于推塔类型的游戏。对，就是你经常玩的"王者"都知道王者有许多的机制，比如：排位机制，反馈机制，唯我独尊...</p><p>&#12288;&#12288;&#12288;&#12288;王者的反馈机制就足以让你爱上学习，首先呢，打王者的过程中，你可以刷野，而刷野就可以返还金币，不是吗？有了这些钱，你就可以强化自己，假如我一个亚瑟，我有10万经济，我可以干嘛？当然是买装备，成为最强亚瑟啊！！！而学习也是如此，你学习知识来强化自己，你可以干嘛？在班里横着走，你就有了和他人攀比的资本（虽然攀比很不好），不是吗？想着自己可以在喜欢的妹子面前大秀特秀？但是却因为没学好知识秀不起来，自己只会打王者？为什么你只会打王者？你可以好好想想，你只会打王者，你达到了王者段位，对所有的机制啊，出装啊都烂熟于心，可是你为什么不想想怎么把这些机制运用到学习中，于其漫无目的打王者，倒不如学习天美给的机制，在实际中运用好，不就可以在妹子们面前大秀特秀？你要想想学好了以后你可以有什么利益啊，就比如说我初一的时候，我妈说你考到前十我给你买台电脑，然后呢，我就真的考到了，这是为什么？我努力考到前十，就等于我努力刷了个野，反馈机制给了我一台电脑。不是吗？你学习了，那就肯定有收获！所以，奖励机制是很重要的，不然王者也没人玩啊，一局游戏伤害都一样，那还玩什么？而阶段性的反馈机制更是重要，王者荣耀补一个兵就能得到金币，致使你最终达到摧毁水晶的目的，如果中间没有补兵、升级、击杀带来的快感、强化装备这些实时的反馈，估计没人能够坚持十几二十分钟甚至半小时（LOL时间更长）的时间来不停的摩擦手机屏幕。包括嗑瓜子，为什么人们嗑瓜子，都是一个接一个？停不下来，因为这件事情轻而易举，只需要抬抬手，就能很快得给我们反馈，让我们感到愉快，所以就会对嗑瓜子这件事情乐此不疲。为什么刷抖音一刷半天过去了，可是自己却感觉不到。可是学习，一天、两天、一周、一个月、半年，甚至一年都没有什么变化，看不到成效，可是突然有一天，你会发现自己，hia hia 流弊 ~ 可是很多人都等不到那一天。所以我们要告诉自己：<br>&#12288;&#12288;&#12288;1. 只有努力地干XXX，才可以得到XXX<br>&#12288;&#12288;&#12288;2. 每完成一个小目标就给自己一个小小的奖励：看场电影、买一套新衣服、cherry键盘、换一个手机、换一个mac、说走就走的旅行，你能想到的自己想要的能满足自己欲望的但是平时又不敢或者不舍得且来之不易的东西。人都是有欲望的，当然如果你的欲望就是学习，那你就奖励自己再学五百年吧~哈哈。比如马上速度与激情：特别行动就要上映了，好像是八月二十三号，可以把这个当做奖励，督促自己在这段时间完成某个小目标，然后就去嘿嘿嘿~。比如每学习完某个小的阶段，奖励自己看一部电影（提前将自己最最最最最喜欢看的电影列一个清单）或者奖励自己弹两小时吉他。当你第一次出色完成任务，并得到奖励，后面再进行“反馈”，会轻松很多，如此往复，直到建立了完整的反馈机制，那你的身体就能跟着你的思想走了，也就可以把自己玩的团团转了。&#12288;&#12288;&#12288;3. 坚持玩那个种树的游戏（具体的名字我记不说了，不是打广告），将自己的学习量化，让自己知道自己努力了（虽然看起来像是仪式感太强，但是我觉得表面努力也是一种努力，不应该完全忽略，还有学习不应该怕被别人发现）。这是我认为目前将奖励机制做的最好的时间管理软件，最后希望能种植一棵真正的树，也算小小的成就感吧~哈哈<br>&#12288;&#12288;&#12288;4. Leetcode等网站做题，做出其中一道题也会给人短暂的快感、成就感。</p><p>&#12288;&#12288;排位机制：王者荣耀善用朋友圈+排名的机制，每个人都是希望自己与众不同、比别人强，这也是人类能够不断进步的根本原因，和上面的阶段性反馈一样，能够得到什么和希望比别人优秀都是人的本能，希望我们能善用人的本能。排名机制能够很好的激励了我们，如果能够将排名的机制用在学习中，相信任何人也会乐此不疲！为此我们应该：&#12288;&#12288;&#12288;1. 坚持写blog，写博客确实是个不错的学习方式，能够将自己的学习量化，看得见摸得着，给予实时反馈，排名、访客、徽章，增加成就感，不断激励自己。&#12288;&#12288;&#12288;2. 坚持玩种树的那个游戏。</p><p>&#12288;&#12288;唯我独尊：你LOL打了5杀，你不是很开心？是的，人的本性就是“唯我独尊”，让别人感觉到自己很重要。还有一打五，尤其是经济落后的时候一打五，包括丝血反杀，等等比较“秀”的操作，更是给人快感，尤其是和同学、朋友、女孩子，一起的时候，别人的一句“牛x啊，兄嘚儿”，自己也会对自己说一句，“我他吗真x”，这些都能让自己浑身的血液沸腾，“越战越勇”，这都是因为人的本性就是自重，每个人都希望与众不同，认为自己是世界的中心，世界的主宰，能够拯救世界，虽然随着年龄的增长，这种自重的意识被我们隐藏起来了，但是还是很强烈！只不过游戏带给我们的这种感觉更简单，如果是编程人员，或者说技术人员，等等其他一切职业，想要一打五，恐怕不是在电脑前苦练一两周就可以达到的，需要更长的时间，一年、两年，甚至更久，相信大家都听过“一万小时理论”，没错，想要成为专家需要大概一万小时。而游戏就不一样了，能够在很短的时间内，带给我们这种被关注、被重视的感觉，所以人们都愿意沉迷于游戏，日渐消瘦，而不愿意沉迷于学习，终生不悔。其实学霸为什么厉害？因为他们希望被认可，希望被关注，“小明好厉害，差一分满分”，他们享受这种被认可的感觉，而且相对来说短期内就能够得到，这就是为什么有周考、月考（忽然感觉自己分析的很透彻，hia hia），一次得到之后，还希望有下次，所以一直在不断的努力。而学渣为什么喜欢打游戏？因为他们喜欢被重视、被关注、被需要、被认可，既然学习上不能被得到认可，那么就要在游戏上有所“建树”，让别人认为自己很厉害。可是离开校园后，没有了考试怎么办呢？为什么不把这种本能用在有益的事情上呢？为此我们要：&#12288;&#12288;&#12288;1. 坚持写博客，短期内能够让自己感觉自己很厉害，被人关注着，其实说实话，每个人都在忙着自己的事情忙着如何被别人关注，没有太多的经历关注别人，就像我这篇文章，我写他用了小半天，你读它却只用了半分钟，但是我们得到了自我提升的小动力。&#12288;&#12288;&#12288;2. 反复的告诉自己：成为大牛得到的认可比玩游戏得到的认可要多的多的多的多，毕竟大家都不是小孩子了嘛。<br>&#12288;&#12288;&#12288;3. 给自己定一个工资翻倍、进入xxx公司等目标，也能有一种唯我独尊的感觉，虽然时间稍长，但是也不是一直看不到成效。<br>&#12288;&#12288;&#12288;4. 努力的让自己成为，“快去找xxx，这个问题只有他能解决”。<br>&#12288;&#12288;等等能够在短期给自己一种通过学习，让自己“一打五”了，这种感觉的方式。但是不要过分的和朋友们吹嘘自己在努力中的“一打五”，因为人都是自重的，小心失去朋友。好吧感觉又拐到阶段性反馈上了，不过你应该懂我的意思了。题外话：那些绿茶应该也是因为人的自重性吧，所以不能怪她们，因为这是本能。<br></p><p>&#12288;&#12288;阶段性、强制性计划:我要在今天晚上上星耀！结果是，就差一颗星，然后一晚上都没有睡，当然了这个例子不太恰当，这个和技术有关系，哈哈哈。再举个栗子，“一个亿”的小目标，其实这是大佬无私分享的真正的成功捷径，只是我们没有到达人家的高度罢了。给自己定一个可行的、短期的、具体的计划，让自己能够得到反馈。为此我们应该：<br>&#12288;&#12288;&#12288;1. 制作可行的、短期的计划、具体的计划<br>&#12288;&#12288;&#12288;2. 如果今天的计划没有完成，熬夜也要完成，不要拖泥带水，这样第二天为了避免熬夜就会更加努力，形成良性循环。如果第二天很努力了还是需要熬夜完成，就需要调整计划了。&#12288;&#12288;&#12288;3. 不要忘了第一条的阶段性奖励哦。&#12288;&#12288;&#12288;4. 给自己的阶段性计划定制时间，如果完不成奖励作废！离开校园后没有阶段性的考试，很多人都会掉队，如果每天都能过成大学考试周，那么其实你已经是一个成功的人了。</p><p>&#12288;&#12288;兴趣：这个就不多说了，从小老师就教给我们“兴趣是最好的老师”，兴趣也是我们不会感到疲惫的动力源泉。可是在我看来兴趣其实就是上面的及时反馈。为什么喜欢一样东西？你喜欢王者荣耀吗？喜欢，为什么？因为我能够得到杀人的快感、因为我能在短期内比别人强，因为它能够给予我们及时的反馈。你喜欢弹吉他吗？喜欢，为什么？因为我能通过拨动琴弦发出美好的声音，让自己开心，让别人认为“哇这个人好厉害”，因为它能够给予我们及时的反馈。你喜欢女孩子嘛？喜欢，为什么？因为我追她，她会时而亲近我、时而疏远我，多奇妙的感觉，每个人都喜欢这种感觉，如果那个女孩子你都跟她告白了，她没有任何反应，那你还会持久的喜欢下去吗？当然这个例子可能不太恰当，有的人就喜欢吊着别人，这是一种恋爱学，这里就不讨论了。但是我想强调的是，因为它能给予我们及时的反馈。为此我们应该：<br>&#12288;&#12288;&#12288;1. 从内心深处真切的喜欢自己将要切实执行的这件事情。<br>&#12288;&#12288;&#12288;2. 严格执行阶段性反馈机制的那几点。<br>&#12288;&#12288;心理动机和生理动机："心理动机有释放现实中积压的负面情绪、打发时间、跟随大流一起玩、追求虚拟价值等待生理动机是肾上腺素、内啡肽以及多巴胺这三种让人兴奋开学的神经激素，而这三种神经激素就是之前的心理动机所引起的。一百年前我们使用鸦片获得内啡肽的效果，一百年后我们使用手机获得内啡肽的效果，这三种物质产生会起到什么作用？肾上腺素主要是在战斗内起作用，他会让我们感觉“刺激”与“有趣”，内啡肽主要是在战斗后起作用，它会让我们“轻松”与“满足”，多巴胺则全时期在发挥作用，让我们有极强的动力继续玩下去，让我们觉得“渴求”并“上瘾”。我们可知，从生理的角度，玩家在游戏中主要是追求肾上腺素、内啡肽与多巴胺，让这三种化学物质大量分泌的过程。本质上讲，玩乐是人的天性，是顺应人性的，所以几乎人人爱玩。而学习却需要克服人性的弱点，是反荷尔蒙的，所以学霸才让人膜拜。借鉴游戏化思维，重新设计学习体验，也许达到让人沉迷学习不容易，但至少可以让学习变得更有趣，让更多的人在快乐中学习。以上，摘要至搜狐新闻"为此我们应该：<br>&#12288;&#12288;&#12288;1. 努力的建立反馈系统，一想到学习之后就能xxx，就会心潮澎湃，十分激动<br>&#12288;&#12288;&#12288;2. 学习的时候全神贯注，一个周期后全身放松（番茄工作法），如此往复</p><br><h2>最后总结下比较好的学习的方法：如下</h2>&#12288;&#12288;<h3>费曼学习法：</h3><p>&#12288;&#12288;&#12288;第一步：选择目标:<br>&#12288;&#12288;&#12288;&#12288;选择一个想要理解的概念, 然后拿出一张白纸, 把这个概念写在白纸的最上边尽可能的完全掌握这个概念。<br>&#12288;&#12288;&#12288;&#12288;记住，光看不行，要写出来，最好用自己理解的话写出来。光看一遍，只是一个信息而已，觉得看懂了，其实只是了解了一人信息。<br>&#12288;&#12288;&#12288;&#12288;写出来，写出来。在写的过程中，会发现，光看会了不一定就能写出来。<br>&#12288;&#12288;&#12288;&#12288;写不出来，再回头看下概念，看看哪里还不懂。<br>&#12288;&#12288;&#12288;&#12288;如此，经过几个回合，能把概念写出来了，这个概念就基本掌握了。</p>&#12288;&#12288;&#12288;第二步：教学<br>&#12288;&#12288;&#12288;&#12288;把自己想像成一个老师，对面有一个学生，把这个概念讲给这个学生听。<br>&#12288;&#12288;&#12288;&#12288;敢打赌，在讲的时候一定会卡壳，不怕，这说明还没有完全掌握，或者说，没真正掌握，还没有抓住这个概念的实质。这就是知识概念的薄弱点。<br>&#12288;&#12288;&#12288;&#12288;这个时候应该恭喜自己，因为发现了自己以为会其实不会的地方。回过头，再学习一下这部分，直到真正懂了，能轻而易举地讲给对面的学生了。<br>&#12288;&#12288;&#12288;&#12288; 教的方式有很多，可以教别人，也可以教自己，目前特别快捷方便的一个方法就是写作。<br>&#12288;&#12288;&#12288;第三步：纠错并深入学习<br>&#12288;&#12288;&#12288;&#12288;无论何时感觉不清楚了, 都要回到原始的学习资料并重新学习让你感到不清楚的那部分，直到领会得足够顺畅,顺畅到可以在纸上解释这个部分为止。<br>&#12288;&#12288;&#12288;&#12288;到了这一步，才说明真正掌握了这个概念。<br>&#12288;&#12288;&#12288;&#12288;别急，还没结束。做到这一步，掌握的还不是很扎实。<br>&#12288;&#12288;&#12288;第四步：简化<br>&#12288;&#12288;&#12288;&#12288;记住是用自己的语言, 而不是学习资料、课程中的语言来解释概念，是用自己理解的话讲出来！<br>&#12288;&#12288;&#12288;&#12288;简单化是直接找到问题的本质，和李笑来老师说的最少必要知识类似。<br>&#12288;&#12288;&#12288;&#12288;对面的学生听懂了么？只有用最简单清晰易懂的语言让听众听懂了叙述，才算真的牢牢掌握了这个概念。只有做到这一步，才说明真正掌握了。<br>&#12288;&#12288;&#12288;&#12288;有没有发现这种方法其实没有那么高深，是我们每个人都可以学会的。<br>&#12288;&#12288;&#12288;&#12288;最重要的还是去用。相信用一次就能体会到它的威力！<br>&#12288;&#12288;&#12288;&#12288;总结一下就是用最简单的方法讲给别人听，并且使得别人容易接受。我个人认为写博客就是一个比较简单的费曼学习法，尤其是在 博客园写博客，哈哈哈。<br>&#12288;&#12288;<h3>康奈尔笔记法：</h3>&#12288;&#12288;&#12288;在演讲报告现场，能够理解演讲者的意思，但日后需要回忆并使用时，演讲内容已是遗忘得一干二净；在课堂中，忙于记下已听到的内容而忽略了记笔记的同时听到的后续内容，甚至是错过了关键知识点，不能记录完整的内容，在手忙脚乱中凌乱了自我…这是因为记笔记技巧的缺失，因此只有掌握有效的记笔记技巧，才能在学习、工作和生活中抓住一切可能记录有价值的信息，才能将其真正地化为己用。<br>&#12288;&#12288;&#12288;康奈尔笔记法（Cornell Notes），又称5R笔记法，是康奈尔大学Walter PauK于1974年提出的一种有着固定格式的、系统的记笔记方法，通过将笔记空间进行分隔来提高记笔记的效率，是记与学、思考与运用相结合的有效方法（Pauk & Owens，2011；Broe，2013；雷慧青，2011）。康奈尔笔记法应用简单，适用范围广泛，尤其在课堂教学（Jacobs，2008；雷慧青，2011；Broe，2013；周琦等，2015；胡哲光，2016；王家蓉和李禄全，2017）、深度阅读（傅艳，2017；程亚萍，2017）等方面有着大量的实践应用，对知识的获取与理解有着明显的帮助。康奈尔笔记法的页面布局包括3个主要部分，包括笔记记录区域、提示栏、总结栏。当然，不同使用者对三个区域的命名有着些许差异，但区域功能都是一致的，如雷慧青（2011）将其划分为笔记内容、提示栏、概要区，周琦等（2015）将其划分为笔记栏、线索栏、总结，程亚萍（2017）划分为主栏、副栏、总结栏。在页面底部向上2英寸（约5厘米，相当于5-6行）的距离画一条水平直线，底部区域为summary area（总结栏）；在总结栏上部区域距离左侧2.5英寸（约6.5厘米）的距离画一条垂直直线，左侧区域为cue column（提示栏），右侧区域为笔记记录区域。但有时候为了笔记条理更加明晰，需要在笔记上方添加主题栏，记录课程名称、日期、演讲或阅读主题（Broe，2013；程亚萍，2017）。<br>&#12288;&#12288;&#12288;康奈尔笔记法包括：Record（记录）、Reduce（简化）、Recite（背诵）、Reflect（思考）、Review（复习）等5个关键步骤。<br>&#12288;&#12288;&#12288;记录：在听讲或阅读过程中，在笔记记录区域内尽量多记有意义的论据、概念等讲课内容。<br>&#12288;&#12288;&#12288;简化：记录完成后，及时将这些论据及概念简明扼要地概括（简化）在提示栏。<br>&#12288;&#12288;&#12288;背诵：遮住主栏，只用提示栏中的概要提示，尽量完整地复述听讲或阅读的内容。<br>&#12288;&#12288;&#12288;思考：将自己的听课随感、意见、经验体会之类的内容，写在卡片或笔记本的总结栏，加上标题和索引，编制成提纲、摘要，分成类目；总结笔记内容，促进思考消化，同时也是笔记内容的极度浓缩和升华。<br>&#12288;&#12288;&#12288;复习：定期花一定时间快速复习笔记，主要看总结栏和提示栏，适当看笔记内容。<br>&#12288;&#12288;&#12288;使用康奈尔笔记法能够帮助组织你的笔记，积极地让你参与到知识的创造中，提高你的学习技能，并带来学术上的成功（wikiHow）。这里将从“笔记准备”、“记笔记”、“复习和扩展笔记”、“利用笔记学习”等四个方面详细说明康奈尔笔记法的操作方法。<br>&#12288;&#12288;<h3>思维导图法:</h3><br>&#12288;&#12288;&#12288;Thinking Map比较流行，用思维导图做笔记，会让人在视觉环境中轻松地整理知识、建立联系。学会使用类比，把抽象信息具体化，发挥想象力，让知识内化。在脑海中构筑画面，抽象概念也能成为有用的直觉。思维导图加强了基础概念与复杂想法之间的连接。如何把一本三十万字的书简化成一张图，属于艺术加工，而不是机械摘录。习惯使用图表做笔记，确实能提升理解和记忆，但是记忆毕竟有很大局限，最好建立自己的数据库，遇到所需有能力一键调用。<br>      最后：人的精力是有限的，假如一个人的精力是10，工作用了7，游戏用了2，最后只要1的精力去学习，而学习是对于你来说很重要的事情，那你能做好吗？学生时代不乏听说谁谁谁，游戏打得好，学习也好，对不起不存在这样的人，就算真的有，其他他可以把学习做的更好！为此我们应该：摒弃游戏、淫欲、酒精这样强刺激的东西。<br>可能很多人会问，种树的游戏是什么？是这个：Forest（我没打广告！！）。<br>> 如果说，青春，是足迹。那么，梦想，一定是远方！青春有梦，人间值得，加油！]]></content>
      
      
      <categories>
          
          <category> 学习方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 学习方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新拟态</title>
      <link href="2020/11/14/%E6%96%B0%E6%8B%9F%E6%80%81/"/>
      <url>2020/11/14/%E6%96%B0%E6%8B%9F%E6%80%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="什么是新拟态？"><a href="#什么是新拟态？" class="headerlink" title="什么是新拟态？"></a>什么是新拟态？</h1><p>哇！博主时隔多日，终于是发文章了。额咳咳，中文文章了。算了不跑题了，今天我们要讲的是新拟态！在我介绍之前，你用你那聪明的脑袋想想，什么是新拟态？5，4，3，2，1 好了时间到了，那么，在了解新拟态之前，跟随我的步伐，我们来了解一下拟态是个什么东西，我先声明，我没有凑字数，而且我也不是营销号，关于拟态的名词有很多，额，比如说：保护色，警戒色；亦或是，斑马线？看我说的这么真实，帮我分享一下怎么样 —— 来自博主的哀求，咳咳，不跑题了，真的。接着说我们的拟态，拟态呢，刚刚说过了我们常见的例子有斑马线，其实斑马线呢，它很实在，斑马线的作用是什么？引导行人安全地过马路啊，在学术界，有很多人对斑马的条纹议论纷纷，有的说：“黑色吸热，白色反光，肯定是用来调节体温的！” 但是为什么是黑色白色一起长？有的说是保护色，因为在开阔的草原和沙漠地带，斑马这种黑白相见的条纹，在阳光或者月光的照射下，反射的光线各不相同，起着模糊或分散其体型轮廓的作用，使得敌害放眼望去，很难将他们与周围的环境区分开来。这样子斑马就能减少被敌害发现的机会，以达到保护自己的目的。也有说是同类之间相互识别，他们便逐渐形成来现在的体表颜色。因为不同的种类的斑马，身上的斑纹各不同，有的粗大稀少，有的细密均匀。这些图案实际上是斑马的身份证，他们就是通过斑纹来识别自己的同类的。反正是议论纷纷，至今为止都搞不懂是用来干嘛的，咳咳怎么开始说生物学了，算了，不多废话，拟态，顾名思义，就是模拟形态，状态，比如说我们的迷彩服就是拟态，但是新拟态就不走寻常路了，它不是生物，物品上的模仿，而是一种新的技术，好，写代码的都给我注意了！特别是前端的！新拟态可以在线生成 UI 设计，且可以和前端的 css 交互一起用到网页上，比如说我们来看看 Neumorphism 生成的新拟态 UI，<a href="https://neumorphism.io/#55b9f3">链接</a> ， 首先，你看到了一个蓝色的界面</p><p><img src="http://images.shejidaren.com/wp-content/uploads/2020/02/35701.jpg" alt="主要是图片太难找，我又懒"></p><p>网页有一个控制台，里面有什么。有条，试着拖动一下，” 按钮” 变大了？还是变小了？看看下面的 css 源码，是 css，这就是新拟态的功能，他可以在线生成 Ui，然后分析出代码。这就是，新拟态，它拟的不是动物植物，而是前端啊！</p><h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><p>看个图</p><p><img src="http://images.shejidaren.com/wp-content/uploads/2020/02/35701-4.jpg" alt="图"></p><p>还行吗？这就是用新拟态做的，具体的，怎么做呢？还是使用 Neumorphism 在线工具！对于骷髅宝宝来说，这是最容易上手的在线工具了！第二个原因是 Neumorphism 在线工具来快速实现新拟态 UI 效果，因为它带有预览功能，所见即所得，比 PS 或 Sketch 上设置更加快捷，而具体的设置参数看对应 CSS 属性值就可以了。</p><p><img src="http://images.shejidaren.com/wp-content/uploads/2020/02/35701.gif" alt="变色.Gif"></p><p>给图形添加 2 个阴影，参数要设置大一些，注意两阴影颜色是同一色调，然后分别设置一个亮色一暗色。这里就不说参数了，如果你调整不出效果，表示你色感方面还需要加强。</p><p><img src="http://images.shejidaren.com/wp-content/uploads/2020/02/35701-3.png" alt="image"></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Css"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border-radius</span>: 50<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-id">#9ed2f0</span>;</span><br><span class="line"><span class="selector-tag">box-shadow</span>:  20<span class="selector-tag">px</span> 20<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> <span class="selector-id">#526d7d</span>, </span><br><span class="line">             <span class="selector-tag">-20px</span> <span class="selector-tag">-20px</span> 0<span class="selector-tag">px</span> <span class="selector-id">#eaffff</span>;</span><br></pre></td></tr></table></figure></div><p>凸出的效果就是利用渐变来设置了。</p><blockquote><p>We’re here to put a dent in the universe. Otherwise why else even be here?</p></blockquote><p>还有许多的功能要慢慢摸索，摸索熟了，自然就会了，新拟态的走向自 2020 年开始一直很好，相信会有很大的发展空间，但是老实说，这不是在使用中最实用的设计。尝试设计和上线以 “新拟态” 为整体调性的产品，很有可能让所有人失望，包括你们的同事、用户和可访问性用户，</p><p>新拟态设计（Neumorphism UI）是 2020 年 UI 设计的主要趋势之一，你可以在 dribbble 上看到很多作品，新拟态是基于 New+Skeuomorphism 英文单词的拼写。它是一种使用对象阴影的模糊、角度和强度来凸显出对象的样式。由于其柔和的阴影和整体的外观，该设计看起来更加的逼真、未来、现代、真实、有吸引力</p><h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><p>当设计中带有重要 CTA 按钮时，你经常考虑并注意以使它重点突出，并且在页面上容易被识别阅读。但是，当使用新拟态的设计风格时，没有诸如对比度之类的东西，因为按钮的材质与背景是相同的，唯一将它们分开的是角度和各种柔和的阴影。</p><p>根据 W3.org 关于移动端可访问性的描述：“与台式机 / 笔记本电脑设备相比，移动设备更可能用于各种环境中，包括户外。在户外，阳光或其他强光源更可能产生眩光，这种情况提高了对所有用户使用良好对比度的重要性，并可能加剧视力低下的用户在移动设备上访问对比度差的内容的挑战性会更强。”</p><p>它简单，易上手，是设计师们的福音</p><p><img src="https://img.zcool.cn/community/01f6995e523e23a80120a8955bee3a.jpg"></p><h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><p>一般来说，带有阴影的元素通常比没有阴影的视觉上更加突出。但是，使用新拟态设计时，大多数元素都会漂浮并脱引而出，在一个屏幕上互相竞争，用户很难轻易的理解页面中的视觉层次和信息层级关系，这会导致界面缺少适当的焦点，从而在眼动追踪中造成混乱。</p><p>界面上缺少信息层级关系的结果，会对用户的决策过程以及他们的思考过程产生重大的影响。因此，如存在多个可操作的内容，但是信息层级，重点不突出，这会让用户在当前的流程或页面上产生困惑，很难理解正在发生的事情。从而可能导致错误的判断和误操作，好的 UI/UX 不需要让用户思考。</p><p>认知和学习障碍影响人们处理信息的方式。例如，它们可以影响人们的感知、记忆、语言、注意力、解决问题和理解力。类别和条件的术语各不相同，包括智力残疾、发育障碍、注意缺陷多动障碍（ADHD）、自闭症、痴呆症、诵读障碍等。 -w3.org</p><p><img src="https://img.zcool.cn/community/01f6995e523e23a80120a8955bee3a.jpg"></p><p>在物理上，新拟态会造成混乱<br>你可能会出现以下疑问：</p><ul><li><p>我可以点击吗？</p></li><li><p>选择了什么？</p></li><li><p>不是什么？</p></li><li><p>这是可点击的吗？</p></li><li><p>还是不是？</p></li></ul><p>对象的阶段由内部 / 外部阴影决定和标识。由于新拟态围绕着各种阴影色调和角度变化，因此用户不禁要问，可点击与不可点击之间的界限在哪里。<br><img src="https://img.zcool.cn/community/01325f5e523e41a80120a8954e3d30.jpg"></p><p>每个使用新拟态的产品都可以根据其功能和要求有自己的 UI 设计规范，但是由于阴影、角度和浮动水平的不同，由于缺乏一致性，迷失了方向的可操作项，“新拟态” 可能会给用户带来麻烦，最终为残疾用户造成身体障碍。</p><p>触发可操作性的元素应该足够清晰，以便与不可操作的元素（内容、状态信息等）明确区分。提供元素可操作的明确指示与具有可操作元素（如按钮或链接）的 web 和本机移动应用程序相关，尤其是在交互模式中，可操作元素通常以视觉方式检测（触摸和鼠标使用）。交互元素还必须由依赖于编程确定的可访问名称的用户（例如屏幕阅读器用户）检测到。 -W3.org</p><p><img src="https://img.zcool.cn/community/0182265e523e4ea8012165186c768f.jpg"></p><p>从 dribbble 开始的新拟态的设计趋势，应该要在追随前认真的思考，是否适用？这是一个问题。设计师可以自由地实践和探索他们倾向于哪种趋势或风格…… 我只是在这里展示和解释为什么 “新拟态” 和 “可访问性” 不能并存。我也不是来阻止你练习你的设计技巧（如果有的话，我鼓励每个人练习他们的技巧和探索他们的想法，但希望，考虑它可能对残疾用户的影响以及特殊场景下的实用性的思考）。</p><blockquote><p>现在是 2020 年，作为一个设计师，我认为我们必须重新评估我们在设计实际产品时的设计方式。我们不能为所有人设计，但要排除残疾用户。在可访问性和使所有数字产品都可访问方面，我们还有很长的路要走，但是它必须要在某一个地方开始。例如，它可以从我们把新拟态抛在脑后开始，而从那时起专注于开发一种在美学上令人愉悦但又实用又现实的设计。——UXTalk 设计杂谈</p></blockquote><ul><li>Thanks</li></ul>]]></content>
      
      
      <categories>
          
          <category> Toss Note </category>
          
          <category> 新拟态 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 新拟态 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图床的千层套路</title>
      <link href="2020/09/17/images/"/>
      <url>2020/09/17/images/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="tip">本文转载于CYF ，已获得其本人同意 &ensp;&ensp; 原文👉 <a href="https://blog.cyfan.top/p/eb490c73.html" style="color:white;"> 图床的千层套路</a></div><blockquote><p> 博客最近在细心打磨终于上95分了，其中我认为图片功劳不可没。<img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/cUEQrVYGFiDjqhy.jpg"></p></blockquote><p>2020年8月9日<a href="https://github.com/jsdelivr/jsdelivr/pull/18247/files">Jsdelivr发布了一次使用政策：Create Acceptable Use Policy</a>，其中第4条Prohibited Use引起了众多议论：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Markdown"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">4.</span> Prohibited Use</span><br><span class="line"></span><br><span class="line">The following behavior is prohibited:</span><br><span class="line"></span><br><span class="line"><span class="bullet"> 1.</span> Hosting or accessing content that:</span><br><span class="line"><span class="bullet">     -</span> contains malware or harmful code in any form,</span><br><span class="line"><span class="bullet">     -</span> violates proprietary rights of others,</span><br><span class="line"><span class="bullet">     -</span> is sexually explicit,</span><br><span class="line"><span class="bullet">     -</span> is potentially illegal in the EU or the USA.</span><br><span class="line"></span><br><span class="line"><span class="bullet"> 2.</span> Abusing the service and its resources, or using jsDelivr as a general-purpose</span><br><span class="line"><span class="code">    file or media hosting service. This includes, for example:</span></span><br><span class="line"><span class="code">     - running an image hosting website and using jsDelivr as a storage for all</span></span><br><span class="line"><span class="code">       uploaded images,</span></span><br><span class="line"><span class="code">     - hosting videos, file backups, or other files in large quantities.</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    We recognize that there are legitimate projects that consist of a large number</span></span><br><span class="line"><span class="code">    of files, and these are not considered abuse. For example: icons packs, apps,</span></span><br><span class="line"><span class="code">    or games with a large number of assets.</span></span><br><span class="line"><span class="code"></span></span><br></pre></td></tr></table></figure></div><p>其中<code>running an image hosting website and using jsDelivr as a storage for all uploaded images</code> 这一句相当的有歧义，要多少的图片才能算是图站？博客里面图片放里面算吗？上传的图片怎样才不行？<img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/TlAGjm6IvJSMVpq.jpg"></p><p>反观网上流传的白嫖Github做图床，基本点进去都是<code>https://cdn.jsdelivr.net/gh/</code> 这样子的图床，这种行为，我不敢妄加评论。但是，jsdelivr诞生的意义似乎并不是为了图床而生的，这种行为也很难判断成滥用。<img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/5896ece29a8e0.jpg"></p><p>使用政策发布之后，一时间，QQ群、v2ex、知乎上立刻就炸了锅。很多人猜测jsdelivr是不是滥用过度而禁止将其作为图床？免费图床的白嫖日子要结束了吗？更多的人，是在哭诉和询问那里还有像jsd一样优秀的<strong>图床</strong>可以白嫖，微博炸了，那里还有免费图床啊？</p><p>实际上，我一般采用的是<code>BackBlaze+CloudFlare</code> 但是自从八月底移动开始改道，从原先优秀的CMI绕路LAX后，国内CloudFlare访问质量再次暴跌，这不得不使我将博客迁至Vercel。好在八月份我有幸申请到了<code>doegdoge图床</code>使用权限，获得了国内较高速的图床.</p><p>但是，对于哪些没有没有图床的人来说，免费图床真的这么难以获得吗？</p><p>不好意思，<strong>免费图床非常多</strong>，只是你不会用而已，这篇文章，就是拯救面前陷入图床危机的你【当然是面向小白，大佬也可以在底下给我提意见鸭】。<img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/stick_56.png"></p><h1 id="公益图床"><a href="#公益图床" class="headerlink" title="公益图床"></a>公益图床</h1><h2 id="sm-ms"><a href="#sm-ms" class="headerlink" title="sm.ms"></a>sm.ms</h2><p><a href="https://sm.ms/">https://sm.ms</a></p><p>推荐程度：★</p><p>首先推荐的是这个图床，loli.net域名经典重现。三年前此图床域名还有备案采用的是国内CDN，可惜后来因为滥用吊销备案号而被迫迁移国外，用的是CloudFlare。实际使用效果面向国内确实不太好，建议备用。</p><p>你不需要注册，拖拽直接上传，只要不违反大陆和香港法律，他就能永久保留你的图片</p><p><img src="https://i.loli.net/2020/09/12/OxvnMBwd3VA8uyD.jpg"></p><p>可搭配PicGo</p><h2 id="Imgur"><a href="#Imgur" class="headerlink" title="Imgur"></a>Imgur</h2><p><a href="https://imgur.com/">https://imgur.com</a></p><p>推荐程度：★★</p><p>国外一家牛逼的图片托管服务商，你可以选择注册或不注册，同样的，拖拽上传，永久保留，其SLA有着相当高的保证。</p><p>然而很可惜的是，这种网站很早就在国内被<strong>DNS域名污染</strong>，也就意味着访客无法正常加载你的图片。这也就是被打为两颗星的原因。<img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/%E4%B8%8D%E8%AF%B4%E8%AF%9D.png"></p><p>当然，你也可以通过<a href="#%E5%9B%BE%E5%83%8F%E7%BC%93%E5%AD%98%E6%9C%8D%E5%8A%A1">#图像缓存服务</a> 从而实现国内访问。</p><p>可搭配PicGo【需注册】</p><h2 id="去不图床"><a href="#去不图床" class="headerlink" title="去不图床"></a>去不图床</h2><p><a href="https://7bu.top/">https://7bu.top/</a></p><p>推荐程度：★★★★</p><p>由<a href="https://dusays.com/241/">杜老师</a>提供的个人公益图床，存储于阿里和腾讯的COS，官方保证SLA&gt;=99%，是一个不错的选择，当然，7bu毕竟是个人维护的图床，能不能永久撑下去还是个问题，我也没有做过深度评测，无法表明其可用性。</p><p>可搭配PicGo。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Yml"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">接口地址：https://7bu.top/api/upload</span></span><br><span class="line"><span class="string">post参数：image</span></span><br><span class="line"><span class="string">回调json：data.url</span></span><br></pre></td></tr></table></figure></div><p><a href="https://7bu.top/index/api.html">更准确的API文档</a></p><p><img src="https://7.dusays.com/2020/09/13/aa555748a9f38.jpg"></p><blockquote><p><del>而且，就在我上传测试图片的时候，明明已经表明图片已经上传，打开却发现COS提示404，这一点我不得陷入思考，个人维持的公益项目真的能保证SLA吗？<img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/%E4%BE%BF%E4%BE%BF.png"></del></p></blockquote><blockquote><p>昨天上传的时候撞上服务器维修了，很抱歉做出了不够恰当的评价.7bu采用的是全国腾讯云CDN加速，国内访问速度十分优良。然而请注意，7bu刚开始建立的目的并不是面向全球【仅面对中国大陆游客】，这导致其大陆以外基本解析至国内西藏腾讯，访问效果并不好。并且，这是通过腾讯云的鉴黄，可能会存在误杀行为。具体使用请个人斟酌【不过作为开发环境还是可行的】。</p></blockquote><h1 id="白嫖的"><a href="#白嫖的" class="headerlink" title="白嫖的"></a>白嫖的</h1><h2 id="阿里图床"><a href="#阿里图床" class="headerlink" title="阿里图床"></a>阿里图床</h2><p>推荐程度：★★★★</p><p>我个人搭建的API：<a href="https://picbed.cyfan.top/">https://picbed.cyfan.top</a> 不保证上传SLA<img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/5c53ce897ab55.jpg"></p><p>由于小鸡联通国内网络不太好，很有可能无法正常上传，<a href="https://github.com/ChenYFan-Tester/Alibaba_pic">原项目已经开源</a> ，你完全可以通过在国内的机子或者是本地搭建以获得更佳体验。</p><p>如果上传成功了，图片将会托管于阿里云的CDN，无论是速度还是延迟都相当的优秀。</p><p>官方大厂，下载SLA有保障。</p><p>可搭配PicGo。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Yml"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">接口地址：https://picbed.cyfan.top/update.php</span></span><br><span class="line"><span class="string">post参数：file</span></span><br><span class="line"><span class="string">回调json：data.url</span></span><br></pre></td></tr></table></figure></div><h2 id="DogeDoge图床"><a href="#DogeDoge图床" class="headerlink" title="DogeDoge图床"></a>DogeDoge图床</h2><p>推荐程度：★★★★★</p><p><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/20200912192303.jpg" alt="TEST"></p><p>其实很早就看到<a href="https://v2ex.com/t/659652">V2EX的那篇征文了</a>：</p><p><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/20200912190301.png?q=45"></p><p>可是当时我不够优秀啊<span class="heimu">虽然现在同样不优秀</span>，博客也没满一年啊，于是白嫖的心态搁浅了。<img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/5896e8a408253.jpg"></p><p>后来突然看到<a href="https://blog.jalenchuh.cn/" content="nofollow">Jalen的博客</a>也用了DogeDoge图床，这才突然意识到原来我已经满一年了。于是抱着试试看的心态向doge官方邮箱发送了邮件，结果真过了。。。</p><p>dogedoge拥有着国内相当不错的CDN，国内访问飞快，但是国外的访问质量的确不如人意。【反正此博客面向中国大陆】</p><p>而且，DogeDoge拥有着很良心的处理参数：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Yml"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">w：宽</span></span><br><span class="line"><span class="string">h：高</span></span><br><span class="line"><span class="string">mode：模式</span> <span class="bullet">-</span> <span class="string">crop</span> <span class="string">裁剪、clip</span> <span class="string">缩略</span></span><br><span class="line"><span class="string">fmt：格式</span> <span class="bullet">-</span> <span class="string">jpg、png、webp（原图为</span> <span class="string">gif，且没有</span> <span class="string">frame</span> <span class="string">参数时，不做任何裁切、缩略处理）</span></span><br><span class="line"><span class="string">frame：1</span> <span class="bullet">-</span> <span class="string">EOF帧，默认为</span> <span class="number">1</span> <span class="string">（对动画有效）</span></span><br><span class="line"><span class="string">q：压缩质量</span> <span class="bullet">-</span> <span class="number">1</span> <span class="bullet">-</span> <span class="number">100</span><span class="string">（默认</span> <span class="number">90</span> <span class="string">）</span></span><br><span class="line"><span class="string">rect：指定位置裁剪</span> <span class="bullet">-</span> <span class="string">top,left,w,h（若与</span> <span class="string">w</span> <span class="string">/</span> <span class="string">h</span> <span class="string">参数同时存在，则</span> <span class="string">会在</span> <span class="string">rect</span> <span class="string">裁剪过后，继续按照</span> <span class="string">w</span> <span class="string">/</span> <span class="string">h</span> <span class="string">的要求缩略）</span></span><br><span class="line"><span class="string">pos：（配合</span> <span class="string">w</span> <span class="string">/</span> <span class="string">h</span> <span class="string">）裁剪位置</span> <span class="bullet">-</span> <span class="string">top-left、top、top-right、left、center、right、bottom-left、bottom、bottom-right，默认为center</span></span><br><span class="line"><span class="string">pos</span> <span class="string">还有一个特殊的值</span> <span class="string">auto，该值目前为</span> <span class="string">alpha</span> <span class="string">状态，可以根据图片重点来进行</span> <span class="string">pos</span> <span class="string">的位置取舍。</span></span><br></pre></td></tr></table></figure></div><p>当然，DogeDoge也可以搭配PicGo使用。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Yml"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">接口地址：https://www.dogedoge.com/tools/upload/&#123;Your_Token&#125;</span></span><br><span class="line"><span class="string">post参数：file</span></span><br><span class="line"><span class="string">回调json：data.o_url</span></span><br></pre></td></tr></table></figure></div><p>当然，现在的Doge图床还是处于免费的试用期【Creater】，不过好在试用期过后价格也比较合理，一般的tester也足够使用，目前看来SLA还是不错的。</p><p>当然，申请不到dogedoge图床也没关系，看下去你就会发现，白嫖的路千千万万，何必执着于一条。<img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/stick_34.png"></p><p><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/20200912205753.png?q=45"></p><h2 id="BackBlaze"><a href="#BackBlaze" class="headerlink" title="BackBlaze"></a>BackBlaze</h2><p>推荐程度：★★★</p><p>具体可以看看<a href="/2020/07/09/free-10GB-oss-poweredby-backblaze/">这篇文章</a></p><h2 id="千奇百怪的"><a href="#千奇百怪的" class="headerlink" title="千奇百怪的"></a>千奇百怪的</h2><h2 id="Github-JSDelivr"><a href="#Github-JSDelivr" class="headerlink" title="Github+JSDelivr"></a>Github+JSDelivr</h2><p>正如我所说的，这种组合已经被广大博主所采纳，并且网上教程已经泛滥了，在这里不再阐述。</p><h2 id="npm-JSDelivr-amp-amp-Zhimg-amp-amp-bdstatic-amp-amp-自定义镜像"><a href="#npm-JSDelivr-amp-amp-Zhimg-amp-amp-bdstatic-amp-amp-自定义镜像" class="headerlink" title="npm+JSDelivr&amp;&amp;Zhimg&amp;&amp;bdstatic&amp;&amp;自定义镜像"></a>npm+JSDelivr&amp;&amp;Zhimg&amp;&amp;bdstatic&amp;&amp;自定义镜像</h2><p>推荐程度：★★★★★</p><p>为什么很多文章都没有提到用npm做图床？我想其中很大的原因是，白嫖jsd做图床的，很多都是小白【或者不愿花时间在于此的大佬】，同样的，这些文章面向的都是这些人，毕竟，以拖拽方式上传的Github和命令行方式上传，我想，大都数人会选择前者吧。</p><p>可是，你们没有想到的是，github文件镜像【github.com.cnpmjs.org是站点镜像】只有jsd一个，npm镜像可远远不止这一个啊！</p><p>让我们看看分别镜像在jsd、zhimg、bdstatic的文件怎么样：</p><p><img src="https://cdn.jsdelivr.net/npm/chenyfan-oss@0.0.1/1.jpg"></p><p><img src="https://unpkg.zhimg.com/chenyfan-oss@0.0.1/2.jpg"></p><p><img src="https://code.bdstatic.com/npm/chenyfan-oss@0.0.1/3.jpg"></p><p>【unpkg镜像用的是CloudFlare，国内加速效果不好，暂时不写】</p><p>jsd就不必多说了，国内拥有强劲的网宿节点支撑【虽然以前出现过网宿下游投毒】，速度丝滑无比，国外也有强劲的CloudFlare上岗，可谓国内外两不误。而且，jsd对于npm的package单文件没有大小限制，也就是说泡个视频也不是问题。</p><p>zhimg是知乎的unpkg镜像，也是一个不错的选择【阿里CDN】，知乎官方也未对此做出限制，日常使用是可以的。</p><p>bdstatic是百度的内用npm镜像，速度也很好【百度CDN】，但是请注意，bdstatic作为内用cdn，其拉取频率较慢，经常出现无法及时更新。</p><p>啊哈？不会上传？<br><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/stick_31.png">去<a href="https://npmjs.org/">npm</a><br>官网注册个账号去,然后先：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Bash"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm login</span><br></pre></td></tr></table></figure></div><p>接着：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Bash"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br><span class="line">npm publish</span><br></pre></td></tr></table></figure></div><p>请注意，如果你之前用过淘宝镜像，那么请先手动切回源：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Bash"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmjs.org</span><br></pre></td></tr></table></figure></div><p>每一次发布图片后，你可以将原来的图片删除，更改<code>package.json</code> 版本号【向上增加】,然后<code>npm publish</code>即可</p><p>这个似乎可以搭配picgo，不过好像没这个插件，写起来也麻烦。。。</p><p>unpkg的国内镜像其实远远不止这些，包括七牛、饿了么、腾讯都有，不过这个就要自己找了。<img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/7DgSoyqwtYBxchE.jpg"></p><p>一些推荐的npm【or unpkg镜像】：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Markdown"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">【jsd出品，网宿国内节点】https://cdn.jsdelivr.net/npm/</span><br><span class="line">【知乎出品，阿里国内节点】https://unpkg.zhimg.com/</span><br><span class="line">【百度出品，网宿国内节点】https://code.bdstatic.com/npm/</span><br><span class="line">【饿了么出品，网宿国内节点】https://shadow.elemecdn.com/npm/</span><br></pre></td></tr></table></figure></div><p>或者说，你还可以自建unpkg镜像。</p><p>啊，你说你没有服务器反向代理unpkg？</p><p>其实，七牛的对象存储，腾讯的COS和阿里的OSS都是支持镜像回源的鸭！</p><p>七牛http流量每月免费10GB，腾讯的国内免费60GB6个月，作为自用完全足够了！</p><p><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/L6LVJL_1ZUM2ISQ]10R%7B3HF.png?q=45"></p><h2 id="ipfs"><a href="#ipfs" class="headerlink" title="ipfs"></a>ipfs</h2><p>我曾经<a href="/2020/04/07/IPFS-CloudFlare-ServerLessWebPage/">写过关于ipfs的讲解</a> ,作为一个去中心化的存储系统拿来做公开图床其实挺不错的。</p><p>我个人搭建的ipfs镜像【托管于CloudFlareWorkers】：<a href="https://ipfs.cyfan.top/">https://ipfs.cyfan.top</a> <img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/5c53d78c3f4a5.jpg"></p><p>我个人搭建的ipfs上传API：<a href="https://ipfsupload.cyfan.top/">https://ipfsupload.cyfan.top</a></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Yml"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">接口地址：https://ipfsupload.cyfan.top/api/v0/add?pin=true</span></span><br><span class="line"><span class="string">post参数：file</span></span><br><span class="line"><span class="string">回调json：Hash</span></span><br></pre></td></tr></table></figure></div><blockquote><p>此处Hash获得的是文件的Qmhash，你还要依托ipfs镜像，如<a href="https://ipfs.cyfan.top/ipfs/%7BQmHash%7D">https://ipfs.cyfan.top/ipfs/{QmHash}</a></p></blockquote><p><img src="https://ipfs.cyfan.top/ipfs/QmctXmCyxkN72nzoHMAgw1geR7u9XvK7sLo72W4bDZsCm2"></p><p>顺便收录一些ipfs网关【可访问】：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Html"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">【北京 阿里云】https://hashnews.k1ic.com/</span><br><span class="line">【香港 阿里云】https://ipfs.jbb.one/</span><br><span class="line">【美国 DigitalOcean】https://ipfs.telos.miami/</span><br><span class="line">【Amazon】https://ipfs.oceanprotocol.com/</span><br></pre></td></tr></table></figure></div><p>你可以在<a href="https://ipfs.github.io/public-gateway-checker/">https://ipfs.github.io/public-gateway-checker/</a>找到更多</p><h1 id="图片缓存服务"><a href="#图片缓存服务" class="headerlink" title="图片缓存服务"></a>图片缓存服务</h1><p>正如<a href="##Imgur">##Imgur</a>所说的，imgur在国内已经无法访问了，但是，图片缓存服务可以啊！</p><p><img src="https://search.pstatic.net/common/?src=https://i.imgur.com/Usdr0IT.jpg"></p><p>收集了一些图片缓存服务：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">【国内网宿节点，只能加载特定图床图片如imgur】https://search.pstatic.net/common/?src=</span><br><span class="line">【Akamai节点，没有使用限制】https://imageproxy.pimg.tw/resize?url=</span><br><span class="line">【CloudFlare节点】https://images.weserv.nl/?url=</span><br><span class="line">【CloudFlare节点】https://pic1.xuehuaimg.com/proxy/</span><br></pre></td></tr></table></figure><h1 id="PicGo的搭配使用"><a href="#PicGo的搭配使用" class="headerlink" title="PicGo的搭配使用"></a>PicGo的搭配使用</h1><p>PicGo默认已经集成了部分图床，其拖拽上传、自动复制剪贴板实在赢得了无数人的心。但是，对于一些冷门的图床支持似乎就不太好，这时候你需要用自定义web图床实现这一切：</p><p><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/20200912205225.png?q=45"></p><p>我在上方介绍的图床如果支持web端上传，基本上就会写一个post请求，你可以依葫芦画瓢填写进去</p><p><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/20200912205449.png?q=45"></p><p>这样子你就可以实现较为丝滑的上传图片了：</p><p><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/20200912210009.jpg?q=45"></p><p><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/20200912210420.gif?q=45"></p><p>【为了压缩方便删除了部分帧】</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
            <tag> 白嫖 </tag>
            
            <tag> PicGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JsDelivr图床</title>
      <link href="2020/08/12/jsdelvr/"/>
      <url>2020/08/12/jsdelvr/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>先说一下：</p><p><code>JsDelivr</code>是<code>GitHub</code>的CDN</p><p>直接访问即可。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><p>新建一个库，放图片。</p><p>（细说略。。）</p><h2 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h2><p>下载不说了。</p><p>默认的不好用。</p><p>用插件<code>githubPlus</code></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><table><thead><tr><th>项目</th><th>描述</th></tr></thead><tbody><tr><td>repo</td><td>你的库名：<code>用户名/库名</code></td></tr><tr><td>branch</td><td>直接填：<code>master</code></td></tr><tr><td>token</td><td>Github申请token(后面讲)</td></tr><tr><td>path</td><td>库内路径(选)：<code>img/</code></td></tr><tr><td>customUrl</td><td>使用JsDerlivr：<code>https://cdn.jsdelivr.net/gh/用户名/库名</code></td></tr><tr><td>origin</td><td>选<code>github</code></td></tr></tbody></table><h3 id="GitHub-Token"><a href="#GitHub-Token" class="headerlink" title="GitHub Token"></a>GitHub Token</h3><p><a href="https://github.com/settings/apps">GitHub申请Token</a><img src="https://cdn.jsdelivr.net/gh/wayne0926/myphoto/img/jsdelivr1.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/wayne0926/myphoto/img/jsdelivr2.jpg"></p><p><strong>注意：</strong> Token妥善保管，且只显示一次。</p><h1 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h1><p><img src="https://cdn.jsdelivr.net/gh/wayne0926/myphoto/img/jsdelivr3.jpg"></p><p>如果出错，改个名字，重试。</p><h1 id="视频版"><a href="#视频版" class="headerlink" title="视频版"></a>视频版</h1><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=414284918&bvid=BV14V411U7Uo&cid=225060470&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;" ></iframe></div>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> 教程 </tag>
            
            <tag> cdn </tag>
            
            <tag> hexo </tag>
            
            <tag> jsdelivr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode插件—CloudMusic</title>
      <link href="2020/08/08/1/"/>
      <url>2020/08/08/1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>这是一款傻瓜式的VSC网抑云在线插件。</p><p><a href="https://marketplace.visualstudio.com/items?itemName=yxl.cloudmusic&ssr=false#overview"><img src="https://cdn.jsdelivr.net/gh/wayne0926/myphoto/img/cloudmusic.jpg"></a></p><p>本插件具有以下特点：</p><ul><li>简单：开箱即用，无需安装、修改任何文件</li><li>快速：使用本机模块，资源占用低，速度快</li><li>强大：借助网页 API，能实现所有常用功能</li></ul><p>已实现的功能：</p><ul><li>每日签到</li><li>歌曲播放，收藏，喜欢</li><li>听歌打卡</li><li>心动模式</li><li>私人 FM</li><li>歌词显示</li><li>搜索（热搜/单曲/专辑/歌手…）</li><li>缓存管理</li><li>可选无损音质</li><li>媒体控制支持</li><li>更多功能等待发现</li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><a href="https://marketplace.visualstudio.com/items?itemName=yxl.cloudmusic&ssr=false#overview">点击这里直接访问插件商店网页版本</a></p><p><a href="vscode:extension/yxl.cloudmusic">直接点击这里安装</a></p><p><a href="https://github.com/YXL76/cloudmusic-vscode"><img src="https://cdn.jsdelivr.net/gh/wayne0926/myphoto/img/githubck.png" alt="Github仓库"></a></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p><img src="https://cdn.jsdelivr.net/gh/wayne0926/myphoto/img/cloudmusic2.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/wayne0926/myphoto/img/cloudmusic3.jpg"></p><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><ul><li><code>cloudmusic.account.autoCheck</code>: 登录后自动签到</li><li><code>cloudmusic.cache.size</code>: 缓存大小限制</li><li><code>cloudmusic.music.quality</code>: 音质选择</li></ul><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><ul><li><code>Cloudmusic: Sign in</code>: 登录</li><li><code>Cloudmusic: Sign out</code> :登出</li><li><code>Cloudmusic: Daily check</code>: 每日签到</li><li><code>Cloudmusic: Toggle button</code>: 显示/隐藏按钮</li></ul><h2 id="已知问题"><a href="#已知问题" class="headerlink" title="已知问题"></a>已知问题</h2><ul><li>对于使用代理软件的用户，如果播放出现网络错误，请设置<code>http.proxy</code>（不是<code>cloudmusic.music.proxy</code>）</li></ul><h1 id="发行说明"><a href="#发行说明" class="headerlink" title="发行说明"></a>发行说明</h1><p><a href="https://github.com/YXL76/cloudmusic-vscode/blob/master/CHANGELOG.md">发行说明</a></p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>转载于<a href="https://wr0926.ml/">时过境迁</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 网易云 </tag>
            
            <tag> VSCode </tag>
            
            <tag> 插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly添加全局吸底Aplayer教程</title>
      <link href="2020/07/31/butterfly1/"/>
      <url>2020/07/31/butterfly1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文转载于butterfly作者 – Jerry，以获得其本人允许。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如果你想使用aplayer，很多人都會推薦安裝<a href="https://github.com/MoePlayer/hexo-tag-aplayer">hexo-tag-aplayer</a>這款插件。這款插件通過Hexo獨有的標籤外掛，我們可以很方便的寫入一些參數，插件就會幫我們生成對應的html。如果你只是使用一些簡單的功能，其實無需使用到這個插件，只需以html格式書寫就行，不用插件去轉換。</p><p>例如：</p><p>如果使用插件，在markdown中要這樣寫</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Markdown"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% meting &quot;000PeZCQ1i4XVs&quot; &quot;tencent&quot; &quot;artist&quot; &quot;theme:#3F51B5&quot; &quot;mutex:true&quot; &quot;preload:auto&quot; %&#125;</span><br></pre></td></tr></table></figure></div><p>其會被插件渲染為</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Html"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;aplayer-uxAIfEUs&quot;</span> <span class="attr">class</span>=<span class="string">&quot;aplayer aplayer-tag-marker meting-tag-marker&quot;</span> <span class="attr">data-id</span>=<span class="string">&quot;000PeZCQ1i4XVs&quot;</span> <span class="attr">data-server</span>=<span class="string">&quot;tencent&quot;</span> <span class="attr">data-type</span>=<span class="string">&quot;artist&quot;</span> <span class="attr">data-mode</span>=<span class="string">&quot;circulation&quot;</span> <span class="attr">data-autoplay</span>=<span class="string">&quot;false&quot;</span> <span class="attr">data-mutex</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-listmaxheight</span>=<span class="string">&quot;340px&quot;</span> <span class="attr">data-preload</span>=<span class="string">&quot;auto&quot;</span> <span class="attr">data-theme</span>=<span class="string">&quot;#3F51B5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>如果我們不想使用插件，就需要在markdown中用html的格式書寫，同時把主題配置文件中的<code>aplayerInject</code>開啟</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Markdown"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;aplayer&quot;</span> <span class="attr">data-id</span>=<span class="string">&quot;000PeZCQ1i4XVs&quot;</span> <span class="attr">data-server</span>=<span class="string">&quot;tencent&quot;</span> <span class="attr">data-type</span>=<span class="string">&quot;artist&quot;</span> <span class="attr">data-mutex</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-preload</span>=<span class="string">&quot;auto&quot;</span> <span class="attr">data-theme</span>=<span class="string">&quot;#3F51B5&quot;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div><p>這樣我們就可以不用使用多一個插件，當然這種東西見仁見智，選自己喜歡的就行。</p><p>回到正題，這篇文章將教大家如何在Butterfly上使用全局吸底Aplayer</p><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/butterfly-aplayer-xidi.gif" alt="aplayer"></p><h2 id="關閉-asset-inject"><a href="#關閉-asset-inject" class="headerlink" title="關閉 asset_inject"></a>關閉 <code>asset_inject</code></h2><p>此步驟適用於安裝了<code>hexo-tag-aplayer</code>插件的人</p><p>由於需要全局都插入aplayer和meting資源，為了防止插入重複的資源，需要把asset_inject設為<code>false</code></p><p>在Hexo的配置文件中</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Yaml"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aplayer:</span></span><br><span class="line">  <span class="attr">meting:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">asset_inject:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></div><h2 id="開啟主題的aplayerInject"><a href="#開啟主題的aplayerInject" class="headerlink" title="開啟主題的aplayerInject"></a>開啟主題的<code>aplayerInject</code></h2><p>在主題的配置文件中，<code>enable</code>設為<code>true</code>和<code>per_page</code>設為<code>true</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Yaml"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Inject the css and script (aplayer/meting)</span></span><br><span class="line"><span class="attr">aplayerInject:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></div><h2 id="插入Aplayer-html"><a href="#插入Aplayer-html" class="headerlink" title="插入Aplayer html"></a>插入Aplayer html</h2><p>為了適配hexo-tag-aplayer，主題內置的Meting js 仍為1.2版本，並非最新的2.x版本。</p><p>Aplayer html 例子：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Markdown"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;aplayer no-destroy&quot;</span> <span class="attr">data-id</span>=<span class="string">&quot;000PeZCQ1i4XVs&quot;</span> <span class="attr">data-server</span>=<span class="string">&quot;tencent&quot;</span> <span class="attr">data-type</span>=<span class="string">&quot;artist&quot;</span> <span class="attr">data-fixed</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-mini</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-listFolded</span>=<span class="string">&quot;false&quot;</span> <span class="attr">data-order</span>=<span class="string">&quot;random&quot;</span> <span class="attr">data-preload</span>=<span class="string">&quot;none&quot;</span> <span class="attr">data-autoplay</span>=<span class="string">&quot;true&quot;</span> <span class="attr">muted</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div><p>參數解釋</p><table><thead><tr><th>option</th><th>default</th><th>description</th></tr></thead><tbody><tr><td>data-id</td><td><strong>require</strong></td><td>song id / playlist id / album id / search keyword</td></tr><tr><td>data-server</td><td><strong>require</strong></td><td>music platform: <code>netease</code>, <code>tencent</code>, <code>kugou</code>, <code>xiami</code>, <code>baidu</code></td></tr><tr><td>data-type</td><td><strong>require</strong></td><td><code>song</code>, <code>playlist</code>, <code>album</code>, <code>search</code>, <code>artist</code></td></tr><tr><td>data-fixed</td><td><code>false</code></td><td>enable fixed mode</td></tr><tr><td>data-mini</td><td><code>false</code></td><td>enable mini mode</td></tr><tr><td>data-autoplay</td><td><code>false</code></td><td>audio autoplay</td></tr><tr><td>data-theme</td><td><code>#2980b9</code></td><td>main color</td></tr><tr><td>data-loop</td><td><code>all</code></td><td>player loop play, values: ‘all’, ‘one’, ‘none’</td></tr><tr><td>data-order</td><td><code>list</code></td><td>player play order, values: ‘list’, ‘random’</td></tr><tr><td>data-preload</td><td><code>auto</code></td><td>values: ‘none’, ‘metadata’, ‘auto’</td></tr><tr><td>data-volume</td><td><code>0.7</code></td><td>default volume, notice that player will remember user setting, default volume will not work after user set volume themselves</td></tr><tr><td>data-mutex</td><td><code>true</code></td><td>prevent to play multiple player at the same time, pause other players when this player start play</td></tr><tr><td>data-lrctype</td><td><code>0</code></td><td>lyric type</td></tr><tr><td>data-listfolded</td><td><code>false</code></td><td>indicate whether list should folded at first</td></tr><tr><td>data-listmaxheight</td><td><code>340px</code></td><td>list max height</td></tr><tr><td>data-storagename</td><td><code>metingjs</code></td><td>localStorage key that store player setting</td></tr></tbody></table><blockquote><p><code>require</code>代表着這些參數是必須要使用的，其它的參數則可以根據自己需要配置。<br>配置全局吸底，<code>data-fixed</code>和<code>data-mini</code>也必須配置，配置為<code>true</code><br>如果使用Pjax，則在class裏需添加<code>no-destroy</code>，這樣防止切換頁面時Aplayer被銷毀<br>把<code>aplayer代碼</code>插入到主題配置文件的<code>inject.bottom</code>去</p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Yaml"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;div</span> <span class="string">class=&quot;aplayer</span> <span class="literal">no</span><span class="string">-destroy&quot;</span> <span class="string">data-id=&quot;000PeZCQ1i4XVs&quot;</span> <span class="string">data-server=&quot;tencent&quot;</span> <span class="string">data-type=&quot;artist&quot;</span> <span class="string">data-fixed=&quot;true&quot;</span> <span class="string">data-mini=&quot;true&quot;</span> <span class="string">data-listFolded=&quot;false&quot;</span> <span class="string">data-order=&quot;random&quot;</span> <span class="string">data-preload=&quot;none&quot;</span> <span class="string">data-autoplay=&quot;true&quot;</span> <span class="string">muted&gt;&lt;/div&gt;</span></span><br></pre></td></tr></table></figure></div><p>運行Hexo就可以看到網頁左下角出現了Aplayer</p><p>最後，如果你想切換頁面時，音樂不會中斷。請把主題配置文件的<code>pjax</code>設為<code>true</code></p><h2 id="UI-調整"><a href="#UI-調整" class="headerlink" title="UI 調整"></a>UI 調整</h2><p>按照上面的步驟設置完成后，瀏覽器左下角會出現Aplayer。打開文章頁面時，你會發現打開Toc目錄的按鈕被遮擋了。我們需要修改CSS來改變按鈕的位置。<br>位置怎麽移動根據自己需求決定，這裏列出2種方法。</p><h3 id="向上調整"><a href="#向上調整" class="headerlink" title="向上調整"></a>向上調整</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Css"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#toggle-sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">80px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/butterfly-add-aplayer-css-bottom.gif" alt="aplayer1"></p><p>在主題配置文件中，添加到<code>inject</code>去</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Yaml"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;&lt;style type=&quot;text/css&quot;&gt;#toggle-sidebar &#123;bottom: 80px&#125;&lt;/style&gt;&#x27;</span></span><br></pre></td></tr></table></figure></div><h3 id="向右調整"><a href="#向右調整" class="headerlink" title="向右調整"></a>向右調整</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Css"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#toggle-sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">100px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/butterfly-add-aplayer-left.gif" alt="butterfly-add-aplayer-left"></p><p>在主題配置文件中，添加到<code>inject</code>去</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="Yaml"><span class="clipboard" data-clipboard-target=".code"><i class="fa fa-clipboard"></i></span><figure class="iseeu highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;&lt;style type=&quot;text/css&quot;&gt;#toggle-sidebar &#123;left:100px&#125;&lt;/style&gt;&#x27;</span></span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 進階教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Hexo </tag>
            
            <tag> 主題 </tag>
            
            <tag> butterfly </tag>
            
            <tag> Aplayer </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
